<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Django项目搭建</title>
    <url>/2020/07/26/Django%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>Django项目搭建</p>
 <span id="more"></span>
<h2 id="配置依赖"><a href="#配置依赖" class="headerlink" title="配置依赖"></a>配置依赖</h2><p>先配置python，然后根据报错提示（最上方）下载全部依赖。会有报错，未成功下载的依赖。将依赖搜索后下载，一般情况下全成功。<br>下载选项位置如图：<br><img src="https://img-blog.csdnimg.cn/20200726171739547.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/20200726171714648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="搭建Django"><a href="#搭建Django" class="headerlink" title="搭建Django"></a>搭建Django</h2><p><img src="https://img-blog.csdnimg.cn/20200726171055536.png" alt="在这里插入图片描述"><br>点击后发现error，点击右下方的fixed，进入如下页面，配置Django<br><img src="https://img-blog.csdnimg.cn/20200726171350500.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="数据库设置"><a href="#数据库设置" class="headerlink" title="数据库设置"></a>数据库设置</h2><p>数据库文件在settings.py文件中，将对应name等进行更改<br><img src="https://img-blog.csdnimg.cn/20200726172251187.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="cnpm下载"><a href="#cnpm下载" class="headerlink" title="cnpm下载"></a>cnpm下载</h2><p>在文件 /frontend&gt; cmd下执行<br>cnpm -v #查看状态（在此之前，于官网下载nodejs，将npm镜像淘宝地址配置成功）<br>cnpm install #下载</p>
<p>一共42个包，在第13个时会卡一会，不慌。成功后，有个√<br>关于错误：<br>①不是内部或外部命令<br>1）nodejs环境变量配置错误<br>2）命令输错了（注意，是cnpm）<br>3）Data数据包中有数据，不能为空</p>
<h2 id="数据库连接"><a href="#数据库连接" class="headerlink" title="数据库连接"></a>数据库连接</h2><p>1）任务管理器打开—》服务—》MySQL57—》右键运行<br>2）开始，MySQL，连接，输密码<br><img src="https://img-blog.csdnimg.cn/2020072617332153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3）本机Navicat连接<br>连接后先建库，然后表右键运行.sql文件<br>导入.sql文件时报错，438数据成功400个<br>不勾选第二个，成功<img src="https://img-blog.csdnimg.cn/20200726174124801.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200726174212330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="项目跑起来"><a href="#项目跑起来" class="headerlink" title="项目跑起来"></a>项目跑起来</h2><p>npm run dev<br>①在pycharm里面输入<img src="https://img-blog.csdnimg.cn/20200726175944461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>②在项目cmd中输入<br>pycharm可能会带不动，很容易卡死</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Django</tag>
      </tags>
  </entry>
  <entry>
    <title>Hadoop大数据行业部署实战</title>
    <url>/2020/12/22/Hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E8%A1%8C%E4%B8%9A%E9%83%A8%E7%BD%B2%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<p>大数据行业部署实战</p>
 <span id="more"></span>
<h1 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h1><p>1． 学会分析环境数据文件；<br>2． 学会编写解析环境数据文件并进行统计的代码；<br>3． 学会进行递归MapReduce。</p>
<h1 id="实验要求"><a href="#实验要求" class="headerlink" title="实验要求"></a>实验要求</h1><pre><code>要求实验结束时，每位学生均已在服务器上运行从北京2016年1月到6月这半年间的历史天气和空气质量数据文件中分析出的环境统计结果，包含月平均气温、空气质量分布情况等。
</code></pre><h2 id="实验原理"><a href="#实验原理" class="headerlink" title="实验原理"></a>实验原理</h2><pre><code>近年来，由于雾霾问题的持续发酵，越来越多的人开始关注城市相关的环境数据，包括空气质量数据、天气数据等等。
如果每小时记录一次城市的天气实况和空气质量实况信息，则每个城市每天都会产生24条环境数据，全国所有2500多个城市如果均如此进行记录，那每天产生的数据量将达到6万多条，每年则会产生2190万条记录，已经可以称得上环境大数据。
对于这些原始监测数据，我们可以根据时间的维度来进行统计，从而得出与该城市相关的日度及月度平均气温、空气质量优良及污染天数等等，从而为研究空气污染物扩散条件提供有力的数据支持。
本实验中选取了北京2016年1月到6月这半年间的每小时天气和空气质量数据（未取到数据的字段填充“N/A”），利用MapReduce来统计月度平均气温和半年内空气质量为优、良、轻度污染、中度污染、重度污染和严重污染的天数。
</code></pre><h1 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h1><h2 id="1、-分析数据文件"><a href="#1、-分析数据文件" class="headerlink" title="1、 分析数据文件"></a>1、 分析数据文件</h2><p>打开terminal，在家目录下，下载并查看环境数据文件beijing.txt<br>wget <a href="http://i9000.net:8888/sgn/HUP/HadoopDeployPro/beijing.txt">http://i9000.net:8888/sgn/HUP/HadoopDeployPro/beijing.txt</a><br>查看前20行数据<br>head -20 beijing.txt<br><img src="https://img-blog.csdnimg.cn/20201222153631417.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图1环境数据文件格式可以看到，我们需要关心的数据有第一列DATE、第二列HOUR、第六列TMP和第七列AQI。</p>
<h2 id="2、-将数据文件上传至HDFS"><a href="#2、-将数据文件上传至HDFS" class="headerlink" title="2、 将数据文件上传至HDFS"></a>2、 将数据文件上传至HDFS</h2><p>将家目录下数据beijing.txt上传到HDFS的/input目录上。<br>hadoop fs -mkdir /input<br>hadoop fs -put ~/beijing.txt /input</p>
<h2 id="3-、编写月平均气温统计程序"><a href="#3-、编写月平均气温统计程序" class="headerlink" title="3 、编写月平均气温统计程序"></a>3 、编写月平均气温统计程序</h2><p>打开eclipse——Window——preferences,选择Hadoop的安装目录如下图，点击apply and close<br><img src="https://img-blog.csdnimg.cn/20201222153642929.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201222153702224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在Eclipse上新建MapReduce项目，命名为TmpStat，在src目录下新建文件 TmpStat.java，并键入如下代码。<br><img src="https://img-blog.csdnimg.cn/20201222153713922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201222153725724.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201222153732844.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020122215374294.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201222153749234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.TextInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.partition.HashPartitioner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TmpStat</span></span></span><br><span class="line"><span class="class"></span>&#123;                                                                                 </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StatMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntWritable intValue = <span class="keyword">new</span> IntWritable();</span><br><span class="line">    <span class="keyword">private</span> Text dateKey = <span class="keyword">new</span> Text();</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> IOException, InterruptedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      String[] items = value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                                                                            </span><br><span class="line">      String date = items[<span class="number">0</span>];</span><br><span class="line">      String tmp = items[<span class="number">5</span>];</span><br><span class="line">                                                                           </span><br><span class="line">      <span class="keyword">if</span>(!<span class="string">&quot;DATE&quot;</span>.equals(date) &amp;&amp; !<span class="string">&quot;N/A&quot;</span>.equals(tmp))</span><br><span class="line">      &#123;<span class="comment">//排除第一行说明以及未取到数据的行</span></span><br><span class="line">        dateKey.set(date.substring(<span class="number">0</span>, <span class="number">6</span>));</span><br><span class="line">        intValue.set(Integer.parseInt(tmp));</span><br><span class="line">        context.write(dateKey, intValue);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StatReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span></span><br><span class="line"><span class="class">                                                                                   </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntWritable result = <span class="keyword">new</span> IntWritable();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> IOException, InterruptedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> tmp_sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                                                                           </span><br><span class="line">      <span class="keyword">for</span>(IntWritable val : values)</span><br><span class="line">      &#123;</span><br><span class="line">        tmp_sum += val.get();</span><br><span class="line">        count++;</span><br><span class="line">      &#125;</span><br><span class="line">                                                                           </span><br><span class="line">      <span class="keyword">int</span> tmp_avg = tmp_sum/count;</span><br><span class="line">      result.set(tmp_avg);</span><br><span class="line">      context.write(key, result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">      Configuration conf = <span class="keyword">new</span> Configuration();  </span><br><span class="line">    Job job = Job.getInstance(conf, <span class="string">&quot;MonthlyAvgTmpStat&quot;</span>);           </span><br><span class="line">    job.setInputFormatClass(TextInputFormat.class);</span><br><span class="line">    TextInputFormat.setInputPaths(job, args[<span class="number">0</span>]);  </span><br><span class="line">    job.setJarByClass(TmpStat.class);             </span><br><span class="line">    job.setMapperClass(StatMapper.class);           </span><br><span class="line">    job.setMapOutputKeyClass(Text.class);         </span><br><span class="line">    job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">    job.setPartitionerClass(HashPartitioner.class);</span><br><span class="line">    job.setReducerClass(StatReducer.class);</span><br><span class="line">    job.setNumReduceTasks(Integer.parseInt(args[<span class="number">2</span>]));</span><br><span class="line">    job.setOutputKeyClass(Text.class);              </span><br><span class="line">    job.setOutputValueClass(IntWritable.class);            </span><br><span class="line">    job.setOutputFormatClass(TextOutputFormat.class);</span><br><span class="line">    TextOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">    System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);   </span><br><span class="line">                                                                                   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>使用Eclipse软件将TmpStat项目导出成Jar文件，指定主类为TmpStat，命名为tmpstat.jar，并保存至家目录下<br><img src="https://img-blog.csdnimg.cn/20201222153807935.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201222153815357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="4-、查看月平均气温统计结果"><a href="#4-、查看月平均气温统计结果" class="headerlink" title="4 、查看月平均气温统计结果"></a>4 、查看月平均气温统计结果</h2><p>在client上执行tmpstat.jar，指定输出目录为/monthlyavgtmp，reducer数量为1。如图2所示：<br>cd ~<br>hadoop jar tmpstat.jar TmpStat /input /monthlyavgtmp 1<br><img src="https://img-blog.csdnimg.cn/20201222153826393.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图2 运行tmpstat.jar<br>查看统计结果。如图3所示：<br>hadoop fs -ls /monthlyavgtmp<br>hadoop fs -cat /monthlyavgtmp/part-r-00000<br><img src="https://img-blog.csdnimg.cn/20201222153837992.png" alt="在这里插入图片描述"><br>图3 查看月平均气温统计结果</p>
<h2 id="5、-编写每日空气质量统计程序"><a href="#5、-编写每日空气质量统计程序" class="headerlink" title="5、 编写每日空气质量统计程序"></a>5、 编写每日空气质量统计程序</h2><p>在Eclipse上新建MapReduce项目，命名为AqiStatDaily，在src目录下新建文件 AqiStatDaily.java，并键入如下代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.TextInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.partition.HashPartitioner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AqiStatDaily</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StatMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntWritable intValue = <span class="keyword">new</span> IntWritable();</span><br><span class="line">    <span class="keyword">private</span> Text dateKey = <span class="keyword">new</span> Text();</span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> IOException, InterruptedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      String[] items = value.toString().split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                                                                           </span><br><span class="line">      String date = items[<span class="number">0</span>];</span><br><span class="line">      String aqi = items[<span class="number">6</span>];</span><br><span class="line">                                                                           </span><br><span class="line">      <span class="keyword">if</span>(!<span class="string">&quot;DATE&quot;</span>.equals(date) &amp;&amp; !<span class="string">&quot;N/A&quot;</span>.equals(aqi))</span><br><span class="line">      &#123;</span><br><span class="line">        dateKey.set(date);</span><br><span class="line">        intValue.set(Integer.parseInt(aqi));</span><br><span class="line">        context.write(dateKey, intValue);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StatReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntWritable result = <span class="keyword">new</span> IntWritable();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values, Context context)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, InterruptedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> aqi_sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">                                                                           </span><br><span class="line">      <span class="keyword">for</span>(IntWritable val : values)</span><br><span class="line">      &#123;</span><br><span class="line">        aqi_sum += val.get();</span><br><span class="line">        count++;</span><br><span class="line">      &#125;</span><br><span class="line">                                                                           </span><br><span class="line">      <span class="keyword">int</span> aqi_avg = aqi_sum/count;</span><br><span class="line">      result.set(aqi_avg);</span><br><span class="line">      context.write(key, result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Configuration conf = <span class="keyword">new</span> Configuration();     </span><br><span class="line">    Job job = Job.getInstance(conf, <span class="string">&quot;AqiStatDaily&quot;</span>);           </span><br><span class="line">    job.setInputFormatClass(TextInputFormat.class);</span><br><span class="line">    TextInputFormat.setInputPaths(job, args[<span class="number">0</span>]);  </span><br><span class="line">    job.setJarByClass(AqiStatDaily.class);             </span><br><span class="line">    job.setMapperClass(StatMapper.class);           </span><br><span class="line">    job.setMapOutputKeyClass(Text.class);         </span><br><span class="line">    job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">    job.setPartitionerClass(HashPartitioner.class);</span><br><span class="line">    job.setReducerClass(StatReducer.class);</span><br><span class="line">    job.setNumReduceTasks(Integer.parseInt(args[<span class="number">2</span>]));</span><br><span class="line">    job.setOutputKeyClass(Text.class);              </span><br><span class="line">    job.setOutputValueClass(IntWritable.class);            </span><br><span class="line">    job.setOutputFormatClass(TextOutputFormat.class);</span><br><span class="line">    TextOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">    System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20201222153851174.png" alt="在这里插入图片描述"><br>使用Eclipse软件将AqiStatDaily项目导出成Jar文件，指定主类为AqiStatDaily，命名为aqistatdaily.jar，并保存在家目录下。</p>
<h2 id="6、-查看每日空气质量统计结果"><a href="#6、-查看每日空气质量统计结果" class="headerlink" title="6、 查看每日空气质量统计结果"></a>6、 查看每日空气质量统计结果</h2><p>在家目录下执行aqistatdaily.jar，指定输出目录为/aqidaily，reducer数量为3。如图4所示：<br>cd ~<br>hadoop jar aqistatdaily.jar AqiStatDaily /input /aqidaily 3<br><img src="https://img-blog.csdnimg.cn/20201222153905695.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图4 运行aqistatdaily.jar<br>查看统计结果文件。如图5所示：<br>hadoop fs -ls /aqidaily<br><img src="https://img-blog.csdnimg.cn/20201222153921546.png" alt="在这里插入图片描述"><br>图5 查看aqistatdaily.jar运行结果文件<br>可以看到，结果文件被分成了3个部分，依次查看这3个文件的内容，即可看到每天的空气质量统计结果数据。如图6所示：<br>hadoop fs -cat /aqidaily/p*<br><img src="https://img-blog.csdnimg.cn/20201222153928817.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图6 查看每日空气质量统计结果</p>
<h2 id="7-、将每日空气质量统计文件进行整合"><a href="#7-、将每日空气质量统计文件进行整合" class="headerlink" title="7 、将每日空气质量统计文件进行整合"></a>7 、将每日空气质量统计文件进行整合</h2><p>将每日空气质量统计结果保存到aqidaily.txt。<br>hadoop fs -cat /aqidaily/part-r-00000 &gt; aqidaily.txt<br>hadoop fs -cat /aqidaily/part-r-00001 &gt;&gt; aqidaily.txt<br>hadoop fs -cat /aqidaily/part-r-00002 &gt;&gt; aqidaily.txt<br><img src="https://img-blog.csdnimg.cn/20201222153939744.png" alt="在这里插入图片描述"><br>cat aqidaily.txt |wc -l</p>
<p>在HDFS上创建/aqiinput目录，并将aqidaily.txt上传至该目录下<br>hadoop fs -mkdir /aqiinput<br>hadoop fs -put aqidaily.txt /aqiinput</p>
<h2 id="8、-编写各空气质量天数统计程序"><a href="#8、-编写各空气质量天数统计程序" class="headerlink" title="8、 编写各空气质量天数统计程序"></a>8、 编写各空气质量天数统计程序</h2><p>在Eclipse上新建MapReduce项目，命名为AqiStat，在src目录下新建文件 AqiStat.java，并键入如下代码。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.conf.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.fs.Path;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.IntWritable;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.io.Text;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Job;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.Reducer;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.input.TextInputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;</span><br><span class="line"><span class="keyword">import</span> org.apache.hadoop.mapreduce.lib.partition.HashPartitioner;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AqiStat</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String GOOD = <span class="string">&quot;优&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODERATE = <span class="string">&quot;良&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String LIGHTLY_POLLUTED = <span class="string">&quot;轻度污染&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String MODERATELY_POLLUTED = <span class="string">&quot;中度污染&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String HEAVILY_POLLUTED = <span class="string">&quot;重度污染&quot;</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEVERELY_POLLUTED = <span class="string">&quot;严重污染&quot;</span>;</span><br><span class="line">                                                                                   </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StatMapper</span> <span class="keyword">extends</span> <span class="title">Mapper</span>&lt;<span class="title">Object</span>, <span class="title">Text</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> IntWritable one = <span class="keyword">new</span> IntWritable(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">private</span> Text cond = <span class="keyword">new</span> Text();</span><br><span class="line">    <span class="comment">// map方法，根据AQI值，将对应空气质量的天数加1</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">map</span><span class="params">(Object key, Text value, Context context)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, InterruptedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      String[] items = value.toString().split(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line">      <span class="keyword">int</span> aqi = Integer.parseInt(items[<span class="number">1</span>]);</span><br><span class="line">                                                                       </span><br><span class="line">      <span class="keyword">if</span>(aqi &lt;= <span class="number">50</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 优</span></span><br><span class="line">        cond.set(GOOD);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(aqi &lt;= <span class="number">100</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 良</span></span><br><span class="line">        cond.set(MODERATE);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(aqi &lt;= <span class="number">150</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 轻度污染</span></span><br><span class="line">        cond.set(LIGHTLY_POLLUTED);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(aqi &lt;= <span class="number">200</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 中度污染</span></span><br><span class="line">        cond.set(MODERATELY_POLLUTED);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span>(aqi &lt;= <span class="number">300</span>)</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 重度污染</span></span><br><span class="line">        cond.set(HEAVILY_POLLUTED);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 严重污染</span></span><br><span class="line">        cond.set(SEVERELY_POLLUTED);</span><br><span class="line">      &#125;</span><br><span class="line">                                                                     </span><br><span class="line">      context.write(cond, one);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 定义reduce类，对相同的空气质量状况，把它们&lt;K,VList&gt;中VList值全部相加</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">StatReducer</span> <span class="keyword">extends</span> <span class="title">Reducer</span>&lt;<span class="title">Text</span>, <span class="title">IntWritable</span>, <span class="title">Text</span>, <span class="title">IntWritable</span>&gt;</span></span><br><span class="line"><span class="class">  </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntWritable result = <span class="keyword">new</span> IntWritable();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">reduce</span><span class="params">(Text key, Iterable&lt;IntWritable&gt; values,Context context)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> IOException, InterruptedException</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (IntWritable val : values)</span><br><span class="line">      &#123;</span><br><span class="line">        sum += val.get();</span><br><span class="line">      &#125;</span><br><span class="line">      result.set(sum);</span><br><span class="line">      context.write(key, result);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span></span><br><span class="line"><span class="function">          <span class="keyword">throws</span> IOException, ClassNotFoundException, InterruptedException</span></span><br><span class="line"><span class="function">  </span>&#123;</span><br><span class="line">    Configuration conf = <span class="keyword">new</span> Configuration();     </span><br><span class="line">    Job job = Job.getInstance(conf, <span class="string">&quot;AqiStat&quot;</span>);           </span><br><span class="line">    job.setInputFormatClass(TextInputFormat.class);</span><br><span class="line">    TextInputFormat.setInputPaths(job, args[<span class="number">0</span>]);  </span><br><span class="line">    job.setJarByClass(AqiStat.class);             </span><br><span class="line">    job.setMapperClass(StatMapper.class);</span><br><span class="line">    job.setCombinerClass(StatReducer.class);</span><br><span class="line">    job.setMapOutputKeyClass(Text.class);         </span><br><span class="line">    job.setMapOutputValueClass(IntWritable.class);</span><br><span class="line">    job.setPartitionerClass(HashPartitioner.class);</span><br><span class="line">    job.setReducerClass(StatReducer.class);</span><br><span class="line">    job.setNumReduceTasks(Integer.parseInt(args[<span class="number">2</span>]));</span><br><span class="line">    job.setOutputKeyClass(Text.class);              </span><br><span class="line">    job.setOutputValueClass(IntWritable.class);            </span><br><span class="line">    job.setOutputFormatClass(TextOutputFormat.class);</span><br><span class="line">    TextOutputFormat.setOutputPath(job, <span class="keyword">new</span> Path(args[<span class="number">1</span>]));</span><br><span class="line">    System.exit(job.waitForCompletion(<span class="keyword">true</span>) ? <span class="number">0</span> : <span class="number">1</span>);   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用Eclipse软件将AqiStat项目导出成Jar文件，指定主类为AqiStat，命名为aqistat.jar，并保存至家目录下。</p>
<h2 id="9-、查看各空气质量天数统计结果"><a href="#9-、查看各空气质量天数统计结果" class="headerlink" title="9 、查看各空气质量天数统计结果"></a>9 、查看各空气质量天数统计结果</h2><p>在家目录下执行aqistat.jar，指定输出目录为/aqioutput，reducer数量为1。如图7所示：<br>hadoop jar aqistat.jar AqiStat /aqiinput /aqioutput 1<br><img src="https://img-blog.csdnimg.cn/20201222154000360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图7 运行aqistat.jar<br>查看统计结果。如图8所示：<br>hadoop fs -ls /aqioutput<br>hadoop fs -cat /aqioutput/part-r-00000<br><img src="https://img-blog.csdnimg.cn/20201222154008237.png" alt="在这里插入图片描述"><br>图8 查看各空气质量状况天数统计结果</p>
<h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><p>1.复制到虚拟机时不能有中文<br>2.文件名前面有*时，按Ctrl+S保存，星号就没有了<br>3.删除无数据的文件。Hadoop dfs -rm -r /monthlyavgtmp</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>Hadoop</tag>
        <tag>MapReduce</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/Java_web%E4%B9%8BEclipse%E5%AF%BC%E5%8C%85%E4%B8%BAIDEA/</url>
    <content><![CDATA[<p>@<a href="Java_web之Eclipse导包为IDEA--UserManage">TOC</a></p>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

# 一、前言
<font color=#999AAA >Eclipse的包import为IDEA
对java_web环境有了进一步理解
感谢@tj@fzy
收获很大，各个语言的环境配置相通
</font>
<hr style=" border:solid; width:100px; height:1px;" color=#000000 size=1">

<h1 id="二、IntelliJ-IDEA创建Servlet最新方法"><a href="#二、IntelliJ-IDEA创建Servlet最新方法" class="headerlink" title="二、IntelliJ IDEA创建Servlet最新方法"></a>二、IntelliJ IDEA创建Servlet最新方法</h1><p><a href="https://blog.csdn.net/gaoqingliang521/article/details/108677301">https://blog.csdn.net/gaoqingliang521/article/details/108677301</a><br>先和上述网址一样，在IntelliJ IDEA创建一个Web项目，完成后，将目标目录复制到该web项目下</p>
<h2 id="1-ctrl-CV步骤"><a href="#1-ctrl-CV步骤" class="headerlink" title="1.ctrl+CV步骤"></a>1.ctrl+CV步骤</h2><h3 id="①UserManage一级目录下"><a href="#①UserManage一级目录下" class="headerlink" title="①UserManage一级目录下"></a>①UserManage一级目录下</h3><p>将src目录直接替换。<br><img src="https://img-blog.csdnimg.cn/7720e7482c984ad1960c147addecabd9.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/67ef2e39fba948658b2029dbac14a680.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>配置文件全部不用管。<br><img src="https://img-blog.csdnimg.cn/b8439bf851804cf3b3f3898640a2320a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h3 id="②Web二级目录下"><a href="#②Web二级目录下" class="headerlink" title="②Web二级目录下"></a>②Web二级目录下</h3><p>login.html复制过来，并改名为index.html<br><img src="https://img-blog.csdnimg.cn/ffcccabf802642c1abd222813cb4640a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/23d7c52a5c404145bb30dfcb1afcbb7a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>UserManage3\WebRoot目录下的login.html文件为显示网页</p>
<h3 id="③WEB-INF三级目录下"><a href="#③WEB-INF三级目录下" class="headerlink" title="③WEB-INF三级目录下"></a>③WEB-INF三级目录下</h3><p>lib文件夹下内容全复制进去。<br><img src="https://img-blog.csdnimg.cn/d554182286064b8ba7752daef7a1e1e4.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a09896e636384efea6d29a38bbd27fab.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>UserManage3\WebRoot\WEB-INF目录下的classes和web.xml都不用管，在配置环境后会自动创建下面的内容。</p>
<p>（其中，classes在步骤一创建中，将其隐藏了）</p>
<p><img src="https://img-blog.csdnimg.cn/5fa6f7c86c5c4c60b8fb324002ac17f3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="&lt;img src=&quot;C:\Users\15488\AppData\Roaming\Typora\typora-user-images\image-20211112113304567.png&quot; alt=&quot;image-20211112113304567&quot; style=&quot;zoom:50%;&quot; /&gt;"></p>
<h2 id="2-配置项目环境，配置Project-Structure"><a href="#2-配置项目环境，配置Project-Structure" class="headerlink" title="2.配置项目环境，配置Project Structure"></a>2.配置项目环境，配置Project Structure</h2><p><img src="https://img-blog.csdnimg.cn/4121351dadd946e7940908bfe7c9d27b.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="&lt;img src=&quot;C:\Users\15488\AppData\Roaming\Typora\typora-user-images\image-20211118235103214.png&quot; alt=&quot;image-20211118235103214&quot; style=&quot;zoom:50%;&quot; /&gt;"></p>
<h3 id="①Libraries中创建仓库"><a href="#①Libraries中创建仓库" class="headerlink" title="①Libraries中创建仓库"></a>①Libraries中创建仓库</h3><p><img src="https://img-blog.csdnimg.cn/c0aa9b77f6d44b9a835e763531bba227.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_17,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3fd8405d6ec94b66886919b5d4fe3b7e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/fcd1d547d3954d6f8d774d2a2a76797e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h3 id="②Modules中将刚刚打包的java-web导入"><a href="#②Modules中将刚刚打包的java-web导入" class="headerlink" title="②Modules中将刚刚打包的java_web导入"></a>②Modules中将刚刚打包的java_web导入</h3><p>Dependencies</p>
<p><img src="https://img-blog.csdnimg.cn/9d8037cc3e294a50844df4a764883a10.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="&lt;img src=&quot;C:\Users\15488\AppData\Roaming\Typora\typora-user-images\image-20211112113159089.png&quot; alt=&quot;image-20211112113159089&quot; style=&quot;zoom:50%;&quot; /&gt;"></p>
<p>Path<br><img src="https://img-blog.csdnimg.cn/f45e027cefd44ba9a09f604daade0416.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/a298918a0ced469bad9f8d2db616340a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h3 id="③Artifacts"><a href="#③Artifacts" class="headerlink" title="③Artifacts"></a>③Artifacts</h3><p><img src="https://img-blog.csdnimg.cn/61b30209e77c405e9c549af083c5d6c6.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-vBsETzwa-1637252284137)(C:\Users\15488\AppData\Roaming\Typora\typora-user-images\image-20211118235838950.png)\]"></p>
<h3 id="④SDK"><a href="#④SDK" class="headerlink" title="④SDK"></a>④SDK</h3><p><img src="https://img-blog.csdnimg.cn/645b3a4325a647c5b8a51e8119f4147e.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2GHMux7X-1637252284139)(C:\Users\15488\AppData\Roaming\Typora\typora-user-images\image-20211119000249141.png)\]"></p>
<h2 id="3-Tomcat配置"><a href="#3-Tomcat配置" class="headerlink" title="3.Tomcat配置"></a>3.Tomcat配置</h2><p><img src="https://img-blog.csdnimg.cn/2b75d68d807a4fe0b3d6fb8132b9f1c7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3e5b40d0206d4afc905fec38f739a7dd.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/debdba11eec042dc90018e46816654fe.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_14,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/30a6cfffb6504e1c956e35e0244b4e70.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="4-全部导入后，可以修改"><a href="#4-全部导入后，可以修改" class="headerlink" title="4.全部导入后，可以修改"></a>4.全部导入后，可以修改</h2><p>1.rename com.zm-&gt;com.wyt</p>
<p>2.src目录下的db.properties为本机sql目录</p>
<p>3.</p>
<p>[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-2n0p3bop-1637252284144)(C:\Users\15488\AppData\Roaming\Typora\typora-user-images\image-20211116085843764.png)]<br><img src="https://img-blog.csdnimg.cn/0c7b36923f174e6894c35ee547fa2bb5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>4.</p>
<p><img src="https://img-blog.csdnimg.cn/31b756f04777432db9149b9b0454d5ae.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="5-终"><a href="#5-终" class="headerlink" title="5.终"></a>5.终</h2><p>idea</p>
<p><img src="https://img-blog.csdnimg.cn/0110545b1e0e4fb8a02d26d157afd66a.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>网页</p>
<p><img src="https://img-blog.csdnimg.cn/aab25c367e7b4324a9e823d71ed37323.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-thpgNcT5-1637252284148)(C:\Users\15488\AppData\Roaming\Typora\typora-user-images\image-20211119001336894.png)\]"></p>
<h1 id="三、其他"><a href="#三、其他" class="headerlink" title="三、其他"></a>三、其他</h1><h2 id="1-设置Import-Project"><a href="#1-设置Import-Project" class="headerlink" title="1.设置Import Project"></a>1.设置Import Project</h2><p><a href="https://blog.csdn.net/qiaodaima0/article/details/99207346">https://blog.csdn.net/qiaodaima0/article/details/99207346</a></p>
<h2 id="2-向idea中导入myeclipse中的web项目"><a href="#2-向idea中导入myeclipse中的web项目" class="headerlink" title="2.向idea中导入myeclipse中的web项目"></a>2.向idea中导入myeclipse中的web项目</h2><p><a href="https://blog.csdn.net/malz_zh/article/details/84487717">https://blog.csdn.net/malz_zh/article/details/84487717</a></p>
<h2 id="3-报错："><a href="#3-报错：" class="headerlink" title="3.报错："></a>3.报错：</h2><h3 id="①启动Tomcat-出现-Can’t-load-AMD-64-bit-dll-on-a-IA-32-bit-platform"><a href="#①启动Tomcat-出现-Can’t-load-AMD-64-bit-dll-on-a-IA-32-bit-platform" class="headerlink" title="①启动Tomcat 出现 Can’t load AMD 64-bit .dll on a IA 32-bit platform"></a>①启动Tomcat 出现 Can’t load AMD 64-bit .dll on a IA 32-bit platform</h3><blockquote>
<p>Can’t load AMD 64-bit .dll on a IA 32-bit platform</p>
</blockquote>
<h4 id="解决①"><a href="#解决①" class="headerlink" title="解决①"></a>解决①</h4><p>因为本机JDK版本为32位的，而Tomcat为64位版本，所以启动出错，删除本地JDK版本（或者环境变量改为java_32)，然后去官网下载64位版本的，重新安装<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a></p>
<p><img src="https://img-blog.csdn.net/20171205174307999?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMzE2MzQ0NjE=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></p>
<p>自己有64版本，直接选择</p>
<h3 id="②日志乱码"><a href="#②日志乱码" class="headerlink" title="②日志乱码"></a>②日志乱码</h3><p>IDEA:tomcat打印台乱码问题的解决及相关设置</p>
<p><a href="https://blog.csdn.net/qzh2018/article/details/108783965?utm_source=app&amp;app_version=4.18.0&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen">https://blog.csdn.net/qzh2018/article/details/108783965?utm_source=app&amp;app_version=4.18.0&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen</a></p>
<p>乱码格式：</p>
<p><img src="https://img-blog.csdnimg.cn/20200924213206871.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3F6aDIwMTg=,size_16,color_FFFFFF,t_70#pic_center" alt="img"></p>
<h4 id="解决②"><a href="#解决②" class="headerlink" title="解决②"></a>解决②</h4><p>在 tomcat / conf 目录下，设置 logging.properties ，增加参数 java.util.logging.ConsoleHandler.encoding = GBK，重启后终于可以了</p>
<h3 id="③"><a href="#③" class="headerlink" title="③"></a>③</h3><blockquote>
<p>[2021-11-17 11:37:19,238] Artifact MyProject31:war exploded: com.intellij.javaee.oss.admin.jmx.JmxAdminException: com.intellij.execution.ExecutionException: <strong>Cannot write</strong> ‘C:\Users\15488\AppData\Local\JetBrains\IntelliJIdea2020.3\tomcat\698dab8d-6ae4-40f8-925e-db252fc56b21\conf\Catalina\localhost\http:##localhost:8080#Usermanager.xml’. C:\Users\15488\AppData\Local\JetBrains\IntelliJIdea2020.3\tomcat\698dab8d-6ae4-40f8-925e-db252fc56b21\conf\Catalina\localhost\http:<strong>##</strong>localhost:8080#Usermanager.xml (文件名、目录名或卷标语法不正确。)</p>
</blockquote>
<p>C:\Users\15488\AppData\Local\JetBrains\IntelliJIdea2020.3\tomcat\698dab8d-6ae4-40f8-925e-db252fc56b21\conf\Catalina\localhost</p>
<h3 id="解决③"><a href="#解决③" class="headerlink" title="解决③"></a>解决③</h3><h4 id="百度1："><a href="#百度1：" class="headerlink" title="百度1："></a>百度1：</h4><p>Artifact exploded:com.intellij.javaee.oss.admin.jmx.JmxAdminException:<br>com.intellij.execution.ExecutionException: Cannot write</p>
<blockquote>
<p>参考：<a href="https://my.oschina.net/dccjll/blog/1553319">https://my.oschina.net/dccjll/blog/1553319</a></p>
</blockquote>
<p>发现是tomcat设置中的网址路径不对</p>
<h4 id="百度2："><a href="#百度2：" class="headerlink" title="百度2："></a>百度2：</h4><h1 id="localhost-8080-Usermanager-xml-文件名、目录名或卷标语法不正确。"><a href="#localhost-8080-Usermanager-xml-文件名、目录名或卷标语法不正确。" class="headerlink" title="localhost:8080#Usermanager.xml (文件名、目录名或卷标语法不正确。)"></a>localhost:8080#Usermanager.xml (文件名、目录名或卷标语法不正确。)</h1><blockquote>
<p>参考：<a href="https://bbs.csdn.net/topics/290001139">https://bbs.csdn.net/topics/290001139</a></p>
</blockquote>
<p>发现原因：<a href="http://test/rc/jsp/top.jsp这哪是路径啊~...这是URL,你用什么读的?如果是FileInputStream之类的得用c:\xxx这样的路径">http://test/rc/jsp/top.jsp这哪是路径啊~...这是URL,你用什么读的?如果是FileInputStream之类的得用c:\xxx这样的路径</a></p>
<blockquote>
<p>参考：<a href="https://blog.csdn.net/u013058618/article/details/70791910">https://blog.csdn.net/u013058618/article/details/70791910</a></p>
</blockquote>
<p>如果是windows地址，记得手动输入，粘贴复制会包含不可见字符、空格，所以一直提示文件找不到<br>将tomcat设置中的原来的网址路径<br><img src="https://img-blog.csdnimg.cn/c91f2c8ebb184e0698d5dce8bdd079db.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>改为<br><img src="https://img-blog.csdnimg.cn/8132578e0c6f42c0ad0c015175108317.png" alt="在这里插入图片描述"></p>
<h4 id="解决③-1"><a href="#解决③-1" class="headerlink" title="解决③"></a>解决③</h4><p>这个文件是配置后生成的，每个机子的web.xml不一样不能复制过去。<br>因此导致的不能读写文件。<br><img src="https://img-blog.csdnimg.cn/f3e06212b1af44c598a72f774b94f1ed.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_16,color_FFFFFF,t_70,g_se,x_16" alt="&lt;img src=&quot;C:\Users\15488\AppData\Roaming\Typora\typora-user-images\image-20211119000925461.png&quot; alt=&quot;image-20211119000925461&quot; style=&quot;zoom:50%;&quot; /&gt;"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/MATLAB%E4%B8%8B%E8%BD%BD%E6%97%B6%E6%8A%A5%E9%94%99%E5%8E%9F%E5%9B%A0/</url>
    <content><![CDATA[<p>@<a href="MATLAB下载时报错原因">TOC</a></p>
<h1 id="情况"><a href="#情况" class="headerlink" title="情况"></a>情况</h1><p>下载MATLAB到99%时失败</p>
<h1 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h1><p>background merge hit exception: _2y(4.6):C350989 _2x(4.6):C225741 _0(4.6):C39264 _2w(4.6):c124759 _1(4.6):C26142 _2l(4.6</p>
<h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>1.磁盘空间不足<br>2.破解版下载时未断开网络</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/My%20SQL%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%A3%80%E6%9F%A5/</url>
    <content><![CDATA[<p>@<a href="My SQL下载安装配置检查">TOC</a><br>详细的Mysql安装配置，及相关个性化配置。</p>
<h1 id="一、MySQL下载安装"><a href="#一、MySQL下载安装" class="headerlink" title="一、MySQL下载安装"></a>一、MySQL下载安装</h1><p>1.搜索输入MySQL，这个是<a href="https://www.csdn.net/">MySQL官网</a><br>链接：<a href="https://dev.mysql.com/downloads/">https://dev.mysql.com/downloads/</a><br><img src="https://img-blog.csdnimg.cn/20200706162206327.png" alt="在这里插入图片描述"><br>2.在官网上下载可安装版的MySQL数据库<br><img src="https://img-blog.csdnimg.cn/20200706162333713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>①查看Community对应左侧下方选项，单击第四个“MySQL Community Server”<br>②进入MySQL选项下载列表，选择Windows（x86,32-bit），MSI Installer（64位的下载64位的，安装版本是INStall，解压版本是zip）<br>③我选择的安装版本：<a href="https://dev.mysql.com/downloads/windows/installer/8.0.html">https://dev.mysql.com/downloads/windows/installer/8.0.html</a><br><img src="https://img-blog.csdnimg.cn/20200706162409280.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200706162421919.png" alt="在这里插入图片描述"><br>单击“Download”按钮，进入下载页面<br><img src="https://img-blog.csdnimg.cn/20200706162428895.png" alt="在这里插入图片描述"><br>下载页面有注册登录按钮，也有不用登录的选项（No thanks，just start my download.），选择不用注册登录选项，进入下载状态<br>3下载完毕，在文件夹中打开<br><img src="https://img-blog.csdnimg.cn/202007061624444.png" alt="在这里插入图片描述"></p>
<h1 id="二、MySQL安装配置"><a href="#二、MySQL安装配置" class="headerlink" title="二、MySQL安装配置"></a>二、MySQL安装配置</h1><p>1.打开下载的文件<br>双击运行，等待授权后出现如下界面：<br>根据自己需要选择安装模式，这里选择只安装服务器，并设置路径<br>2.选择customer后next<br><img src="https://img-blog.csdnimg.cn/20200706162505510.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.选择版本，点击向右的箭头<br>8.0大一些，感觉5.7我够用了，所以选的5.7<br>按下图勾选，只要第一个（多勾选了安装时会显示Progress 99%，然后进度条不动）<br><img src="https://img-blog.csdnimg.cn/20200706162516819.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4.等待<br><img src="https://img-blog.csdnimg.cn/2020070616252359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5.完成<br><img src="https://img-blog.csdnimg.cn/20200706162532199.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="三、配置MySQL"><a href="#三、配置MySQL" class="headerlink" title="三、配置MySQL"></a>三、配置MySQL</h1><p>安装完成后，还需要设置MySQL的各项参数才能正常使用。<br>1.不用改，直接点击下图中的“Next”按钮，直接进入参数配置页面<br><img src="https://img-blog.csdnimg.cn/20200706162540378.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>2.有两个选项“Standalone MySQL Server / Classic MySQL Replication”和“InnoDB Cluster Sandbox Test Setup（for testing only）”。<br>如果要运行独立的MySQL服务器可以选择前者，以便稍后配置经典的MySQL复制，使用该选项，用户可以手动配置复制设置，并在需要时提供自己的高可用性解决方案。<br>而后者是InnoDB集群沙箱测试设置，仅用于测试。<br><img src="https://img-blog.csdnimg.cn/20200706162547938.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>3.服务器配置类型“Config Type”选择“Development Computer”<br>不同的选择系统，为My SQL服务器实例分配资源的大小不同。<br>Development Computer：开发机，该类型应用将会使用最小数量的内存。<br>Server Computer：服务器，该类型应用将会使用中等大小的内存。<br>Dedicated Computer：专用服务器，该类型应用将使用当前可用的最大内存。<br>连接方式保持默认的TCP/IP，端口号也保持默认的3306。Next。<br><img src="https://img-blog.csdnimg.cn/20200706162554932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>4.接下来就是设置MySQL数据库Root账户密码，需要输入两遍。这个密码可以用记事本记下来，后边会用到。<br><img src="https://img-blog.csdnimg.cn/20200706162600643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>5.在配置Windows服务时，需要以下几部操作：<br>①勾选“Configure MySQL Server as a Windows Service”选项，将MySQL服务器配置为Windows服务；<br>②取消“Start the MySQL Server at System Startup”选项前边的“√”（该选项是设置是否开机自启动MySQL服务，我选择开机不启动）；<br>③勾选“Standard System Account”选项，该选项是标准系统账户，推荐使用该账户；<br>④next；<br><img src="https://img-blog.csdnimg.cn/20200706162611497.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>6.准备执行上述配置<br>直接Execute。等到所有的配置完成之后，会出现如下图所示的界面。<br><img src="https://img-blog.csdnimg.cn/20200706162617870.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>Finish，跳到配置成功界面。Next，再Finish即可完成配置。</p>
<h1 id="四、检查确认"><a href="#四、检查确认" class="headerlink" title="四、检查确认"></a>四、检查确认</h1><p>在菜单栏搜索MySQL 5.7 Command Line Client - Unicode，测试是否成功，下面就是成功了，不成功会直接关闭<br><img src="https://img-blog.csdnimg.cn/20200706162627243.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="五、参考文献"><a href="#五、参考文献" class="headerlink" title="五、参考文献"></a>五、参考文献</h1><p><a href="https://blog.csdn.net/weixin_42260102/article/details/98493874">https://blog.csdn.net/weixin_42260102/article/details/98493874</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/Python%20turtle+opencv%E8%87%AA%E5%8A%A8%E7%BB%98%E5%9B%BE%E5%A2%A9/</url>
    <content><![CDATA[<p><a href="https://lightrain.top/2022/02/12/%E4%BA%BA%E6%89%8B%E4%B8%80%E5%A2%A9%20%E2%80%94%E2%80%94%20python%E8%87%AA%E5%8A%A8%E7%BB%98%E5%88%B6%E5%86%B0%E5%A2%A9%E5%A2%A9/#more">自由敬业友善</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/Yu&amp;Django%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<p>@<a href="Yu&amp;Django环境配置的那些事">TOC</a></p>
<h1 id="一、写在最最前面"><a href="#一、写在最最前面" class="headerlink" title="一、写在最最前面"></a>一、写在最最前面</h1><p>谁能想到，小雨竟又回到了Django的怀抱呢。真是世事无常(ಥ_ಥ)<br>寒假其实有学写Django框架爱鲜蜂项目的任务。但，暑假的小雨对于寒假学习的Django没有很多印象了，，，<br>当时寒假的小雨还没有做笔记意识，重新配置的艰辛让小雨明白了很多事情哈哈哈哈。因此现在的小雨感觉，工坊关于定期查看笔记的决策不要太好了:-）<br>python django框架开发周期短，集成度高，对初学者比较友好。<br>网上关于Django的环境配置教程比较零碎，感谢学长们提供的笔记及相关链接的支持。<br>@刘 @杨 ……<br>在此记录下Pycharm和django相关安装、配置过程。<br>现在，让我们开始一段新的旅程吧 ~</p>
<h1 id="二、Django基本介绍"><a href="#二、Django基本介绍" class="headerlink" title="二、Django基本介绍"></a>二、Django基本介绍</h1><p>python django框架开发周期短，集成度高，对初学者比较友好。在此记录下Pycharm和django相关安装、配置过程</p>
<blockquote>
<p><a href="https://blog.csdn.net/xzy5210123/article/details/80178128">pycharm+Django配置与基本介绍</a><br>参考链接：<a href="https://blog.csdn.net/xzy5210123/article/details/80178128">https://blog.csdn.net/xzy5210123/article/details/80178128</a></p>
</blockquote>
<ul>
<li>templates目录 放置html文件</li>
<li>manage.py 与项目进行交互的命令行工具集的入口，相当于项目管理器，运行后会显示一些可供调用的子命令</li>
<li>wsgi.py python服务器网关接口，与web服务器之间的接口（通信关键，一般不要改动）</li>
<li>urls.py URL配置文件，即每个页面的地址</li>
<li>settings.py 全局配置文件，包含数据库、web应用、时间等</li>
</ul>
<h1 id="三、各种安装与环境配置"><a href="#三、各种安装与环境配置" class="headerlink" title="三、各种安装与环境配置"></a>三、各种安装与环境配置</h1><p>写在最前面：环境配置讲究细心耐心专心！！！</p>
<h2 id="1-Python-安装和配置-已安装的可跳过"><a href="#1-Python-安装和配置-已安装的可跳过" class="headerlink" title="1.Python 安装和配置(已安装的可跳过)"></a>1.Python 安装和配置(已安装的可跳过)</h2><p>如下：</p>
<pre><code> 1.下载Python
</code></pre><p> 如果还未安装Python环境，需要先下载Python安装包。<br>Python 下载地址：<a href="https://www.python.org/downloads/">https://www.python.org/downloads/</a><br><img src="https://img-blog.csdnimg.cn/20200720203855713.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>浏览器下载 .exe文件<br><img src="https://img-blog.csdnimg.cn/20200720203920935.png" alt="在这里插入图片描述"><br>注意：目前 Django 1.6.x 以上版本已经完全兼容 Python 3.x。</p>
<pre><code> 2.开始安装Python
</code></pre><p> 安装 Python 只需要在官网下载安装包，然后一直点击 “Next” 按钮即可。（笔者之前安装过了，此处为借的图）<br><img src="https://img-blog.csdnimg.cn/202007202039536.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择安装路径，可以不安装在C盘，记住安装到哪就行了，默认也行，我安装在<br>C:\Program Files\Java\jdk1.8.0_131<br>（如果你也是Django项目，可以选择和我一样，省事哈哈哈）<br>建议不要删除这个.exe，因为默认安装中是没有pip依赖模板的。如果不删除，后期可以通过.exe文件的打开重新设置（参考后文的重新安装部分），直接安装pip，更简单。<br>如果删除了，笔者也提供了pip下载的方式。</p>
<h3 id="1-1-Python-pip-安装与使用"><a href="#1-1-Python-pip-安装与使用" class="headerlink" title="1.1 Python pip 安装与使用"></a>1.1 Python pip 安装与使用</h3><pre><code> ①简介
</code></pre><p>pip 是 Python 包管理工具，该工具提供了对Python 包的查找、下载、安装、卸载的功能。</p>
<p>目前如果你在 python.org 下载最新版本的安装包，则是已经自带了该工具。</p>
<p>Python 2.7.9 + 或 Python 3.4+ 以上版本都自带 pip 工具。</p>
<p>pip 官网：<a href="https://pypi.org/project/pip/">https://pypi.org/project/pip/</a></p>
<p>可以通过以下命令来判断是否已安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip --version</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200721153504216.png" alt="在这里插入图片描述"></p>
<p>如果你还未安装，则可以使用以下方法来安装：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py   <span class="comment"># 下载安装脚本</span></span><br><span class="line">$ sudo python get-pip.py    <span class="comment"># 运行安装脚本</span></span><br></pre></td></tr></table></figure>
<pre><code>注意：用哪个版本的 Python 运行安装脚本，pip 就被关联到
哪个版本，如果是 Python3 则执行以下命令：
</code></pre><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo python3 get-pip.py    <span class="comment"># 运行安装脚本</span></span><br></pre></td></tr></table></figure>
<pre><code>一般情况 pip 对应的是 Python 2.7，
pip3 对应的是 Python 3.x。
</code></pre><p>部分 Linux 发行版可直接用包管理器安装 pip，如 Debian 和 Ubuntu：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure>
<h4 id="pip-常用命令"><a href="#pip-常用命令" class="headerlink" title="pip 常用命令"></a>pip 常用命令</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip --version  <span class="comment">#显示版本和路径</span></span><br><span class="line">pip --<span class="built_in">help</span> <span class="comment">#获取帮助</span></span><br><span class="line">pip install -U pip <span class="comment">#升级 pip</span></span><br></pre></td></tr></table></figure>
<p>如果这个升级命令出现问题 ，可以使用以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo easy_install --upgrade pip</span><br></pre></td></tr></table></figure>
<p>安装包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install SomePackage              <span class="comment"># 最新版本</span></span><br><span class="line">pip install SomePackage==1.0.4       <span class="comment"># 指定版本</span></span><br><span class="line">pip install <span class="string">&#x27;SomePackage&gt;=1.0.4&#x27;</span>     <span class="comment"># 最小版本</span></span><br></pre></td></tr></table></figure>
<p>比如要安装 Django。用以下的一条命令就可以，方便快捷。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install Django==1.7 <span class="comment">#升级包</span></span><br><span class="line">pip install --upgrade SomePackage</span><br><span class="line"><span class="comment">#升级指定的包，通过使用==, &gt;=, &lt;=, &gt;, &lt; 来指定一个版本号</span></span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip uninstall SomePackage <span class="comment">#卸载包</span></span><br><span class="line">pip search SomePackage <span class="comment">#搜索包</span></span><br><span class="line">pip show  <span class="comment">#显示安装包信息</span></span><br><span class="line">pip show -f SomePackage <span class="comment">#查看指定包的详细信息</span></span><br><span class="line">pip list <span class="comment">#列出已安装的包</span></span><br><span class="line">pip list -o <span class="comment">#查看可升级的包</span></span><br></pre></td></tr></table></figure>
<p>注意，如果 Python2 和 Python3 同时有 pip，则使用方法如下：<br>Python2：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python2 -m pip install XXX</span><br></pre></td></tr></table></figure>
<p>Python3:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -m pip install XXX</span><br></pre></td></tr></table></figure>
<p>若由于一些局域网的原因，使用 pip 出现 “connection timeout”，连接超时可以使用国内的镜像网站下载：<br> <a href="http://e.pypi.python.org">http://e.pypi.python.org</a><br> <a href="http://pypi.douban.com/simple">http://pypi.douban.com/simple</a><br>命令如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -i http://pypi.douban.com/simple --trusted-host pypi.douban.com packagename </span><br><span class="line"><span class="comment"># packagename是要下载的包的名字</span></span><br><span class="line">pip install -i http://e.pypi.python.org --trusted-host e.pypi.python.org --upgrade pip </span><br><span class="line"><span class="comment"># 升级pip</span></span><br></pre></td></tr></table></figure>
<h3 id="1-2-Python-的重新安装"><a href="#1-2-Python-的重新安装" class="headerlink" title="1.2 Python 的重新安装"></a>1.2 Python 的重新安装</h3><p>笔者为重新安装，过程如下：<br>下载方法和安装一样<br><img src="https://img-blog.csdnimg.cn/20200720204234981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200720204249998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200720204307319.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200720204320915.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>重新安装成功。<br>美中不足：没更改安装路径，还是第一次的位置。<br><img src="https://img-blog.csdnimg.cn/20200720204358570.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="1-3-Python-配置"><a href="#1-3-Python-配置" class="headerlink" title="1.3 Python 配置"></a>1.3 Python 配置</h3><p>安装完成后，需要设置 Python 环境变量。<br>①右击，计算机——属性——高级系统设置——打开环境变量的配置窗口，在系统环境变量一栏点击新建。（后面就不放图了哈）<br><img src="https://img-blog.csdnimg.cn/20200404184710188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200404184642902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020040418475123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>②（如果细节不确定，可以参考SpringBoot的那篇文章）<br>修改系统变量 path，添加 Python 安装地址，本文实例使用的是：<br>C:\Users\15488\Desktop\爱鲜峰项目\Scripts\<br>C:\Users\15488\Desktop\爱鲜峰项目\<br>需要根据实际安装情况来设置。<br>（由于笔者前面在重新安装过程中，选择了将Python添加到环境变量，所以笔者的环境变量是自己生成的）</p>
<p>  配置好如图<br>  <img src="https://img-blog.csdnimg.cn/202007202108040.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<pre><code>最后验证一下
</code></pre><p>1.win + R–&gt;输入cmd，进入cmd命令行<br>2.输入：python —version 就可以查看版本信息，如果显示如下信息，则表示环境配置成功<br><img src="https://img-blog.csdnimg.cn/20200720211048527.png" alt="在这里插入图片描述"></p>
<h2 id="2-pycharm的安装"><a href="#2-pycharm的安装" class="headerlink" title="2.pycharm的安装"></a>2.pycharm的安装</h2><h3 id="2-1-软件简介"><a href="#2-1-软件简介" class="headerlink" title="2.1 软件简介"></a>2.1 软件简介</h3><p>◆ ◆ ◆<br>PyCharm是一种Python IDE，带有一整套可以帮助用户在使用Python语言开发时提高其效率的工具，比如调试、语法高亮、Project管理、代码跳转、智能提示、自动完成、单元测试、版本控制。此外，该IDE提供了一些高级功能，以用于支持Django框架下的专业Web开发。</p>
<h3 id="2-2-软件获取"><a href="#2-2-软件获取" class="headerlink" title="2.2 软件获取"></a>2.2 软件获取</h3><p>◆ ◆ ◆<br>笔者为学生，有学生账号，所以于官网下载<br>pycharm下载地址：<a href="http://www.jetbrains.com/pycharm/download/#section=windows">http://www.jetbrains.com/pycharm/download/#section=windows</a></p>
<p>点击download进行下载，注意选择Professional专业版<br>pycharm下载地址：<a href="http://www.jetbrains.com/pycharm/download/#section=windows">http://www.jetbrains.com/pycharm/download/#section=windows</a></p>
<p>点击download进行下载，注意选择Professional专业版<br><img src="https://img-blog.csdnimg.cn/20200721190659632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="2-3-软件安装"><a href="#2-3-软件安装" class="headerlink" title="2.3 软件安装"></a>2.3 软件安装</h3><p>下载完成后，找到图标打开<br>打开.exe，next<br>选择安装路径<br>勾选这两个，下一步，直接install<br><img src="https://img-blog.csdnimg.cn/20200721191008649.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-pycharm-配置-Django"><a href="#3-pycharm-配置-Django" class="headerlink" title="3.pycharm 配置 Django"></a>3.pycharm 配置 Django</h2><p>前置条件：已安装python（见上面）<br>在安装 Django 前，系统需要已经安装了Python的开发环境。</p>
<pre><code> 1.在pycharm中新建项目Django
</code></pre><p><img src="https://img-blog.csdnimg.cn/20200721191621671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>图中编号1处为项目位置；编号2处为使用的模板语言类型，默认为Django模板语言；编号3处是保存项目页面HTML的文件夹名称，默认为templates；编号4处是应用名，一般根据Web应用的实际功能来命名。<br>本示例中，项目位置为E:\test，应用名为test1。（注：项目与应用不能同名）</p>
<pre><code> 2.创建项目
</code></pre><p>设置填写完毕后，点击右下角的Create，创建项目。<br><img src="https://img-blog.csdnimg.cn/20200721191728359.png" alt="在这里插入图片描述"><br>是<br><img src="https://img-blog.csdnimg.cn/20200721191759898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<pre><code> 3.配置Pycharm中python的环境

 ①序号1点击，选择add
</code></pre><p>出现这个界面，按标注的顺序一路点下去<br><img src="https://img-blog.csdnimg.cn/20200721191846537.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200721191928591.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<pre><code> ②下载Django
</code></pre><p>file —-&gt; settings ——&gt; project 解释器 —-&gt; 点击+ ——&gt; 输入Django —-&gt; install(如果选择版本时,选择 CheckBox ,选择指定版本)<br><img src="https://img-blog.csdnimg.cn/20200721192001166.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>安装成功的界面<br><img src="https://img-blog.csdnimg.cn/20200721192030540.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>其中，我在安装Django中出现了两个问题</p>
<h3 id="Django安装出现问题"><a href="#Django安装出现问题" class="headerlink" title="Django安装出现问题"></a>Django安装出现问题</h3><pre><code> ①Available packages 页面无法正常显示
</code></pre><p>原因：安装pycharm时，未选择.py<br>解决：卸载重新安装</p>
<h3 id="解释器"><a href="#解释器" class="headerlink" title="解释器"></a>解释器</h3><p>扩展<a href="https://blog.csdn.net/yuangan1529/article/details/80800411">Pycharm配置（1）——解释器（interpreter）</a></p>
<pre><code> ②Django下载失败
</code></pre><p>最上方:<br>pip install django<br>详情：<code>pip._vendor.requests.packages.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host=&#39;files.pypi.tuna.tsinghua.edu.cn&#39;, port=443): Read timed out.</code><br>原因：<br>1）pip需要undergrade<br>2）pip需要设置镜像<br>解决：<br>首先，进入python安装目录下的Scripts内，打开控制台输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip3 --default-timeout=100 install -U</span><br></pre></td></tr></table></figure>
<p>调整默认超时时间之后还是一样会报错。<br>一下午一直在改，感觉都没改对，因为改的地方都报错。<br>但通过不断的重复安装，最后还是成功了，不知道是什么原因。希望之后可以知道。</p>
<h2 id="4-Django其他安装方法（Linux、Mac、Windows）"><a href="#4-Django其他安装方法（Linux、Mac、Windows）" class="headerlink" title="4.Django其他安装方法（Linux、Mac、Windows）"></a>4.Django其他安装方法（Linux、Mac、Windows）</h2><p><a href="https://www.runoob.com/django/django-install.html">Django 安装</a></p>
<h1 id="四、创建运行Django项目"><a href="#四、创建运行Django项目" class="headerlink" title="四、创建运行Django项目"></a>四、创建运行Django项目</h1><h2 id="1-创建Django项目"><a href="#1-创建Django项目" class="headerlink" title="1.创建Django项目"></a>1.创建Django项目</h2><h3 id="1-1-使用命令行创建项目"><a href="#1-1-使用命令行创建项目" class="headerlink" title="1.1 使用命令行创建项目"></a>1.1 使用命令行创建项目</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">django-admin startproject 项目名称</span><br></pre></td></tr></table></figure>
<h3 id="1-2-使用-Pycharm-创建项目"><a href="#1-2-使用-Pycharm-创建项目" class="headerlink" title="1.2 使用 Pycharm 创建项目"></a>1.2 使用 Pycharm 创建项目</h3><p>file —-&gt; new project —— 选择Django —-&gt; 配置路径和项目名称 —-&gt; 配置环境(默认用系统环境) ——&gt; 点击create(完成创建)<br><img src="https://img-blog.csdnimg.cn/20200721200101918.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="2-项目目录介绍"><a href="#2-项目目录介绍" class="headerlink" title="2.项目目录介绍"></a>2.项目目录介绍</h2><p>|—-test2 # 项目的/目录<br>  |—-test2 # 项目目录<br>      |—-<strong>init</strong>.py<br>      |—-settings.py # 配置文件<br>      |—-urls.py # 路由系统 ===&gt; url与视图的对应关系<br>      |—-wsgi.py # runserver命令就使用wsgiref模块做简单的web server |—-manage.py # 管理文件<br><img src="https://img-blog.csdnimg.cn/20200721200131820.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="3-创建应用"><a href="#3-创建应用" class="headerlink" title="3.创建应用"></a>3.创建应用</h2><h3 id="3-1-使用命令行模式创建应用"><a href="#3-1-使用命令行模式创建应用" class="headerlink" title="3.1 使用命令行模式创建应用"></a>3.1 使用命令行模式创建应用</h3><p>在 Terminal 中输入 python manage.py startapp 应用名:<br><img src="https://img-blog.csdnimg.cn/20200721200220345.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200721200228662.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="3-2-使用-Pycharm-创建应用"><a href="#3-2-使用-Pycharm-创建应用" class="headerlink" title="3.2 使用 Pycharm 创建应用"></a>3.2 使用 Pycharm 创建应用</h3><p><img src="https://img-blog.csdnimg.cn/20200721200254602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>注意：使用命令行创建的应用，一定要在 settings.py—&gt;INSTALLED_APPS 中加入你的应用名字进行注册, 使用Pycharm创建的应用则不用。 认识应用结构<br><img src="https://img-blog.csdnimg.cn/20200721200309951.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="4-运行项目"><a href="#4-运行项目" class="headerlink" title="4. 运行项目"></a>4. 运行项目</h2><h3 id="4-1-使用命令行运行项目"><a href="#4-1-使用命令行运行项目" class="headerlink" title="4.1 使用命令行运行项目"></a>4.1 使用命令行运行项目</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 manage.py runserver </span><br><span class="line">manage.py runserver <span class="number">80</span>      <span class="comment"># 指定端口</span></span><br></pre></td></tr></table></figure>
<p>注意：要在 manage.py 同级目录执行命令。<br><img src="https://img-blog.csdnimg.cn/20200721200411337.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200721200418903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="4-2-Pycharm-启动项目"><a href="#4-2-Pycharm-启动项目" class="headerlink" title="4.2 Pycharm 启动项目"></a>4.2 Pycharm 启动项目</h3><p>点击右上角的绿色的三角按钮。<br>如需更改配置信息，请下拉选择 edit configurations，进行配置。<br><img src="https://img-blog.csdnimg.cn/2020072120044339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200721200450330.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>配置完以上信息之后，直接按 Ctrl+shift+F10 运行一下 manage.py 文件。<br>出现如下结果，表示配置成功。<br><img src="https://img-blog.csdnimg.cn/20200721200511461.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="五、参考文献"><a href="#五、参考文献" class="headerlink" title="五、参考文献"></a>五、参考文献</h1><p><a href="https://www.cnblogs.com/Kiwi-456/p/11122221.html">https://www.cnblogs.com/Kiwi-456/p/11122221.html</a><br><a href="https://www.runoob.com/w3cnote/python-pip-install-usage.html">https://www.runoob.com/w3cnote/python-pip-install-usage.html</a><br><a href="https://www.runoob.com/django/django-install.html">https://www.runoob.com/django/django-install.html</a><br><a href="https://blog.csdn.net/huo920/article/details/82082403">https://blog.csdn.net/huo920/article/details/82082403</a><br><a href="https://blog.csdn.net/xzy5210123/article/details/80178128">https://blog.csdn.net/xzy5210123/article/details/80178128</a><br><a href="https://blog.csdn.net/yuangan1529/article/details/80800411">https://blog.csdn.net/yuangan1529/article/details/80800411</a></p>
]]></content>
  </entry>
  <entry>
    <title>Yu&amp;Spring Boot</title>
    <url>/2019/04/20/Yu&amp;Spring%20Boot%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/</url>
    <content><![CDATA[<h1 id="写在最最前面"><a href="#写在最最前面" class="headerlink" title="写在最最前面"></a>写在最最前面</h1><p>感谢项目的这段难忘（美好但不太友好）的经历<br>感谢厉害又耐心的学长@谭 @朱 @程 ……<br>还要这段时间帅气的我<br>哈哈哈哈哈哈</p>
<h1 id="各种环境配置"><a href="#各种环境配置" class="headerlink" title="各种环境配置"></a>各种环境配置</h1><p>写在最前面：环境配置就是讲究细心耐心专心！！！<br>真的差一个就没了啊兄弟！！！<br>尤其是各种环境第一次的配置，又不知道是哪错了，只能重头再来。第二次心态会更崩，恶性循环。亲身体验那个绝望哈哈哈</p>
 <span id="more"></span>
<h2 id="JDK配置"><a href="#JDK配置" class="headerlink" title="JDK配置"></a>JDK配置</h2><p>如下：</p>
<pre><code> 1.下载JDK
</code></pre><p> （360助手也可以下载JDK哈哈哈，神奇）<br>  首先到官网下载最新版JDK：Oracle官网下载<br>Accept License Agreement–&gt;下载适合自己pc版本的jdk（x86是32位，x64是64位）</p>
<pre><code> 2.开始安装JDK
</code></pre><p>选择安装路径，可以不安装在C盘，记住安装到哪就行了，默认也行，我安装在<br>C:\Program Files\Java\jdk1.8.0_131<br>（如果你也是idea项目，可以选择和我一样，省事哈哈哈）</p>
<pre><code> 3.安装
</code></pre><p>安装过程中会跳出Jre的安装界面，一定！！放到和之前JDK在同一个文件夹下（原因：记忆有点要遥远了，While我还记得当时自作聪明后，这里卡了好久）。<br> 然后直接下一步开始安装</p>
<pre><code> 4.环境变量配置
</code></pre><p>①右击，计算机——属性——高级系统设置——打开环境变量的配置窗口，在系统环境变量一栏点击新建。（后面就不放图了哈）<br><img src="https://img-blog.csdnimg.cn/20200404184710188.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200404184642902.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020040418475123.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>②新建环境变量，变量名为：JAVA_HOME，变量值为之前JDK的安装路径，此处安装在：C:\Program Files\Java\jdk1.8.0_131<br>（可以在系统变量下新建，这样可以为每个登录该pc的用户都配置，如果在用户变量中新建，则只为当前用户配置，此处以在系统变量下新建为例）<br>③找到Path变量–&gt;编辑<br>④如果是win10系统，则进入后界面如下，选择新建两个环境变量，<br>一个值为：%JAVA_HOME%\bin<br>另一个为：%JAVA_HOME%\jre\bin<br>（此处笔者已经配置好）<br>⑤如果是win7及之前的系统则进入后界面如下:<br>在变量值最后输入 %JAVA_HOME%\bin;%JAVA_HOME%\jre\bin;<br>（注意原来Path的变量值末尾有没有;号，如果没有，先输入；号再输入上面的代码）</p>
<p>  配置好如图（后面就不放图了哈）<br>  <img src="https://img-blog.csdnimg.cn/20200404192219418.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200404192449482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>    最后验证一下</p>
<p>1.win + R–&gt;输入cmd，进入cmd命令行<br>2.输入：java -version 就可以查看版本信息，如果显示如下信息，则表示环境配置成功<br><img src="https://img-blog.csdnimg.cn/20200404183150768.png" alt="在这里插入图片描述"></p>
<h2 id="Maven配置"><a href="#Maven配置" class="headerlink" title="Maven配置"></a>Maven配置</h2><p>如下：<br>前置条件：已安装jdk（见上面）</p>
<pre><code> 1.下载maven
</code></pre><p>下载地址：<a href="http://maven.apache.org/download.cgi">http://maven.apache.org/download.cgi</a><br>官网下载apache-maven-3.5.2.bin .zip 文件</p>
<pre><code> 2.解压apache-maven-3.5.2
</code></pre><p> 和JDK一样，选择安装路径，我安装在<br>D:\apache-maven-3.6.3<br>（如果是idea项目，可以选择一样，省事）</p>
<pre><code> Maven目录分析：
 bin文件夹：含有mvn运行的脚本
 boot文件夹：含有plexusrlds类加载器框架
 conf文件夹：含有settings.xml配置文件
 lib文件夹：含有maven运行时所需要的java类库

 3.配置环境变量 复制maven路径

 ①新建环境变量MAVEN_HOME
</code></pre><p>D:\apache-maven-3.6.3   （maven路径）</p>
<pre><code> ②设置环境变量Path
</code></pre><p> 编辑Path，增加“%MAVEN_HOME%\bin”</p>
<pre><code> ③新建环境变量MAVEN_OPTS
</code></pre><p> 通常需要设置MAVEN_OPTS的值为<br> -Xms128m -Xmx512m<br>原因：Java默认的最大可用内存往往不能够满足Maven运行的需要，比如在项目较大时，使用Maven生成项目站点需要占用大量的内存，如果没有该配置，则容易有java.lang.OutOfMemeoryError</p>
<pre><code> ④修改配置文件（右键编辑文件）
</code></pre><p>通常我们需要修改解压目录下conf/settings.xml文件，这样可以更好的适合我们的使用</p>
<p>此处注意：所有的修改一定要在注释标签外面，不然修改无效。Maven很多标签都是给的例子，都是注释掉的。</p>
<p>文章最后附上我的整个Settings.xml文件配置，如果地址什么都和我一样就可以用<br>1）本地仓库位置修改<br>在<localRepository>标签内添加自己的本地位置路径<br>Default的意思是，如果本地位置失败，就会去那里<br><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- localRepository</span><br><span class="line">  | The path to the local repository maven will use to store artifacts.</span><br><span class="line">  |</span><br><span class="line">  | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="line"> &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="line"> --&gt;</span><br><span class="line"> &lt;localRepository&gt;D:\apache-maven-3.6.3\repository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure></p>
<p>2）修改maven默认的JDK版本<br>在<profiles>标签下添加一个<profile>标签，修改maven默认的JDK版本。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;profile&gt;     </span><br><span class="line">    &lt;id&gt;JDK-1.8&lt;/id&gt;       </span><br><span class="line">    &lt;activation&gt;       </span><br><span class="line">        &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;       </span><br><span class="line">        &lt;jdk&gt;1.8&lt;/jdk&gt;       </span><br><span class="line">    &lt;/activation&gt;       </span><br><span class="line">    &lt;properties&gt;       </span><br><span class="line">        &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;       </span><br><span class="line">        &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;       </span><br><span class="line">        &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;       </span><br><span class="line">    &lt;/properties&gt;       </span><br><span class="line">&lt;/profile&gt;</span><br></pre></td></tr></table></figure>
<p>3 ）添加国内镜像源<br>添加<mirrors>标签下<mirror>，添加国内镜像源，这样下载jar包速度很快。默认的中央仓库有时候甚至连接不通。一般使用阿里云镜像库即可。这里我就都加上了，Maven会默认从这几个开始下载，没有的话就会去中央仓库了。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!-- 阿里云仓库 --&gt;</span><br><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;http:<span class="comment">//maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;</span></span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure>
<pre><code>最后的前一步：验证一下
</code></pre><p>1.win + R–&gt;输入cmd，进入cmd命令行<br>2.输入：mvn -v 就可以查看版本信息，如果显示如下信息（划重点：Maven的版本号），则表示环境配置成功<br><img src="https://img-blog.csdnimg.cn/20200404184557312.png" alt="在这里插入图片描述"></p>
<pre><code> 最后安装jar包到本地仓库
</code></pre><p> mvn install </p>
<pre><code>常用命令
</code></pre><figure class="highlight"><table><tr><td class="code"><pre><span class="line">mvn -v #查看版本信息</span><br><span class="line"></span><br><span class="line">mvn compile #编译</span><br><span class="line"></span><br><span class="line">mvn test # 测试</span><br><span class="line"></span><br><span class="line">mvn package #打包成jar的形式</span><br><span class="line"></span><br><span class="line">mvn clear #删除target</span><br><span class="line"></span><br><span class="line">mvn install #安装jar包到本地仓库</span><br></pre></td></tr></table></figure>
<p>至此，Maven配置告一段落</p>
<h2 id="Tocmat配置"><a href="#Tocmat配置" class="headerlink" title="Tocmat配置"></a>Tocmat配置</h2><pre><code>1.下载
</code></pre><p>下载地址：<a href="http://tomcat.apache.org/">http://tomcat.apache.org/</a><br>我是下载的.zip文件（免安装版本），注意系统是32位和64位的</p>
<pre><code>2.解压
</code></pre><p>直接解压缩，找到目录bin下的startup.bat，启动Tomcat；shutdown.bat：关闭Tomcat</p>
<pre><code>3、Tomcat配置
</code></pre><p>配置Tomcat之前，要保证jdk已经配置完成</p>
<pre><code>同上，右击，计算机——属性——高级系统设置——打开环境变量的配置窗口，在系统环境变量一栏点击新建。
</code></pre><p>切记，安装Tomcat时，在其字母周围不要存在空格，否则最后导致配置不成功（亲身证明哈哈哈）</p>
<pre><code>在系统变量里点新建：
</code></pre><p>变量名：CATALINA_BASE<br>变量值：C:\tomcat\apache-tomcat-8.5.53;</p>
<pre><code>再新建：
</code></pre><p>变量名：CATALINA_HOME<br>变量值：C:\tomcat\apache-tomcat-8.5.53;</p>
<pre><code>点击确定后在classpath中加入
</code></pre><p>%CATALINA_HOME%\common\lib\servlet-api.jar;<br>（注意加的时候在原变量值后加英文状态下的“；”）</p>
<pre><code>在path中加入
</code></pre><p>%CATALINA_HOME%\bin;<br>（注意加的时候在原变量值后加英文状态下的“；”）</p>
<p>Tomcat就配置好了</p>
<pre><code>验证是否配置成功
</code></pre><p>运行Tomcat,点击启动（或Start service）后，打开浏览器，敲入<a href="http://localhost:8080,如果出现页面，那么配置成功。如下：">http://localhost:8080,如果出现页面，那么配置成功。如下：</a><br><img src="https://img-blog.csdnimg.cn/20200404191808358.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="IntelliJ-IDEA环境设置"><a href="#IntelliJ-IDEA环境设置" class="headerlink" title="IntelliJ IDEA环境设置"></a>IntelliJ IDEA环境设置</h2><p>如下：</p>
<pre><code>1.下载
</code></pre><p>官网的下载链接：IDEA官网下载地址<br>建议下载专业版，社区版缺少很多功能，体验感没专业版好（可以试用一段时间，学生可以申请一年免费，网上有破解版）</p>
<pre><code>2.开始安装IntelliJ IDEA
</code></pre><p>①选择安装路径；<br>②上面是创建桌面图标，选择电脑对应的版本；<br>下面的可以全选，表示什么格式的文件可直接关联到IDEA，用IDEA来打开（我考虑到日常还是低配的更锻炼思维能力，就没有选）<br>③下一步直接install</p>
<pre><code>3.启动刚安装好的IDEA
</code></pre><p>①如果第一次安装，就直接不导入设置，ok<br>②选个喜欢的主题，然后next<br>③直接next<br>④直接start</p>
<h2 id="IntelliJ-IDEA项目环境配置"><a href="#IntelliJ-IDEA项目环境配置" class="headerlink" title="IntelliJ IDEA项目环境配置"></a>IntelliJ IDEA项目环境配置</h2><pre><code>（写在前面给我自己看的：如果对自己的代码没有那么自信的话，一定要直接搭建Spring Boot，然后用postman做接口测试。
 原因：如果用IntelliJ IDEA自带的Maven和tomcat，他是直接跑整个项目，有错误就不给搭建，大神的错误追踪法对于我这种小白完全不适用，，，
 回忆起在这也卡了好久表示太难了，，，）
</code></pre><p> 由于这次的项目是学长建好的逻辑框架，所以从GitHub下载项目文件，然后拖动到 IntelliJ IDEA，就打开了，这里直接从打开后的配置开始说起：</p>
<pre><code>  1.基础配置:
   IDEA内置了Maven环境，默认采用Maven解决项目依赖问题。
</code></pre><p><img src="https://img-blog.csdnimg.cn/20200404165408541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>①Setting要配置的</p>
<pre><code> 1）JRE配置
</code></pre><p><img src="https://img-blog.csdnimg.cn/20200404170652204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<pre><code>2）Maven配置
这里比较关键昂，我当时在这卡了三天，试了各种方法哈哈哈
（如果遇到麻烦的话，可以留言哦，说不准我遇到过了呢）
</code></pre><p>顺序和注意事项都标好啦<br><img src="https://img-blog.csdnimg.cn/20200404170549934.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200404165732932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>    原因：此处勾选，当修改pom文件时，Maven就能帮我们自动导包了         </p>
<pre><code>3）Spring Boot配置
</code></pre><p>点这<br><img src="https://img-blog.csdnimg.cn/20200404172919941.png" alt="在这里插入图片描述"><br>会出现下面这个<br>选择左上角的加号，找到里面的Spring Boot</p>
<pre><code>（如果没有Spring Boot，可以自行百度。因为我当时也没有，但不记得是改的哪里了）
</code></pre><p>就会出现这个，然后配置<br><img src="https://img-blog.csdnimg.cn/20200404171458976.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>这有问题对吧哈哈哈哈，我也是。学长告诉我这样弄就好了<br><img src="https://img-blog.csdnimg.cn/20200404173527453.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>选择project as a maven</p>
<pre><code>可以看一下自己的最右边：
</code></pre><p>有四个哦，如果没有，就检查一下相关配置<br><img src="https://img-blog.csdnimg.cn/20200404185156348.png" alt="在这里插入图片描述"><br>然后就好了，环境配置暂时告一段落</p>
<h2 id="Spring-Boot相关笔记"><a href="#Spring-Boot相关笔记" class="headerlink" title="Spring Boot相关笔记"></a>Spring Boot相关笔记</h2><p><img src="https://img-blog.csdnimg.cn/20200404205932233.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200404205944405.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200404205953663.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200404210003894.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200404210013146.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/2020040421002358.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p>具体项目的一些易错点也有总结，但就不放出来了<br>皮一下很开心<br><img src="https://img-blog.csdnimg.cn/20200404185717143.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="postman配置"><a href="#postman配置" class="headerlink" title="postman配置"></a>postman配置</h2><pre><code>1.下载
</code></pre><p>官网：<a href="https://www.getpostman.com/downloads/">https://www.getpostman.com/downloads/</a><br><img src="https://img-blog.csdnimg.cn/20200404193407572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<pre><code>2.创建账号或者用谷歌浏览器账号登录
</code></pre><p>  我已经弄完了，借的图（下面有作者大大的连接昂，如有侵权请联系我删掉）<br>  <img src="https://img-blog.csdnimg.cn/20200404193531577.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<pre><code> 3.请求方式是get post什么的，根据自己的需求选
</code></pre><p>   <img src="https://img-blog.csdnimg.cn/2020040419365691.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<pre><code>简单逻辑就是：
搜索用get
添加删除和修改用post

最后，有返回值，就成功了
</code></pre><p> 中心思想：返回值数据都是给前端看的或者用的</p>
<pre><code>如果代码和我一样有返回前端的请求：
</code></pre><p> return AjexResult.success();</p>
<pre><code>那么操作成功的返回值类似于这样：
&#123;
&quot;msg&quot;: &quot;操作成功&quot;,
&quot;code&quot;: 0
&#125;
</code></pre><h2 id="Git基本命令"><a href="#Git基本命令" class="headerlink" title="Git基本命令"></a>Git基本命令</h2><pre><code> 1.安装
</code></pre><p>不想介绍了哈哈哈，可以百度的到</p>
<pre><code>2.基本命令
</code></pre><p>一些笔记，可以稍微了解一下<br><img src="https://img-blog.csdnimg.cn/20200404201546602.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200404201451972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20200404201710777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">以下是谭学长整理的</span><br><span class="line">初始化                       </span><br><span class="line">git init    </span><br><span class="line">将远端仓库标为origion</span><br><span class="line">git remote add origin http:仓库名.git</span><br><span class="line">从远程仓库拉取文件 </span><br><span class="line">git pull --rebase origin master</span><br><span class="line"></span><br><span class="line">……………………将自己的controller等文件放到拉取下的文件的相应位置………………</span><br><span class="line"></span><br><span class="line">标记修改文件</span><br><span class="line">git add .</span><br><span class="line">将修改的标记文件加入本地仓库</span><br><span class="line">git commit -m <span class="string">&quot;这里写你本次修改的内容&quot;</span></span><br><span class="line">推到远程仓库</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure>
<h2 id="Setting-xml"><a href="#Setting-xml" class="headerlink" title="Setting.xml"></a>Setting.xml</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line"><span class="function">Licensed to the Apache Software <span class="title">Foundation</span> <span class="params">(ASF)</span> under one</span></span><br><span class="line"><span class="function">or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="function">distributed with <span class="keyword">this</span> work <span class="keyword">for</span> additional information</span></span><br><span class="line"><span class="function">regarding copyright ownership.  The ASF licenses <span class="keyword">this</span> file</span></span><br><span class="line"><span class="function">to you under the Apache License, Version 2.0 <span class="params">(the</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string">&quot;License&quot;</span>)</span></span>; you may not use <span class="keyword">this</span> file except in compliance</span><br><span class="line">with the License.  You may obtain a copy of the License at</span><br><span class="line"></span><br><span class="line">    http:<span class="comment">//www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"></span><br><span class="line">Unless required by applicable law or agreed to in writing,</span><br><span class="line">software distributed under the License is distributed on an</span><br><span class="line"><span class="string">&quot;AS IS&quot;</span> BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span><br><span class="line">KIND, either express or implied.  See the License <span class="keyword">for</span> the</span><br><span class="line">specific language governing permissions and limitations</span><br><span class="line">under the License.</span><br><span class="line">--&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--</span><br><span class="line"> | This is the configuration file <span class="keyword">for</span> Maven. It can be specified at two levels:</span><br><span class="line"> |</span><br><span class="line"> |  <span class="number">1.</span> User Level. This settings.xml file provides configuration <span class="keyword">for</span> a single user,</span><br><span class="line"> |                 and is normally provided in $&#123;user.home&#125;/.m2/settings.xml.</span><br><span class="line"> |</span><br><span class="line"> |                 NOTE: This location can be overridden with the CLI option:</span><br><span class="line"> |</span><br><span class="line"> |                 -s /path/to/user/settings.xml</span><br><span class="line"> |</span><br><span class="line"> |  <span class="number">2.</span> Global Level. This settings.xml file provides configuration <span class="keyword">for</span> all Maven</span><br><span class="line"> |                 <span class="function">users on a <span class="title">machine</span> <span class="params">(assuming they<span class="string">&#x27;re all using the same Maven</span></span></span></span><br><span class="line"><span class="function"><span class="params"><span class="string"> |                 installation). It&#x27;</span>s normally provided in</span></span></span><br><span class="line"><span class="function"><span class="params"> |                 $&#123;maven.conf&#125;/settings.xml.</span></span></span><br><span class="line"><span class="function"><span class="params"> |</span></span></span><br><span class="line"><span class="function"><span class="params"> |                 NOTE: This location can be overridden with the CLI option:</span></span></span><br><span class="line"><span class="function"><span class="params"> |</span></span></span><br><span class="line"><span class="function"><span class="params"> |                 -gs /path/to/global/settings.xml</span></span></span><br><span class="line"><span class="function"><span class="params"> |</span></span></span><br><span class="line"><span class="function"><span class="params"> | The sections in <span class="keyword">this</span> sample file are intended to give you a running start at</span></span></span><br><span class="line"><span class="function"><span class="params"> | getting the most out of your Maven installation. Where appropriate, the <span class="keyword">default</span></span></span></span><br><span class="line"><span class="function"><span class="params"> | values (values used when the setting is not specified)</span> are provided.</span></span><br><span class="line"><span class="function"> |</span></span><br><span class="line"><span class="function"> |--&gt;</span></span><br><span class="line"><span class="function">&lt;settings xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span><br><span class="line">          xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">          xsi:schemaLocation=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span><br><span class="line">  &lt;!-- localRepository</span><br><span class="line">   | The path to the local repository maven will use to store artifacts.</span><br><span class="line">   |</span><br><span class="line">   | Default: $&#123;user.home&#125;/.m2/repository</span><br><span class="line">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span><br><span class="line">  --&gt;</span><br><span class="line">  &lt;localRepository&gt;D:\apache-maven-3.6.3\repository&lt;/localRepository&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- interactiveMode</span><br><span class="line">   | This will determine whether maven prompts you when it needs input. If set to <span class="keyword">false</span>,</span><br><span class="line">   | maven will use a sensible <span class="keyword">default</span> value, perhaps based on some other setting, <span class="keyword">for</span></span><br><span class="line">   | the parameter in question.</span><br><span class="line">   |</span><br><span class="line">   | Default: <span class="keyword">true</span></span><br><span class="line">  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</span><br><span class="line">  --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- offline</span><br><span class="line">   | Determines whether maven should attempt to connect to the network when executing a build.</span><br><span class="line">   | This will have an effect on artifact downloads, artifact deployment, and others.</span><br><span class="line">   |</span><br><span class="line">   | Default: <span class="keyword">false</span></span><br><span class="line">  &lt;offline&gt;false&lt;/offline&gt;</span><br><span class="line">  --&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- pluginGroups</span><br><span class="line">   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.</span><br><span class="line">   | when invoking a command line like <span class="string">&quot;mvn prefix:goal&quot;</span>. Maven will automatically add the group identifiers</span><br><span class="line">   | <span class="string">&quot;org.apache.maven.plugins&quot;</span> and <span class="string">&quot;org.codehaus.mojo&quot;</span> <span class="keyword">if</span> these are not already contained in the list.</span><br><span class="line">   |--&gt;</span><br><span class="line">  &lt;pluginGroups&gt;</span><br><span class="line">    &lt;!-- pluginGroup</span><br><span class="line">     | Specifies a further group identifier to use <span class="keyword">for</span> plugin lookup.</span><br><span class="line">    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">  &lt;/pluginGroups&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- proxies</span><br><span class="line">   | This is a list of proxies which can be used on <span class="keyword">this</span> machine to connect to the network.</span><br><span class="line">   | <span class="function">Unless otherwise <span class="title">specified</span> <span class="params">(by system property or command-line <span class="keyword">switch</span>)</span>, the first proxy</span></span><br><span class="line"><span class="function">   | specification in <span class="keyword">this</span> list marked as active will be used.</span></span><br><span class="line"><span class="function">   |--&gt;</span></span><br><span class="line"><span class="function">  &lt;proxies&gt;</span></span><br><span class="line"><span class="function">    &lt;!-- proxy</span></span><br><span class="line"><span class="function">     | Specification <span class="keyword">for</span> one proxy, to be used in connecting to the network.</span></span><br><span class="line"><span class="function">     |</span></span><br><span class="line"><span class="function">    &lt;proxy&gt;</span></span><br><span class="line"><span class="function">      &lt;id&gt;optional&lt;/id&gt;</span></span><br><span class="line"><span class="function">      &lt;active&gt;<span class="keyword">true</span>&lt;/active&gt;</span></span><br><span class="line"><span class="function">      &lt;protocol&gt;http&lt;/protocol&gt;</span></span><br><span class="line"><span class="function">      &lt;username&gt;proxyuser&lt;/username&gt;</span></span><br><span class="line"><span class="function">      &lt;password&gt;proxypass&lt;/password&gt;</span></span><br><span class="line"><span class="function">      &lt;host&gt;proxy.host.net&lt;/host&gt;</span></span><br><span class="line"><span class="function">      &lt;port&gt;80&lt;/port&gt;</span></span><br><span class="line"><span class="function">      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;</span></span><br><span class="line"><span class="function">    &lt;/proxy&gt;</span></span><br><span class="line"><span class="function">    --&gt;</span></span><br><span class="line"><span class="function">  &lt;/proxies&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  &lt;!-- servers</span></span><br><span class="line"><span class="function">   | This is a list of authentication profiles, keyed by the server-id used within the system.</span></span><br><span class="line"><span class="function">   | Authentication profiles can be used whenever maven must make a connection to a remote server.</span></span><br><span class="line"><span class="function">   |--&gt;</span></span><br><span class="line"><span class="function">  &lt;servers&gt;</span></span><br><span class="line"><span class="function">    &lt;!-- server</span></span><br><span class="line"><span class="function">     | Specifies the authentication information to use when connecting to a particular server, identified by</span></span><br><span class="line"><span class="function">     | a unique name within the <span class="title">system</span> <span class="params">(referred to by the <span class="string">&#x27;id&#x27;</span> attribute below)</span>.</span></span><br><span class="line"><span class="function">     |</span></span><br><span class="line"><span class="function">     | NOTE: You should either specify username/password OR privateKey/passphrase, since these pairings are</span></span><br><span class="line"><span class="function">     |       used together.</span></span><br><span class="line"><span class="function">     |</span></span><br><span class="line"><span class="function">    &lt;server&gt;</span></span><br><span class="line"><span class="function">      &lt;id&gt;deploymentRepo&lt;/id&gt;</span></span><br><span class="line"><span class="function">      &lt;username&gt;repouser&lt;/username&gt;</span></span><br><span class="line"><span class="function">      &lt;password&gt;repopwd&lt;/password&gt;</span></span><br><span class="line"><span class="function">    &lt;/server&gt;</span></span><br><span class="line"><span class="function">    --&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    &lt;!-- Another sample, using keys to authenticate.</span></span><br><span class="line"><span class="function">    &lt;server&gt;</span></span><br><span class="line"><span class="function">      &lt;id&gt;siteServer&lt;/id&gt;</span></span><br><span class="line"><span class="function">      &lt;privateKey&gt;/path/to/<span class="keyword">private</span>/key&lt;/privateKey&gt;</span></span><br><span class="line">      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;</span><br><span class="line">    &lt;/server&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">  &lt;/servers&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- mirrors</span><br><span class="line">   | This is a list of mirrors to be used in downloading artifacts from remote repositories.</span><br><span class="line">   |</span><br><span class="line">   | It works like <span class="keyword">this</span>: a POM may declare a repository to use in resolving certain artifacts.</span><br><span class="line">   | However, <span class="keyword">this</span> repository may have problems with heavy traffic at times, so people have mirrored</span><br><span class="line">   | it to several places.</span><br><span class="line">   |</span><br><span class="line">   | That repository definition will have a unique id, so we can create a mirror reference <span class="keyword">for</span> that</span><br><span class="line">   | repository, to be used as an alternate download site. The mirror site will be the preferred</span><br><span class="line">   | server <span class="keyword">for</span> that repository.</span><br><span class="line">   |--&gt;</span><br><span class="line">  &lt;mirrors&gt;</span><br><span class="line">    &lt;!-- mirror</span><br><span class="line">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span><br><span class="line">     | <span class="keyword">this</span> mirror serves has an ID that matches the mirrorOf element of <span class="keyword">this</span> mirror. IDs are used</span><br><span class="line">     | <span class="keyword">for</span> inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span><br><span class="line">     |</span><br><span class="line">	  --&gt;</span><br><span class="line">    &lt;mirror&gt;</span><br><span class="line">      &lt;id&gt;nexus-aliyun&lt;/id&gt;</span><br><span class="line">      &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">      &lt;name&gt;nexus-aliyun&lt;/name&gt;</span><br><span class="line">      &lt;url&gt;http:<span class="comment">//maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;</span></span><br><span class="line">    &lt;/mirror&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/mirrors&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- profiles</span><br><span class="line">   | This is a list of profiles which can be activated in a variety of ways, and which can modify</span><br><span class="line">   | the build process. Profiles provided in the settings.xml are intended to provide local machine-</span><br><span class="line">   | specific paths and repository locations which allow the build to work in the local environment.</span><br><span class="line">   |</span><br><span class="line">   | For example, <span class="keyword">if</span> you have an integration testing plugin - like cactus - that needs to know where</span><br><span class="line">   | your Tomcat instance is installed, you can provide a variable here such that the variable is</span><br><span class="line">   | dereferenced during the build process to configure the cactus plugin.</span><br><span class="line">   |</span><br><span class="line">   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles</span><br><span class="line">   | <span class="function">section of <span class="keyword">this</span> <span class="title">document</span> <span class="params">(settings.xml)</span> - will be discussed later. Another way essentially</span></span><br><span class="line"><span class="function">   | relies on the detection of a system property, either matching a particular value <span class="keyword">for</span> the property,</span></span><br><span class="line"><span class="function">   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a</span></span><br><span class="line"><span class="function">   | value of &#x27;1.4&#x27; might activate a profile when the build is executed on a JDK version of &#x27;1.4.2_07&#x27;.</span></span><br><span class="line"><span class="function">   | Finally, the list of active profiles can be specified directly from the command line.</span></span><br><span class="line"><span class="function">   |</span></span><br><span class="line"><span class="function">   | NOTE: For profiles defined in the settings.xml, you are restricted to specifying only artifact</span></span><br><span class="line"><span class="function">   |       repositories, plugin repositories, and free-form properties to be used as configuration</span></span><br><span class="line"><span class="function">   |       variables <span class="keyword">for</span> plugins in the POM.</span></span><br><span class="line"><span class="function">   |</span></span><br><span class="line"><span class="function">   |--&gt;</span></span><br><span class="line"><span class="function">  &lt;profiles&gt;</span></span><br><span class="line"><span class="function">    &lt;!-- profile</span></span><br><span class="line"><span class="function">     | Specifies a set of introductions to the build process, to be activated using one or more of the</span></span><br><span class="line"><span class="function">     | mechanisms described above. For inheritance purposes, and to activate profiles via &lt;activatedProfiles/&gt;</span></span><br><span class="line"><span class="function">     | or the command line, profiles have to have an ID that is unique.</span></span><br><span class="line"><span class="function">     |</span></span><br><span class="line"><span class="function">     | An encouraged best practice <span class="keyword">for</span> profile identification is to use a consistent naming convention</span></span><br><span class="line"><span class="function">     | <span class="keyword">for</span> profiles, such as &#x27;env-dev&#x27;, &#x27;env-test&#x27;, &#x27;env-production&#x27;, &#x27;user-jdcasey&#x27;, &#x27;user-brett&#x27;, etc.</span></span><br><span class="line"><span class="function">     | This will make it more intuitive to understand what the set of introduced profiles is attempting</span></span><br><span class="line"><span class="function">     | to accomplish, particularly when you only have a list of profile id&#x27;s <span class="keyword">for</span> debug.</span></span><br><span class="line"><span class="function">     |</span></span><br><span class="line"><span class="function">     | This profile example uses the JDK version to trigger activation, and provides a JDK-specific repo.</span></span><br><span class="line"><span class="function">    &lt;profile&gt;</span></span><br><span class="line"><span class="function">      &lt;id&gt;jdk-1.4&lt;/id&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">      &lt;activation&gt;</span></span><br><span class="line"><span class="function">        &lt;jdk&gt;1.4&lt;/jdk&gt;</span></span><br><span class="line"><span class="function">      &lt;/activation&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">      &lt;repositories&gt;</span></span><br><span class="line"><span class="function">        &lt;repository&gt;</span></span><br><span class="line"><span class="function">          &lt;id&gt;jdk14&lt;/id&gt;</span></span><br><span class="line"><span class="function">          &lt;name&gt;Repository <span class="keyword">for</span> JDK 1.4 builds&lt;/name&gt;</span></span><br><span class="line"><span class="function">          &lt;url&gt;http:<span class="comment">//www.myhost.com/maven/jdk14&lt;/url&gt;</span></span></span><br><span class="line"><span class="function">          &lt;layout&gt;<span class="keyword">default</span>&lt;/layout&gt;</span></span><br><span class="line"><span class="function">          &lt;snapshotPolicy&gt;always&lt;/snapshotPolicy&gt;</span></span><br><span class="line"><span class="function">        &lt;/repository&gt;</span></span><br><span class="line"><span class="function">      &lt;/repositories&gt;</span></span><br><span class="line"><span class="function">    &lt;/profile&gt;</span></span><br><span class="line"><span class="function">    --&gt;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    &lt;!--</span></span><br><span class="line"><span class="function">     | Here is another profile, activated by the system property &#x27;target-env&#x27; with a value of &#x27;dev&#x27;,</span></span><br><span class="line"><span class="function">     | which provides a specific path to the Tomcat instance. To use <span class="keyword">this</span>, your plugin configuration</span></span><br><span class="line"><span class="function">     | might hypothetically look like:</span></span><br><span class="line"><span class="function">     |</span></span><br><span class="line"><span class="function">     | ...</span></span><br><span class="line"><span class="function">     | &lt;plugin&gt;</span></span><br><span class="line"><span class="function">     |   &lt;groupId&gt;org.myco.myplugins&lt;/groupId&gt;</span></span><br><span class="line"><span class="function">     |   &lt;artifactId&gt;myplugin&lt;/artifactId&gt;</span></span><br><span class="line"><span class="function">     |</span></span><br><span class="line"><span class="function">     |   &lt;configuration&gt;</span></span><br><span class="line">     |     &lt;tomcatLocation&gt;$&#123;tomcatPath&#125;&lt;/tomcatLocation&gt;</span><br><span class="line">     |   &lt;/configuration&gt;</span><br><span class="line">     | &lt;/plugin&gt;</span><br><span class="line">     | ...</span><br><span class="line">     |</span><br><span class="line">     | NOTE: If you just wanted to inject <span class="keyword">this</span> configuration whenever someone set <span class="string">&#x27;target-env&#x27;</span> to</span><br><span class="line">     |       anything, you could just leave off the &lt;value/&gt; inside the activation-property.</span><br><span class="line">     |</span><br><span class="line">    &lt;profile&gt;</span><br><span class="line">      &lt;id&gt;env-dev&lt;/id&gt;</span><br><span class="line"></span><br><span class="line">      &lt;activation&gt;</span><br><span class="line">        &lt;property&gt;</span><br><span class="line">          &lt;name&gt;target-env&lt;/name&gt;</span><br><span class="line">          &lt;value&gt;dev&lt;/value&gt;</span><br><span class="line">        &lt;/property&gt;</span><br><span class="line">      &lt;/activation&gt;</span><br><span class="line"></span><br><span class="line">      &lt;properties&gt;</span><br><span class="line">        &lt;tomcatPath&gt;/path/to/tomcat/instance&lt;/tomcatPath&gt;</span><br><span class="line">      &lt;/properties&gt;</span><br><span class="line">    &lt;/profile&gt;</span><br><span class="line">    --&gt;</span><br><span class="line">  &lt;/profiles&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- activeProfiles</span><br><span class="line">   | List of profiles that are active <span class="keyword">for</span> all builds.</span><br><span class="line">   |</span><br><span class="line">  &lt;activeProfiles&gt;</span><br><span class="line">    &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt;</span><br><span class="line">    &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt;</span><br><span class="line">  &lt;/activeProfiles&gt;</span><br><span class="line">  --&gt;</span><br><span class="line">&lt;/settings&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>参考文献：<br><a href="https://blog.csdn.net/qq_33215972/article/details/73693140">https://blog.csdn.net/qq_33215972/article/details/73693140</a><br><a href="https://blog.csdn.net/u010282984/article/details/80884810">https://blog.csdn.net/u010282984/article/details/80884810</a><br><a href="https://blog.csdn.net/qq_37591637/article/details/88655294">https://blog.csdn.net/qq_37591637/article/details/88655294</a><br><a href="https://blog.csdn.net/huo920/article/details/82082403">https://blog.csdn.net/huo920/article/details/82082403</a><br>参考视频：<br>b站up主：湖北大学瑞翼工坊</p>
]]></content>
      <categories>
        <category>项目</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客1：环境配置</title>
    <url>/2022/05/22/hexo%E5%8D%9A%E5%AE%A21%EF%BC%9A%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<hr>
<p>hexo博客系列1</p>
 <span id="more"></span>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>换电脑啦，因此需要重新配置hexo的环境。写博客记录一下，方便之后进行配置 ~</p>
<p>欢迎来做客！主页：<a href="https://lightrain.top">https://lightrain.top</a></p>
<p>hexo作为博客系统的模版，可以不用花费太多时间搭建属于自己的博客系统，主要依赖的技术有node.js、nginx、git。</p>
<h1 id="一、安装git"><a href="#一、安装git" class="headerlink" title="一、安装git"></a>一、安装git</h1><h2 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h2><p>参考<a href="https://blog.csdn.net/weixin_39615182/article/details/115307901">https://blog.csdn.net/weixin_39615182/article/details/115307901</a></p>
<p>从Git官网下载：</p>
<blockquote>
<p><a href="https://git-scm.com/download/win">https://git-scm.com/download/win</a></p>
</blockquote>
<p>现在的机子基本都是64位的，选择64位的安装包。<br><img src="https://img-blog.csdnimg.cn/6fe93cf072444bfc830212fb467c55ca.png" alt="在这里插入图片描述"><br>下载好后，选择安装目录，我是放在D盘，然后无脑next下一步即可。<br>命令行cmd里输入git测试是否安装成功。<br><img src="https://img-blog.csdnimg.cn/f36a82dc5bbb44b1a5e60777de15eadb.png" alt="在这里插入图片描述"></p>
<h2 id="1-2-配置"><a href="#1-2-配置" class="headerlink" title="1.2 配置"></a>1.2 配置</h2><p>安装成功后，将Git与GitHub帐号绑定，鼠标右击打开Git Bash here<br><img src="https://img-blog.csdnimg.cn/7495510d2f664de1b85bff208e783743.png" width="40%"><br><img src="https://img-blog.csdnimg.cn/fd47ef9e7817474b90d09a7d6d2bf31a.png" width="80%"><br>这个界面操作是linux命令</p>
<blockquote>
<p>可以参考linux常用命令链接：<a href="https://blog.csdn.net/qq_23329167/article/details/83856430">https://blog.csdn.net/qq_23329167/article/details/83856430</a></p>
</blockquote>
<p>或者在菜单里搜索Git Bash，设置用户名和email地址<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/58263d065f19417d951ae9f2635ebb94.png" width="60%"></p>
<p>可以通过<br><code>git config --global --list</code>查询到设置的用户名和邮箱<br><img src="https://img-blog.csdnimg.cn/66b17d02ac7d41dc90dcdde8fd762649.png" width="60%"></p>
<p>同时，这个配置文件会出现在C:\Users\Administrator目录下<br><img src="https://img-blog.csdnimg.cn/8ba99d3b0b67464399f1a5b160de0503.png" alt="在这里插入图片描述"><br>打开可以看到自己的配置信息。<br><img src="https://img-blog.csdnimg.cn/0c9f1c438d4c4c518035f3e6a5d2bf24.png" width="40%"></p>
<h2 id="1-3-git使用"><a href="#1-3-git使用" class="headerlink" title="1.3 git使用"></a>1.3 git使用</h2><p>最常用的命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;备注信息&quot;</span></span><br><span class="line">git push</span><br><span class="line">git pull</span><br></pre></td></tr></table></figure></p>
<h2 id="1-4-配置ssh密钥"><a href="#1-4-配置ssh密钥" class="headerlink" title="1.4 配置ssh密钥"></a>1.4 配置ssh密钥</h2><p>生成ssh密钥文件：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure><br>然后直接三个回车即可，默认不需要设置密码<br><img src="https://img-blog.csdnimg.cn/80326be57d0c40c398d6efe3c1acde6f.png" alt="在这里插入图片描述"><br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制<br><img src="https://img-blog.csdnimg.cn/bcf37f9373dd43f39e10f0b97ce08c51.png" alt="在这里插入图片描述"></p>
<h2 id="1-5-github"><a href="#1-5-github" class="headerlink" title="1.5 github"></a>1.5 github</h2><p>注册github账号，用来存放我们的网站。<br>打开<a href="https://github.com/，新建一个项目仓库New">https://github.com/，新建一个项目仓库New</a> repository。<br>然后如下图所示，输入自己的项目名字（和用户名同名），后面一定要加.github.io后缀，README初始化也要勾上。</p>
<blockquote>
<p>注意：要创建一个和你用户名相同的仓库，后面加.<a href="http://github.io，只有这样，将来要部署到GitHub">http://github.io，只有这样，将来要部署到GitHub</a><br>page的时候，才会被识别，也就是<a href="http://xxxx.github.io，其中xxx就是你注册GitHub的用户名。">http://xxxx.github.io，其中xxx就是你注册GitHub的用户名。</a></p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/6db6cd59b7084905bb4aa172870398f7.png" alt="在这里插入图片描述"><br>打开GitHub_Settings_keys 页面，新建new SSH Key<br><img src="https://img-blog.csdnimg.cn/b9c8295d853c4497801e0fa2379f6d0f.png" alt="在这里插入图片描述"><br>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。<br><img src="https://img-blog.csdnimg.cn/57389919e99a4d12a19ff2705af1f5c9.png" alt="在这里插入图片描述"><br>然后设置成功将收到邮件。并可在Git Bash中检测GitHub公钥设置是否成功，输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh git@github.com</span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/326f642b21334e178d74a7ef3603b434.png" alt="在这里插入图片描述"></p>
<h1 id="二、安装nodejs"><a href="#二、安装nodejs" class="headerlink" title="二、安装nodejs"></a>二、安装nodejs</h1><p>参考<a href="https://www.cnblogs.com/zhouyu2017/p/6485265.html">https://www.cnblogs.com/zhouyu2017/p/6485265.html</a><br> Node.js 是运行在服务端的 JavaScript。Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。Node.js 的包管理器 npm，是全球最大的开源库生态系统。</p>
<h2 id="2-1-下载"><a href="#2-1-下载" class="headerlink" title="2.1 下载"></a>2.1 下载</h2><p>选择对应系统的Node.js版本：<br><a href="https://nodejs.org/en/download/">https://nodejs.org/en/download/</a><br><img src="https://img-blog.csdnimg.cn/e61199bc74114ecd9a88dece37dddc0f.png" alt="请添加图片描述"></p>
<h2 id="2-2-安装"><a href="#2-2-安装" class="headerlink" title="2.2 安装"></a>2.2 安装</h2><p>选安装目录进行，其余全部next。<br>至此Node.js已经安装完成，可以先进行下简单的测试安装是否成功了，后面还要进行环境配置。在键盘按下【win+R】键，输入cmd，然后回车，打开cmd窗口。<br><img src="https://img-blog.csdnimg.cn/17f2f24a7cb947979a14e40cdec1a5be.png" width="20%"><br>输入node -v显示node.js的版本说明已安装成功输入<br>npm -v显示npm版本说明自带的npm也己经安装成功</p>
<p>安装完后的目录如下所示：<br><img src="https://img-blog.csdnimg.cn/e1313137c9504a21bf3cf3efa3399b5a.png" alt="在这里插入图片描述"><br>说明下：新版的Node.js已自带npm，安装Node.js时会一起安装，npm的作用就是对Node.js依赖的包进行管理，也可以理解为用来安装/卸载Node.js需要装的东西。</p>
<h2 id="2-3-环境配置"><a href="#2-3-环境配置" class="headerlink" title="2.3 环境配置"></a>2.3 环境配置</h2><p>主要配置的是npm安装的全局模块所在的路径，以及缓存cache的路径，之所以要配置，是因为以后在执行类似：npm install express [-g] （后面的可选参数-g，g代表global全局安装的意思）的安装语句时，会将安装的模块安装到【C:\Users\用户名\AppData\Roaming\npm】路径中，占C盘空间。<br>例如：我希望将全模块所在路径和缓存路径放在我node.js安装的文件夹中，则在我安装的文件夹【D:\Develop\nodejs】下创建两个文件夹【node_global】及【node_cache】如下图：<br><img src="https://img-blog.csdnimg.cn/a6afef48e82a44dfa6402116fcd2b28c.png" alt="在这里插入图片描述"><br>创建完两个空文件夹之后，打开cmd命令窗口，输入<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\Programs\nodejs\node_global&quot;</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\Programs\nodejs\node_cache&quot;</span></span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/a081d9eda0494766b5ec0b599405a120.png" alt="在这里插入图片描述"><br>接下来设置环境变量，关闭cmd窗口，“我的电脑”-右键-“属性”-“高级系统设置”-“高级”-“环境变量”<br><img src="https://img-blog.csdnimg.cn/8aeab845e85e44039252e7b78d5daf68.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/40622bca60034dcfb7b2b3dc17c77289.png" width="40%"><br>进入环境变量对话框，在【系统变量】下新建【NODE_PATH】，输入【D:\Programs\nodejs\node_global\node_modules】，<br>然后，将【用户变量】下的【Path】修改为【D:\Programs\nodejs\node_global】<br><img src="https://img-blog.csdnimg.cn/74d4d0ac0e904b0fae45314ed7e27e13.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a8e1dd4d303e4910b9212424e3da7e0e.png" alt="在这里插入图片描述"><br>修改完成后确认<br><img src="https://img-blog.csdnimg.cn/bd8cec6809f645f9ab5025ac207c7a7f.png" alt="在这里插入图片描述"></p>
<h2 id="2-4-测试"><a href="#2-4-测试" class="headerlink" title="2.4 测试"></a>2.4 测试</h2><p>配置完后，安装个module测试下，我们就安装最常用的express模块。<br>输入如下命令进行模块的全局安装：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install express -g     <span class="comment"># -g是全局安装的意思</span></span><br></pre></td></tr></table></figure><br>如果直接运行会报错，<br>①可以删除npmrc文件，来解决这个问题。<br>强调：不是nodejs安装目录npm模块下的那个npmrc文件<br>而是在C:\Users{账户}\下的.npmrc文件..<br><img src="https://img-blog.csdnimg.cn/f39b11f71fbc417b8786207c3ff0d9f8.png" alt="在这里插入图片描述"><br>②也可以使用管理员身份打开cmd窗口来运行命令<br><img src="https://img-blog.csdnimg.cn/eecb9a2829a449c68cad241db4e2a3c3.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/a3cf6937b35d47c0affe8c73563b65fc.png" alt="在这里插入图片描述"></p>
<h2 id="2-5-添加国内镜像源"><a href="#2-5-添加国内镜像源" class="headerlink" title="2.5 添加国内镜像源"></a>2.5 添加国内镜像源</h2><p>如果没有梯子的话，可以使用阿里的国内镜像进行加速。<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/4f38f6f9f16e4f848c3d08b326f8c975.png" alt="在这里插入图片描述"></p>
<h1 id="三、安装Hexo"><a href="#三、安装Hexo" class="headerlink" title="三、安装Hexo"></a>三、安装Hexo</h1><p>Hexo是基于node.js编写的，所以需要先安装一下node.js和里面的npm工具。</p>
<h2 id="3-1-安装Hexo"><a href="#3-1-安装Hexo" class="headerlink" title="3.1 安装Hexo"></a>3.1 安装Hexo</h2><p>前面git和nodejs安装好后，就可以安装hexo了。<br>先创建一个文件夹MyBlog，用来存放自己的博客文件，然后cd到这个文件夹下（或者在这个文件夹下直接右键git bash打开）。<br>在该目录下右键点击Git Bash Here，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不用Windows自带的cmd了。<br>定位到该目录下，输入<code>npm install -g hexo-cli</code>安装Hexo。<br><img src="https://img-blog.csdnimg.cn/2261d17508f24bd5a9c1523157c1c9c3.png" alt="在这里插入图片描述"><br>报错，没有下载成功。<br>删除npmrc文件，来解决这个问题。<br>强调：不是nodejs安装目录npm模块下的那个npmrc文件<br>而是在C:\Users{账户}\下的.npmrc文件..<br><img src="https://img-blog.csdnimg.cn/53cca26fd0f84433b0c7f6d0aa15dc0b.png" alt="在这里插入图片描述"></p>
<h2 id="3-2-配置环境变量"><a href="#3-2-配置环境变量" class="headerlink" title="3.2 配置环境变量"></a>3.2 配置环境变量</h2><p>如果报错：’hexo’ 不是内部或外部命令，也不是可运行的程序。<br><img src="https://img-blog.csdnimg.cn/92cc3c73b84a43dc9d983cfd2dbafcb3.png" alt="在这里插入图片描述"><br>bash: hexo: command not found<br><img src="https://img-blog.csdnimg.cn/e695cfe65f184b489634bc612b960ad8.png" alt="在这里插入图片描述"><br>需要将有hexo.cmd的路径配置到环境变量中<br>具体参考：<a href="https://blog.csdn.net/qq_27093465/article/details/72954725">https://blog.csdn.net/qq_27093465/article/details/72954725</a><br><img src="https://img-blog.csdnimg.cn/2c49fddaddfb4f32830c6bab0dfc6b27.png" alt="在这里插入图片描述"><br>找到安装位置的hexo.cmd文件，配置到环境变量中去。<br><img src="https://img-blog.csdnimg.cn/c3a5e955c3a14b319133b8187829b203.png" alt="在这里插入图片描述"><br>这个之后，咱再运行一次，hexo命令。<br><img src="https://img-blog.csdnimg.cn/31be7c6535954291a4fd645df2a1132e.png" alt="在这里插入图片描述"><br>至此hexo就安装完了。</p>
]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>[object Object]</tag>
        <tag>实践</tag>
        <tag>环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>python的那些小程序（绘图）</title>
    <url>/2020/10/18/python%E7%9A%84%E9%82%A3%E4%BA%9B%E5%B0%8F%E7%A8%8B%E5%BA%8F%EF%BC%88%E7%BB%98%E5%9B%BE%EF%BC%89/</url>
    <content><![CDATA[<p>python的那些小程序之绘图：</p>
<p>五角星，字符画，万花筒</p>
<span id="more"></span>
<h2 id="绘制五角星"><a href="#绘制五角星" class="headerlink" title="绘制五角星"></a>绘制五角星</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">spiral = turtle.Turtle()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    spiral.forward(i * <span class="number">10</span>)</span><br><span class="line">    spiral.right(<span class="number">144</span>)</span><br><span class="line"></span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure>
<p>结果展示<br><img src="https://img-blog.csdnimg.cn/20201016102536856.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="绘制万花筒"><a href="#绘制万花筒" class="headerlink" title="绘制万花筒"></a>绘制万花筒</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"></span><br><span class="line">spiral = turtle.Turtle()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    spiral.forward(i * <span class="number">10</span>)</span><br><span class="line">    spiral.right(<span class="number">144</span>)</span><br><span class="line"></span><br><span class="line">turtle.done()</span><br></pre></td></tr></table></figure>
<p>结果展示<br><img src="https://img-blog.csdnimg.cn/2020101610292091.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h2 id="绘制字符画"><a href="#绘制字符画" class="headerlink" title="绘制字符画"></a>绘制字符画</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">在这里插入代码片</span><br></pre></td></tr></table></figure>
<p>结果展示<br><img src="https://img-blog.csdnimg.cn/20201018113821631.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>（搞错了，再来）<br>（原因：输出的文档格式需要调整为宋体小六）<br>更改后：<br><img src="https://img-blog.csdnimg.cn/202010181140284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>原图：<br><img src="https://img-blog.csdnimg.cn/20201018114050357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<p>问题1：报错ImportError:No module named ‘PIL’<br>原因1：保存图片就需要一个图片保存的库，即缺失一个pillow的数据包<br>解决1：在黑窗口下输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.douban.com/simple pillow</span><br></pre></td></tr></table></figure>
<p>问题2：报错Traceback (most recent call last):<br>  File “E:/wyt/第一章/字符画.py”, line 28, in <module><br>    fp = open(u’独角兽.jpg’,’rb’)<br>FileNotFoundError: [Errno 2] ==No such file or directory:== ‘独角兽.jpg’<br>原因2：①应该是你没有把图片image.jpg放在这个目录C:\Python27\Lib\site-packages\PIL\<br>②相对路径问题<br>解决2：/a为绝对路径. 指当前文件所在的文件夹，. . 指当前文件的上一级目录。这里我直接将其改为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">D:/Desktop/独角兽.png</span><br></pre></td></tr></table></figure>
<p>问题3：报错PIL.UnidentifiedImageError: cannot identify image file <_io.TextIOWrapper name='D:/Desktop/独角兽.png' mode='r' encoding='utf-8'><br>原因3：fp已经打开了，直接fp.read()试试<br>解决3：Image.open(fp)改为fp.read()</p>
<p>问题4：发现from PIL import Image调包为灰色<br>原因4：上述操作实际上是为无法使用的导入声明添加了内容为“# noinspection PyUnresolvedReferences”的注释，它专门针对“This inspection detects names that should resolve but don’t. Due to dynamic dispatch and duck typing, this is possible in a limited but useful number of cases. Top-level and class-level items are supported better than instance items.”提示的情况。其作用是：让PyCharm 在代码检查时人为跳过某些特定部分的代码检查。<br>解决4：①右键点击项目，找下面的Mark Directory as 选择Source Root”<br>②点击File-Invalidte Caches/Restart…重启<br>两种方法均不起作用，无法解决问题。<br>③将鼠标移动到那行代码，点击出现提示“Unused import statement”表示import声明不可用，左边同时出现黄色小灯泡，将鼠标移动至黄色小灯泡那里，会出现向下箭头，点击箭头出现下拉菜单，继续点击第一条“Optimize imports”（切记要点击的是最右边的三角号，不是这一整行，否则会出错），右面选择第四个“Suppress for statement”，即可。<br><img src="https://img-blog.csdnimg.cn/20201017121256468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>最后操作完成会出现如下结果：<br><img src="https://img-blog.csdnimg.cn/20201017121329279.png#pic_center" alt="在这里插入图片描述"></p>
<p>问题5：报错’str’ object has no attribute ‘resize’<br>原因5：可能为类型不对<br>打印类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(image_file))</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;<span class="class"><span class="keyword">class</span> &#x27;<span class="title">str</span>&#x27;&gt;</span></span><br></pre></td></tr></table></figure>
<p>确认原因：resize是给文件对象用的<br>解决5：忘了。。。</p>
<p>问题6：raise AttributeError(f”module ‘{<strong>name</strong>}’ has no attribute ‘{name}’”)</p>
<p>问题7：输出文件找不到。<br>解决7：给输出文件加绝对路径。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>①出错之后可以及时打印类型，检查问题原因<br>②基础先打牢，报错会少很多，而且修改报错起来更快</p>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://blog.csdn.net/pythonxiaohei/article/details/99698027">https://blog.csdn.net/pythonxiaohei/article/details/99698027</a><br><a href="https://blog.csdn.net/wait_nothing_alone/article/details/52901531">https://blog.csdn.net/wait_nothing_alone/article/details/52901531</a><br><a href="https://www.cnblogs.com/hangzhi/p/9096321.html">https://www.cnblogs.com/hangzhi/p/9096321.html</a><br>Python图像处理：<br><a href="https://www.cnblogs.com/luorunsb/p/10708215.html">https://www.cnblogs.com/luorunsb/p/10708215.html</a></p>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/ssh%E6%9C%AC%E6%9C%BA%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%A4%B1%E8%B4%A5/</url>
    <content><![CDATA[<p>@<a href="ssh本机连接服务器失败(ssh: connect to host 111.47.28.118 port 9722: Connection timed out">TOC</a></p>
<h1 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h1><p>最后发现是老师换服务器了，之前的那个没有用了，所以连接不上（๑乛◡乛๑卡在了奇怪的地方）。<br>说不准你也是hhh，可以先去确认一下。<br>仅供之后的自己参考，且留作纪念。</p>
<h1 id="一-问题描述"><a href="#一-问题描述" class="headerlink" title="一. 问题描述"></a>一. 问题描述</h1><p>　　想要在本机连接服务器… 可是装好mobaxterm后, 发现输入ssh端口号和ip时报错, 但账号应该是对的。</p>
<p>​通过cmd直接连接也报错ssh: connect to host 111.47.28.118 port 9722: Connection timed out</p>
<h1 id="二-解决问题"><a href="#二-解决问题" class="headerlink" title="二.解决问题"></a>二.解决问题</h1><p>　　参考链接：<a href="https://www.cnblogs.com/Cherrison-Time/p/11587816.html">ssh本机失败(ssh: connect to host localhost port 22: Connection refused) - Cherrison_Time - 博客园 (cnblogs.com)</a></p>
<p>  <strong>发现原因可能是: 端口没有打开, 本地防火墙拒绝, 本机没有ssh服务;</strong></p>
<h2 id="先关闭防火墙："><a href="#先关闭防火墙：" class="headerlink" title="先关闭防火墙："></a>先关闭防火墙：</h2><p><img src="https://img-blog.csdnimg.cn/29e34cb15733457994590739df5ce204.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="">然后本机没有ssh服务,使用linux的时候ssh是经常使用的, 但是本机却可能是没有ssh服务的, 所以我们要安装ssh服务;<br>查看是否有ssh服务<br><img src="https://img-blog.csdnimg.cn/a633814ab33c4b23a1c059abbc9794e6.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="启用windows的ssh功能"><a href="#启用windows的ssh功能" class="headerlink" title="启用windows的ssh功能:"></a>启用windows的ssh功能:</h2><p>参加链接：<a href="https://blog.csdn.net/weixin_44570083/article/details/109435794">1、杂项：Windows服务器openssh连接(含ssh免密登录)</a><br>Windows系统其实提供了ssh的拓展功能，只不过默认没有打开。就像wsl一样，这些功能受众很小，一般人根本用不上它。所以我们需要手动去打开它，服务器和客户端上都要去打开，不然用不了。也可以通过第三方软件去实现这个功能，客户端用xshell，服务器用freesshd。不过这些都是需要安装第三方软件的，不靠谱。我们选择的是windows内置的openssh的功能。</p>
<p>1、打开Windows系统设置，点击应用选项<br>2、点击应用和功能选项卡里可选功能<br>3、点击添加功能<br>4、搜索ssh，会出现以下两个结果。一般情况下服务器只要安装OpenSSH服务器，客户端那就安装OpenSSH客户端即可。不过我这里建议大家两个都装上，至少在服务器上要两个都装上（为什么？后面再说）。客户端上那无所谓，装一个就行了。安装的时间比较慢，稍等便可即可。</p>
<h2 id="然后配置服务器自启动"><a href="#然后配置服务器自启动" class="headerlink" title="然后配置服务器自启动"></a>然后配置服务器自启动</h2><p>1、服务器上两个软件都安装好后需要配置下服务自启动，以便每次重启电脑都能自动启动服务。在服务里，找到这个东西OpenSSH SSH Server<br>2、点击属性设置，将启动类型设置成自动启动，并且点击启动按钮，立即启动服务。</p>
<h2 id="回环测试"><a href="#回环测试" class="headerlink" title="回环测试"></a>回环测试</h2><p>1、打开PowerShell或者CMD，输入 ssh CX@127.0.0.1测试本地是否可以正常连接，这里用的就是上面第4点安装的ssh客户端去连接自己的ssh服务器。回车后，输入yes！。（格式：ssh 用户名@IP地址），我这里是本地所以直接填的网卡回环地址。客户机如果想要连接服务器的话需要填写服务器实际的ip地址，填127.0.0.1是没用的。<br><img src="https://img-blog.csdnimg.cn/b7d6d2afad6b41df819aa1321c9b5f16.png" alt="在这里插入图片描述"></p>
<ol>
<li><strong>生成ssh秘钥</strong><br>打开控制台<br>在该路径下创建一个.ssh目录（可以使用命令，也可以手动创建）<br>进入.ssh目录<br>运行ssh-keygen<br>然后一直按回车执行就可以<img src="https://img-blog.csdnimg.cn/39f15cce772d4fd6bbc8d27a179b83af.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>完成后看到.ssh目录下会多出两个文件id_rsa和id_rsa.pub，就说明成功了<br><img src="https://img-blog.csdnimg.cn/4b42d9baca154d289b1624d315f2f64f.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></li>
<li><strong>创建config文件并配置相关信息</strong><br>在.ssh目录下新建一个config文件，并打开<br>配置信息：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Host <span class="built_in">test</span> </span><br><span class="line">  Port 22  &lt;端口号，你的远程服务器的sshd服务的端口号，默认是22&gt;</span><br><span class="line">  HostName  196.168.2.3 &lt;主机地址，前面是乱填的&gt;</span><br><span class="line">  User root &lt;用户名，默认是root&gt;</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa&lt;存放密钥的地址，默认填&gt;</span><br><span class="line">  IdentitiesOnly yes</span><br></pre></td></tr></table></figure>
<p>Host：连接的时候使用的名称，自己定义<br>Port：端口号，你的远程服务器的sshd服务的端口号，默认是22<br>HostName：主机地址，前面是乱填的<br>User：用户名，默认是root<br>IdentityFile：存放密钥的地址，不会就按上面填就好<br>编辑完成后，然后保存。千万别填错！别填错！填错！尤其是IdentityFile和IdentitiesOnly。（我不会告诉你我就是填错过的）</p>
<p>这样本地就配置好了</p>
<ol>
<li><strong>配置环境变量</strong><br>该指令只能在.ssh路径下才可以运行，所有我们可以将该路径配置为全局环境变量，这样就可在任何路径下使用了</li>
</ol>
<p>打开我的电脑-&gt;属性<br>打开高级系统管理<br>打开环境变量<br>点击path-&gt;编辑<br>复制.ssh目录路径，点击新建-&gt;将.ssh目录的路径粘贴到内容区域<br>保存确认<br><img src="https://img-blog.csdnimg.cn/8f94ffe755be4b0e89bbd09545f75022.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="远端连接"><a href="#远端连接" class="headerlink" title="远端连接"></a>远端连接</h2><h3 id="密码连接"><a href="#密码连接" class="headerlink" title="密码连接"></a>密码连接</h3><p>  和上面本地回环测试差不多，在客户端机器上，输入连接命令，不过需要把ip地址换成服务器实际的ip地址。我这里给服务器配置的是固定ip192.168.1.100。只要<strong>两台机器在一个局域网内</strong>，同时<strong>服务器端端口被放行</strong>或者防火墙被关闭，是可以直接输入密码连接成功的。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/windows%E4%B8%ADpyspark%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>@<a href="Windows 中pyspark的配置">TOC</a></p>
<h1 id="1-Windows-安装配置-PySpark-开发环境（详细步骤-原理分析）"><a href="#1-Windows-安装配置-PySpark-开发环境（详细步骤-原理分析）" class="headerlink" title="1. Windows 安装配置 PySpark 开发环境（详细步骤+原理分析）"></a>1. Windows 安装配置 PySpark 开发环境（详细步骤+原理分析）</h1><p><a href="https://cloud.tencent.com/developer/article/1701582">https://cloud.tencent.com/developer/article/1701582</a><br>使用 python api 编写 pyspark 代码提交运行时，为了不破坏 spark 原有的运行架构，会将写好的代码首先在 python 解析器中运行(cpython)，Spark 代码归根结底是运行在 JVM 中的，这里 python 借助 Py4j 实现 Python 和 Java 的交互,即通过 Py4j 将 pyspark 代码“解析”到 JVM 中去运行。例如，在 pyspark 代码中实例化一个 SparkContext 对象，那么通过 py4j 最终在 JVM 中会创建 scala 的 SparkContext 对象及后期对象的调用、在 JVM 中数据处理消息的日志会返回到 python 进程中、如果在代码中会回收大量结果数据到 Driver 端中，也会通过 socket 通信返回到 python 进程中。这样在python进程和JVM进程之间就有大量通信。<br>①Windows 配置 python 环境变量<br>②Windows 配置 spark 环境变量<br>③python 环境中安装 py4j 模块(python 调用 java API 的中间通信模块)<br>进入python安装目录\Scripts使用pip install py4j<br>验证py4j是否安装成功：python &gt;&gt;&gt;import py4j回车<br>④安装PySpark模块<br>使用pip安装pyspark。pip install pyspark 会安装最新的版本的pyspark。<br>⑤pyspark验证<br>⑥WordCount 测试环境是否配置成功</p>
<h1 id="2-Windows系统下解压”-tar”文件出错，提示：无法创建符号链接，可能需要以管理器身份运行winrar，参考："><a href="#2-Windows系统下解压”-tar”文件出错，提示：无法创建符号链接，可能需要以管理器身份运行winrar，参考：" class="headerlink" title="2. Windows系统下解压”.tar”文件出错，提示：无法创建符号链接，可能需要以管理器身份运行winrar，参考："></a>2. Windows系统下解压”.tar”文件出错，提示：无法创建符号链接，可能需要以管理器身份运行winrar，参考：</h1><p><a href="https://blog.csdn.net/ruangaoyan/article/details/100154959?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=2">https://blog.csdn.net/ruangaoyan/article/details/100154959?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=2</a><br> <img src="https://img-blog.csdnimg.cn/9b6f71e1d10b4f34bd86c64c838c63d2.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>原因：用户管理员权限(必须管理权权限，否则无效)<br>通过命令行解决：以管理员身份运行cmd，进入待解压文件目录下<br>start winrar x -y hadoop-3.2.3.tar</p>
<h1 id="3-java环境不能有空格"><a href="#3-java环境不能有空格" class="headerlink" title="3.java环境不能有空格"></a>3.java环境不能有空格</h1><p>①参考：<a href="https://blog.csdn.net/u012175183/article/details/117730692">https://blog.csdn.net/u012175183/article/details/117730692</a><br>添加D:\Program Files的链接D:\ProgramFiles<br>mklink/J D:\ProgramFiles “D:\Program Files”<br>//       快捷方式路径       原路径<br>//路径名有空格时需要加双引号    “有空格 的路径”<br>②参考：<a href="https://blog.csdn.net/qq_35535690/article/details/81976032">https://blog.csdn.net/qq_35535690/article/details/81976032</a><br>使用编辑器打开E:\Hadoop2.7.7\hadoop-2.7.7\etc\hadoop\hadoop-env.cmd<br>修改JAVA_HOME的路径<br>把set JAVA_HOME改为jdk的位置<br> <img src="https://img-blog.csdnimg.cn/cf5eb8c3fb7d4889bf7f7f04a562149d.png" alt="在这里插入图片描述"></p>
<h1 id="4-windows环境下paspark开发环境报错"><a href="#4-windows环境下paspark开发环境报错" class="headerlink" title="4. windows环境下paspark开发环境报错"></a>4. windows环境下paspark开发环境报错</h1><p><a href="https://blog.csdn.net/weixin_44285445/article/details/108710043">https://blog.csdn.net/weixin_44285445/article/details/108710043</a><br>①下载所安装的 Spark 版本对应的 Hadoop 版本的压缩包<br>②参考<a href="https://zhuanlan.zhihu.com/p/346219061">https://zhuanlan.zhihu.com/p/346219061</a><br>[问题解决篇-32] hadoop 各个版本的hadoop.dll 下载路径<br>C:\Windows\System32下缺少hadoop.dll,把这个文件拷贝到C:\Windows\System32下面即可。<br>在<a href="https://github.com/cdarlint/winutils下载对应的hadoop.dll和winutils.ex文件">https://github.com/cdarlint/winutils下载对应的hadoop.dll和winutils.ex文件</a><br><img src="https://img-blog.csdnimg.cn/d47a0c4d54094c058b05b069bb4acb33.png" alt="在这里插入图片描述"></p>
<p>③将hadoop-2.6.5\bin 下hadoop.dll 文件winutils.exe 文件拷贝到 C:\Windows\System32④配置hadoop环境，修改path变量<br>HADOOP_HOME：D:\Programs\hadoop-3.2.3<br>%HADOOP_HOME%\bin<br>⑤测试 hadoop version和spark<br><img src="https://img-blog.csdnimg.cn/76a426edb7dd4476b5b84959cbfb70e5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h1 id="5-spark报错：org-apache-hadoop-io-nativeio-NativeIO-Windows-access0-Ljava-lang-String；I-Z"><a href="#5-spark报错：org-apache-hadoop-io-nativeio-NativeIO-Windows-access0-Ljava-lang-String；I-Z" class="headerlink" title="5. spark报错：org.apache.hadoop.io.nativeio.NativeIO$Windows.access0(Ljava/lang/String；I)Z"></a>5. spark报错：org.apache.hadoop.io.nativeio.NativeIO$Windows.access0(Ljava/lang/String；I)Z</h1><p>参考：<a href="https://blog.csdn.net/dkl12/article/details/118767618">https://blog.csdn.net/dkl12/article/details/118767618</a></p>
<h1 id="6-spark报错：WARN-util-Utils-Service-‘SparkUI’-could-not-bind-on-port-4040-Attempting-port-4041-4042等错误"><a href="#6-spark报错：WARN-util-Utils-Service-‘SparkUI’-could-not-bind-on-port-4040-Attempting-port-4041-4042等错误" class="headerlink" title="6. spark报错：WARN util.Utils: Service ‘SparkUI’ could not bind on port 4040. Attempting port 4041.4042等错误"></a>6. spark报错：WARN util.Utils: Service ‘SparkUI’ could not bind on port 4040. Attempting port 4041.4042等错误</h1><p>参考：<a href="https://www.cnblogs.com/angelasp/p/13274455.html">https://www.cnblogs.com/angelasp/p/13274455.html</a><br>解决：关闭进程端口</p>
<h1 id="7-Python版本与spark版本不一致，报错Exception-Python-in-worker-has-different-version-3-10-than-that-in-driver-3-7"><a href="#7-Python版本与spark版本不一致，报错Exception-Python-in-worker-has-different-version-3-10-than-that-in-driver-3-7" class="headerlink" title="7.Python版本与spark版本不一致，报错Exception: Python in worker has different version 3.10 than that in driver 3.7"></a>7.Python版本与spark版本不一致，报错Exception: Python in worker has different version 3.10 than that in driver 3.7</h1><p>参考:<a href="https://blog.csdn.net/lyw5200/article/details/111316602">https://blog.csdn.net/lyw5200/article/details/111316602</a></p>
<h1 id="8-Spark编程笔记-4-RDD数据读写"><a href="#8-Spark编程笔记-4-RDD数据读写" class="headerlink" title="8. Spark编程笔记(4)-RDD数据读写"></a>8. Spark编程笔记(4)-RDD数据读写</h1><p>参考：<a href="https://zhuanlan.zhihu.com/p/103024687">https://zhuanlan.zhihu.com/p/103024687</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/window%E7%8E%AF%E5%A2%83%E4%B8%8B%E5%AE%89%E8%A3%85spark/</url>
    <content><![CDATA[<p>window环境下安装spark<br>(转载）<br>这个非常成功<br><a href="https://zhuanlan.zhihu.com/p/149469688">https://zhuanlan.zhihu.com/p/149469688</a></p>
<p>加上参考<br><a href="https://blog.csdn.net/ruangaoyan/article/details/100154959?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=2">https://blog.csdn.net/ruangaoyan/article/details/100154959?spm=1001.2101.3001.6650.1&amp;utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7ERate-1.pc_relevant_default&amp;utm_relevant_index=2</a></p>
]]></content>
  </entry>
  <entry>
    <title>一周年の纪念</title>
    <url>/2024/03/25/%E4%B8%80%E5%91%A8%E5%B9%B4%E3%81%AE%E7%BA%AA%E5%BF%B5/</url>
    <content><![CDATA[<p> <a href="https://lightrain.top/">https://lightrain.top/</a></p>
<p><em>light rain，源自初识时的小雨。</em></p>
<p><code>谨以此网站，献给一年前的自己。</code></p>
<span id="more"></span>
<h2 id="致敬「Hello-World」"><a href="#致敬「Hello-World」" class="headerlink" title="致敬「Hello World」"></a>致敬「Hello World」</h2><h3 id="我想和你开始"><a href="#我想和你开始" class="headerlink" title="我想和你开始"></a>我想和你开始</h3><p>还记得print的第一句话，是“Hello，World！”自此，我和你就有了联系。</p>
<p>一年前的今天，磕磕绊绊地完成了第一个项目。</p>
<p>连续一周的凌晨四点，实现了从只学了C到写出Spring Boot的巨大跨越。初识「增删改查」，与大量bug硬磕。</p>
<p>幸运的是，遇到了愿意帮忙找errors原因的学长学姐。幸运的是，这么一番折腾下来自己还喜欢这个世界。</p>
<h3 id="你好，世界！"><a href="#你好，世界！" class="headerlink" title="你好，世界！"></a>你好，世界！</h3><p>瑞翼是帷幕，三创是开发之路的正式开始。</p>
<ol>
<li>需求分析<br><img src="https://img-blog.csdnimg.cn/20210420205811666.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li><p>团队设计的接口文档<br><img src="https://img-blog.csdnimg.cn/20210420205732922.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>产品原型图设计<br><img src="https://img-blog.csdnimg.cn/20210420205402674.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210420205527736.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>小程序<br><img src="https://img-blog.csdnimg.cn/20210420210352413.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ol>
<h3 id="你是我的全世界"><a href="#你是我的全世界" class="headerlink" title="你是我的全世界"></a>你是我的全世界</h3><p>余生请多多指教。</p>
]]></content>
      <categories>
        <category>复盘</category>
      </categories>
      <tags>
        <tag>队友</tag>
        <tag>回忆</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E4%BA%BA%E6%89%8B%E4%B8%80%E5%A2%A9%20%E2%80%94%E2%80%94%20python%E8%87%AA%E5%8A%A8%E7%BB%98%E5%88%B6%E5%86%B0%E5%A2%A9%E5%A2%A9/</url>
    <content><![CDATA[<p>@<a href="人手一墩 —— python自动绘制冰墩墩">TOC</a><br>（20220213：暂未更新完，正在一步步尝试优化。。。。</p>
<p>python绘制2022冬奥会吉祥物—冰墩墩。turtle作为python的一个自动绘图工具，绘图需要提供大量的坐标点。我们先参考「涂寐」<a href="https://blog.csdn.net/weixin_46318141/article/details/122841674绘制一款大众版冰墩墩。">https://blog.csdn.net/weixin_46318141/article/details/122841674绘制一款大众版冰墩墩。</a><br>在查找过程中，看到<strong>自动绘制</strong>的观点：</p>
<blockquote>
<p>以一张图片的像素点为探讨点，论RGB，导入OpenCV，读取图片RGB数据，转成三位数组，然后利用turtle库画。</p>
</blockquote>
<p>也就是说，可以用Opencv等图像识别来自动获取图片边缘的位置坐标，绘制属于我们独一无二的冰墩墩。这里给出黑白粗糙的简易版冰墩墩，和彩色高级的进阶版冰墩墩。后者需要配置更多的依赖，原理也更加复杂。</p>
<h1 id="大众版"><a href="#大众版" class="headerlink" title="大众版"></a>大众版</h1><h2 id="绘制代码"><a href="#绘制代码" class="headerlink" title="绘制代码"></a>绘制代码</h2><p>我们先绘制一只大众款冰墩墩。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># python绘制2022冬奥会吉祥物--冰墩墩</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> t</span><br><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep</span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否显示绘画过程</span></span><br><span class="line"><span class="comment"># t.tracer(False)</span></span><br><span class="line"></span><br><span class="line">t.setup(<span class="number">800</span>, <span class="number">600</span>)  <span class="comment"># 设置窗体大小</span></span><br><span class="line">t.title(<span class="string">&#x27;送你一只冰墩墩&#x27;</span>)    <span class="comment"># 更改窗口默认标题</span></span><br><span class="line">t.speed(<span class="number">10</span>)  <span class="comment"># 设置画笔移动速度</span></span><br><span class="line"><span class="comment"># t.bgpic(&#x27;dd.png&#x27;)  # 找到一张简笔画，开始疯狂的测算描边</span></span><br><span class="line">t.hideturtle()  <span class="comment"># 隐藏光标</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 画出大致轮廓</span></span><br><span class="line"><span class="comment"># 画脑门</span></span><br><span class="line">t.penup()  <span class="comment"># 抬起画笔，不留下痕迹</span></span><br><span class="line">t.goto(-<span class="number">73</span>, <span class="number">230</span>)  <span class="comment"># 设置起点</span></span><br><span class="line">t.pencolor(<span class="string">&#x27;lightgray&#x27;</span>)  <span class="comment"># 画笔颜色</span></span><br><span class="line">t.pensize(<span class="number">3</span>)  <span class="comment"># 画笔宽度</span></span><br><span class="line">t.fillcolor(<span class="string">&#x27;white&#x27;</span>)   <span class="comment"># 绘制图形的填充色</span></span><br><span class="line">t.begin_fill() <span class="comment"># 从此处落笔开始，准备填充图形</span></span><br><span class="line">t.pendown()    <span class="comment"># 画笔落下，留下痕迹</span></span><br><span class="line">t.setheading(<span class="number">20</span>)   <span class="comment"># 以 x 轴正方向为基准，设置当前朝向为 angle 角度</span></span><br><span class="line">t.circle(-<span class="number">250</span>, <span class="number">35</span>) <span class="comment"># 画圆，1.半径；2.偏移角度</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 右耳</span></span><br><span class="line">t.setheading(<span class="number">50</span>)</span><br><span class="line">t.circle(-<span class="number">42</span>,<span class="number">180</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 右侧脸与右侧肚子</span></span><br><span class="line">t.setheading(-<span class="number">50</span>)</span><br><span class="line">t.circle(-<span class="number">190</span>,<span class="number">30</span>)</span><br><span class="line">t.circle(-<span class="number">320</span>,<span class="number">45</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 右脚</span></span><br><span class="line">t.circle(<span class="number">120</span>,<span class="number">30</span>)</span><br><span class="line">t.circle(<span class="number">200</span>,<span class="number">12</span>)</span><br><span class="line">t.circle(-<span class="number">18</span>,<span class="number">85</span>)</span><br><span class="line">t.circle(-<span class="number">180</span>,<span class="number">23</span>)</span><br><span class="line">t.circle(-<span class="number">20</span>,<span class="number">110</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 裤裆</span></span><br><span class="line">t.circle(<span class="number">15</span>,<span class="number">115</span>)</span><br><span class="line">t.circle(<span class="number">100</span>, <span class="number">12</span>)</span><br><span class="line">t.circle(<span class="number">15</span>, <span class="number">120</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 左脚</span></span><br><span class="line">t.circle(-<span class="number">15</span>, <span class="number">110</span>)</span><br><span class="line">t.circle(-<span class="number">150</span>, <span class="number">30</span>)</span><br><span class="line">t.circle(-<span class="number">15</span>, <span class="number">70</span>)</span><br><span class="line">t.circle(-<span class="number">150</span>, <span class="number">10</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 左侧肚子</span></span><br><span class="line">t.circle(<span class="number">200</span>, <span class="number">35</span>)</span><br><span class="line">t.circle(-<span class="number">150</span>, <span class="number">20</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 左手</span></span><br><span class="line">t.setheading(-<span class="number">120</span>)</span><br><span class="line">t.circle(<span class="number">50</span>, <span class="number">30</span>)</span><br><span class="line">t.circle(-<span class="number">35</span>, <span class="number">200</span>)</span><br><span class="line">t.circle(-<span class="number">300</span>, <span class="number">23</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 左侧脸</span></span><br><span class="line">t.setheading(<span class="number">86</span>)</span><br><span class="line">t.circle(-<span class="number">300</span>, <span class="number">26</span>)</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 左耳</span></span><br><span class="line">t.setheading(<span class="number">122</span>)</span><br><span class="line">t.circle(-<span class="number">53</span>, <span class="number">160</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 补上右手</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">177</span>, <span class="number">112</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;lightgray&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">3</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">80</span>)</span><br><span class="line">t.circle(-<span class="number">45</span>, <span class="number">200</span>)</span><br><span class="line">t.circle(-<span class="number">300</span>, <span class="number">23</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 画脸上的彩虹圈</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">135</span>, <span class="number">120</span>)</span><br><span class="line">t.pensize(<span class="number">5</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;cyan&quot;</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">60</span>)</span><br><span class="line">t.circle(-<span class="number">165</span>, <span class="number">150</span>)</span><br><span class="line">t.circle(-<span class="number">130</span>, <span class="number">78</span>)</span><br><span class="line">t.circle(-<span class="number">250</span>, <span class="number">30</span>)</span><br><span class="line">t.circle(-<span class="number">138</span>, <span class="number">105</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">131</span>, <span class="number">116</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;slateblue&quot;</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">60</span>)</span><br><span class="line">t.circle(-<span class="number">160</span>, <span class="number">144</span>)</span><br><span class="line">t.circle(-<span class="number">120</span>, <span class="number">78</span>)</span><br><span class="line">t.circle(-<span class="number">242</span>, <span class="number">30</span>)</span><br><span class="line">t.circle(-<span class="number">135</span>, <span class="number">105</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">127</span>, <span class="number">112</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;orangered&quot;</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">60</span>)</span><br><span class="line">t.circle(-<span class="number">155</span>, <span class="number">136</span>)</span><br><span class="line">t.circle(-<span class="number">116</span>, <span class="number">86</span>)</span><br><span class="line">t.circle(-<span class="number">220</span>, <span class="number">30</span>)</span><br><span class="line">t.circle(-<span class="number">134</span>, <span class="number">103</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">123</span>, <span class="number">108</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;gold&quot;</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">60</span>)</span><br><span class="line">t.circle(-<span class="number">150</span>, <span class="number">136</span>)</span><br><span class="line">t.circle(-<span class="number">104</span>, <span class="number">86</span>)</span><br><span class="line">t.circle(-<span class="number">220</span>, <span class="number">30</span>)</span><br><span class="line">t.circle(-<span class="number">126</span>, <span class="number">102</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">120</span>, <span class="number">104</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;greenyellow&quot;</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">60</span>)</span><br><span class="line">t.circle(-<span class="number">145</span>, <span class="number">136</span>)</span><br><span class="line">t.circle(-<span class="number">90</span>, <span class="number">83</span>)</span><br><span class="line">t.circle(-<span class="number">220</span>, <span class="number">30</span>)</span><br><span class="line">t.circle(-<span class="number">120</span>, <span class="number">100</span>)</span><br><span class="line">t.penup()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 眼睛部分</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 左黑眼圈</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">64</span>, <span class="number">120</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">1</span>)</span><br><span class="line">t.fillcolor(<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">40</span>)</span><br><span class="line">t.circle(-<span class="number">35</span>, <span class="number">152</span>)</span><br><span class="line">t.circle(-<span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line">t.circle(-<span class="number">35</span>, <span class="number">130</span>)</span><br><span class="line">t.circle(-<span class="number">100</span>, <span class="number">50</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 右黑眼圈</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">51</span>, <span class="number">82</span>)</span><br><span class="line">t.fillcolor()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">120</span>)</span><br><span class="line">t.circle(-<span class="number">32</span>, <span class="number">152</span>)</span><br><span class="line">t.circle(-<span class="number">100</span>, <span class="number">55</span>)</span><br><span class="line">t.circle(-<span class="number">25</span>, <span class="number">120</span>)</span><br><span class="line">t.circle(-<span class="number">120</span>, <span class="number">45</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 填充黑色部分，从右耳开始，填充至右手时，画爱心</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 右耳黑</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">90</span>, <span class="number">230</span>)</span><br><span class="line">t.pencolor(<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">t.pensize(<span class="number">1</span>)</span><br><span class="line">t.setheading(<span class="number">40</span>)</span><br><span class="line">t.fillcolor(<span class="string">&#x27;black&#x27;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.circle(-<span class="number">30</span>, <span class="number">170</span>)</span><br><span class="line">t.setheading(<span class="number">125</span>)</span><br><span class="line">t.circle(<span class="number">150</span>, <span class="number">23</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 左耳黑</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">130</span>, <span class="number">180</span>)</span><br><span class="line">t.pencolor()</span><br><span class="line">t.pensize(<span class="number">1</span>)</span><br><span class="line">t.fillcolor()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">120</span>)</span><br><span class="line">t.circle(-<span class="number">28</span>, <span class="number">160</span>)</span><br><span class="line">t.setheading(<span class="number">210</span>)</span><br><span class="line">t.circle(<span class="number">150</span>, <span class="number">20</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 左手黑</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">180</span>, -<span class="number">55</span>)</span><br><span class="line">t.fillcolor()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.setheading(-<span class="number">120</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.circle(<span class="number">50</span>, <span class="number">30</span>)</span><br><span class="line">t.circle(-<span class="number">27</span>, <span class="number">200</span>)</span><br><span class="line">t.circle(-<span class="number">300</span>, <span class="number">20</span>)</span><br><span class="line">t.setheading(-<span class="number">90</span>)</span><br><span class="line">t.circle(<span class="number">300</span>, <span class="number">14</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 左脚黑</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">38</span>, -<span class="number">210</span>)</span><br><span class="line">t.fillcolor()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(-<span class="number">155</span>)</span><br><span class="line">t.circle(<span class="number">15</span>, <span class="number">100</span>)</span><br><span class="line">t.circle(-<span class="number">10</span>, <span class="number">110</span>)</span><br><span class="line">t.circle(-<span class="number">100</span>, <span class="number">30</span>)</span><br><span class="line">t.circle(-<span class="number">15</span>, <span class="number">65</span>)</span><br><span class="line">t.circle(-<span class="number">100</span>, <span class="number">10</span>)</span><br><span class="line">t.circle(<span class="number">200</span>, <span class="number">15</span>)</span><br><span class="line">t.setheading(-<span class="number">14</span>)</span><br><span class="line">t.circle(-<span class="number">200</span>, <span class="number">27</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 右脚黑</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">108</span>, -<span class="number">168</span>)</span><br><span class="line">t.fillcolor()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(-<span class="number">115</span>)</span><br><span class="line">t.circle(<span class="number">110</span>, <span class="number">15</span>)</span><br><span class="line">t.circle(<span class="number">200</span>, <span class="number">10</span>)</span><br><span class="line">t.circle(-<span class="number">18</span>, <span class="number">80</span>)</span><br><span class="line">t.circle(-<span class="number">180</span>, <span class="number">13</span>)</span><br><span class="line">t.circle(-<span class="number">20</span>, <span class="number">90</span>)</span><br><span class="line">t.circle(<span class="number">15</span>, <span class="number">60</span>)</span><br><span class="line">t.setheading(<span class="number">42</span>)</span><br><span class="line">t.circle(-<span class="number">200</span>, <span class="number">29</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 右手内部</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">182</span>, <span class="number">95</span>)</span><br><span class="line">t.pencolor()</span><br><span class="line">t.pensize(<span class="number">1</span>)</span><br><span class="line">t.fillcolor()</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.setheading(<span class="number">95</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.circle(-<span class="number">37</span>, <span class="number">160</span>)</span><br><span class="line">t.circle(-<span class="number">20</span>, <span class="number">50</span>)</span><br><span class="line">t.circle(-<span class="number">200</span>, <span class="number">30</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 画龙点睛作用</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 左眼珠子</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">47</span>, <span class="number">55</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">0</span>)</span><br><span class="line">t.circle(<span class="number">25</span>, <span class="number">360</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">45</span>, <span class="number">62</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;darkslategray&quot;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;darkslategray&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">0</span>)</span><br><span class="line">t.circle(<span class="number">19</span>, <span class="number">360</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">45</span>, <span class="number">68</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">0</span>)</span><br><span class="line">t.circle(<span class="number">10</span>, <span class="number">360</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">47</span>, <span class="number">86</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">0</span>)</span><br><span class="line">t.circle(<span class="number">5</span>, <span class="number">360</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 右眼珠子</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">79</span>, <span class="number">60</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">0</span>)</span><br><span class="line">t.circle(<span class="number">24</span>, <span class="number">360</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">79</span>, <span class="number">64</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;darkslategray&quot;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;darkslategray&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">0</span>)</span><br><span class="line">t.circle(<span class="number">19</span>, <span class="number">360</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">79</span>, <span class="number">70</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">0</span>)</span><br><span class="line">t.circle(<span class="number">10</span>, <span class="number">360</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">79</span>, <span class="number">88</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;white&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">0</span>)</span><br><span class="line">t.circle(<span class="number">5</span>, <span class="number">360</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 大黑鼻子</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">37</span>, <span class="number">80</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.circle(-<span class="number">8</span>, <span class="number">130</span>)</span><br><span class="line">t.circle(-<span class="number">22</span>, <span class="number">100</span>)</span><br><span class="line">t.circle(-<span class="number">8</span>, <span class="number">130</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 小嘴儿</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">15</span>, <span class="number">48</span>)</span><br><span class="line">t.setheading(-<span class="number">36</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.circle(<span class="number">60</span>, <span class="number">70</span>)</span><br><span class="line">t.setheading(-<span class="number">132</span>)</span><br><span class="line">t.circle(-<span class="number">45</span>, <span class="number">100</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 右手爱心</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">220</span>, <span class="number">115</span>)</span><br><span class="line">t.pencolor(<span class="string">&quot;brown&quot;</span>)</span><br><span class="line">t.pensize(<span class="number">1</span>)</span><br><span class="line">t.fillcolor(<span class="string">&quot;brown&quot;</span>)</span><br><span class="line">t.begin_fill()</span><br><span class="line">t.pendown()</span><br><span class="line">t.setheading(<span class="number">36</span>)</span><br><span class="line">t.circle(-<span class="number">8</span>, <span class="number">180</span>)</span><br><span class="line">t.circle(-<span class="number">60</span>, <span class="number">24</span>)</span><br><span class="line">t.setheading(<span class="number">110</span>)</span><br><span class="line">t.circle(-<span class="number">60</span>, <span class="number">24</span>)</span><br><span class="line">t.circle(-<span class="number">8</span>, <span class="number">180</span>)</span><br><span class="line">t.end_fill()</span><br><span class="line">t.penup()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 标识</span></span><br><span class="line"><span class="comment"># 文字具体位置需要微调</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 专属名</span></span><br><span class="line">t.pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">t.goto(-<span class="number">60</span>, -<span class="number">140</span>)</span><br><span class="line"><span class="comment"># t.write(&quot;Baby&#x27;s Bing Dwen Dwen&quot;, font=(&#x27;Arial&#x27;, 10, &#x27;bold italic&#x27;))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 奥运时间地点</span></span><br><span class="line">t.pencolor(<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line">t.goto(-<span class="number">36</span>, -<span class="number">160</span>)</span><br><span class="line">t.write(<span class="string">&quot;BEIJING 2022&quot;</span>, font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;bold italic&#x27;</span>))</span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 奥运五环</span></span><br><span class="line">t.penup()</span><br><span class="line">t.goto(-<span class="number">5</span>, -<span class="number">170</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.pencolor(<span class="string">&quot;blue&quot;</span>)</span><br><span class="line">t.circle(<span class="number">6</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">10</span>, -<span class="number">170</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.pencolor(<span class="string">&quot;black&quot;</span>)</span><br><span class="line">t.circle(<span class="number">6</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">25</span>, -<span class="number">170</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.pencolor(<span class="string">&quot;brown&quot;</span>)</span><br><span class="line">t.circle(<span class="number">6</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">2</span>, -<span class="number">175</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.pencolor(<span class="string">&quot;lightgoldenrod&quot;</span>)</span><br><span class="line">t.circle(<span class="number">6</span>)</span><br><span class="line">t.penup()</span><br><span class="line">t.goto(<span class="number">16</span>, -<span class="number">175</span>)</span><br><span class="line">t.pendown()</span><br><span class="line">t.pencolor(<span class="string">&quot;green&quot;</span>)</span><br><span class="line">t.circle(<span class="number">6</span>)</span><br><span class="line">t.penup()</span><br><span class="line"></span><br><span class="line">t.pencolor(<span class="string">&#x27;lightgray&#x27;</span>)</span><br><span class="line">t.goto(<span class="number">230</span>, -<span class="number">160</span>)</span><br><span class="line">t.write(<span class="string">&quot;冰墩墩&quot;</span>, font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;bold italic&#x27;</span>))</span><br><span class="line">t.goto(<span class="number">230</span>, -<span class="number">180</span>)</span><br><span class="line">t.write(<span class="string">&quot;冬奥加油！&quot;</span>, font=(<span class="string">&#x27;Arial&#x27;</span>, <span class="number">12</span>, <span class="string">&#x27;bold italic&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># sleep(2)</span></span><br><span class="line">t.done()</span><br></pre></td></tr></table></figure>
<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><p>1.把上文中的源码 copy 到 3.py 中<br>2.安装 pyinstaller 模块：pip install pyinstaller<br>3.简单封装：pyinstaller -F 3.py<br>4.运行弹出shell终端：pyinstaller -wF 3.py<br>5.加上应用图标： pyinstaller -wF -i 2.ico 3.py<br>注：使用 -i 参数试，图片格式仅可为 ico （ico可以在网站中制作）<br>注注：有时图标需要是中等图标界面才能显示<br><img src="https://img-blog.csdnimg.cn/c6b4c941ec434d18bd76147589d67a81.png" alt="在这里插入图片描述"><br>注：最后exe文件名和py文件名一致</p>
<h2 id="结果图"><a href="#结果图" class="headerlink" title="结果图"></a>结果图</h2><p>最后将3.exe文件改名为冰墩墩.exe<br><img src="https://img-blog.csdnimg.cn/910f6227c139416884c9e71a5f90d0f1.png" alt="在这里插入图片描述"><br>冰墩墩.exe程序运行绘制可爱的冰墩墩（爱心发射！！！<br><img src="https://img-blog.csdnimg.cn/dac6eac68b764d11ac27795c8c08a94e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h1 id="简易版"><a href="#简易版" class="headerlink" title="简易版"></a>简易版</h1><p>turtle是python的一个很好玩的自动绘图工具。然而，用它来画一幅画需要提供大量的坐标点。上文为了用它画出一幅好看的画，手工计算了很多图片线稿的描点的位置。但其实可以用计算机图像识别来自动获取图片边缘的位置坐标，比如Opencv。</p>
<h2 id="代码分解"><a href="#代码分解" class="headerlink" title="代码分解"></a>代码分解</h2><p>先从python的opencv一个基本案例中学习canny函数。</p>
<p>python的opencv图像识别。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">img = cv2.imread(<span class="string">&quot;2.png&quot;</span>)<span class="comment">#读取一张图片</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;窗口标题&quot;</span>,img)<span class="comment">#在一个窗口显示图片</span></span><br></pre></td></tr></table></figure><br>cv2.imread()读取一个图像文件，然后将图像的像素信息转化成一个numpy矩阵，并返回。cv2.imshow()则是读取一个numpy矩阵信息，将其作为像素信息在新窗口中打印出来。</p>
<p>至此读取图片工作完成了，下面通过非微分边缘检测算子： Canny函数，获取图片的边缘信息。</p>
<blockquote>
<p>流程：去噪 —&gt; 梯度 —&gt; 非极大值抑制 —&gt; 滞后阈值<br>具体步骤：彩色图像转换为灰度图像（以灰度图或者单通道图读入）<br>对图像进行高斯模糊（去噪）<br>计算图像梯度，根据梯度计算图像边缘幅值与角度<br>沿梯度方向进行非极大值抑制（边缘细化）<br>双阈值边缘连接处理<br>二值化图像输出结果<br>详见：<a href="https://blog.csdn.net/wumu720123/article/details/89578530">https://blog.csdn.net/wumu720123/article/details/89578530</a></p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">cv2.Canny(image,            # 输入原图（必须为单通道图）</span></span><br><span class="line"><span class="string">          threshold1,</span></span><br><span class="line"><span class="string">          threshold2,       # 较大的阈值2用于检测图像中明显的边缘</span></span><br><span class="line"><span class="string">          [, edges[,</span></span><br><span class="line"><span class="string">          apertureSize[,    # apertureSize：Sobel算子的大小</span></span><br><span class="line"><span class="string">          L2gradient ]]])   # 参数(布尔值)：</span></span><br><span class="line"><span class="string">                              true： 使用更精确的L2范数进行计算（即两个方向的倒数的平方和再开放），</span></span><br><span class="line"><span class="string">                              false：使用L1范数（直接将两个方向导数的绝对值相加）。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>其中，threshold1,threshold2为滞后阈值min和max。返回值为边缘图像。<br><img src="https://img-blog.csdnimg.cn/5bfe681b35964e51b72f57785b13e66c.png" alt="在这里插入图片描述"><br>边缘检测函数，将img图像的边缘像素信息作为numpy矩阵返回，里面的0和200这个参数是阈值范围参数，可自行调节。通过可调整阈值大小的程序，得到最合适的值为11，220。<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">point=cv2.Canny(img, <span class="number">000</span>, <span class="number">200</span>)</span><br></pre></td></tr></table></figure><br><img src="https://img-blog.csdnimg.cn/44d937f60ad647b18c3772b6c5dbdd44.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>虽然得到了边缘位置的信息，但这个矩阵信息却是显示的图像的矩阵的旋转矩阵。因此还需要对所得矩阵进行旋转，否则可能会得到倒过来的图像。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy</span><br><span class="line">point=numpy.rot90(black,k=<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<p>numpy.rot90()这个函数是矩阵顺时针旋转90度的函数，k代表旋转的次数。要旋转3次才矫正(也就是逆时针一次)。<br>得到绘图点的像素信息后，开始用turtle进行绘图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> turtle</span><br><span class="line"><span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(point)):</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(point[y])):</span><br><span class="line">        <span class="keyword">if</span> point[y][x]!=<span class="number">0</span>:</span><br><span class="line">            turtle.penup()</span><br><span class="line">            turtle.goto(y,x)</span><br><span class="line">            turtle.pendown()</span><br><span class="line">            turtle.goto(y,x)</span><br><span class="line">            turtle.penup()</span><br></pre></td></tr></table></figure>
<p>因为绘图点矩阵是通过canny边缘识别得到的，故除了边缘意外的位置像素值都为0。判断x，y坐标下绘图点矩阵的像素信息是否为0，这样就能描绘出一张图片的线稿了。</p>
<h2 id="可调整Canny阈值大小的源码"><a href="#可调整Canny阈值大小的源码" class="headerlink" title="可调整Canny阈值大小的源码"></a>可调整Canny阈值大小的源码</h2><p>调整黑白图阈值的源码，为在彩色源码的基础上删除代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dst = cv2.bitwise_and(img, img, mask=canny)  <span class="comment"># just add some colours to edges from original image.</span></span><br></pre></td></tr></table></figure>
<p>和</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br></pre></td></tr></table></figure>
<p>全部源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">lowThreshold = <span class="number">0</span></span><br><span class="line">max_lowThreshold = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">maxThreshold = <span class="number">100</span></span><br><span class="line">max_maxThreshold = <span class="number">300</span></span><br><span class="line">kernel_size = <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">canny_low_threshold</span>(<span class="params">intial</span>):</span></span><br><span class="line">    blur = cv2.GaussianBlur(gray, (<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>)</span><br><span class="line">    canny = cv2.Canny(blur, intial,maxThreshold,apertureSize = kernel_size)  <span class="comment"># x是最小阈值,y是最大阈值</span></span><br><span class="line">    dst = cv2.bitwise_and(img, img, mask=canny)  <span class="comment"># just add some colours to edges from original image.</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;canny&#x27;</span>, dst)</span><br><span class="line">    <span class="comment"># cv2.imshow(&#x27;canny&#x27;, canny)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">canny_max_threshold</span>(<span class="params">intial</span>):</span></span><br><span class="line">    blur = cv2.GaussianBlur(gray, (<span class="number">3</span>, <span class="number">3</span>), <span class="number">0</span>)</span><br><span class="line">    canny = cv2.Canny(blur, lowThreshold,intial,apertureSize = kernel_size)  <span class="comment"># x是最小阈值,y是最大阈值</span></span><br><span class="line">    dst = cv2.bitwise_and(img, img, mask=canny)  <span class="comment"># just add some colours to edges from original image.</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;canny&#x27;</span>, dst)</span><br><span class="line">    <span class="comment"># cv2.imshow(&#x27;canny&#x27;, canny)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># img = cv2.imread(&#x27;2.jpg&#x27;,0)   # 后面参数0即是以灰度读取</span></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;2.jpg&#x27;</span>)</span><br><span class="line">gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)</span><br><span class="line"></span><br><span class="line">cv2.namedWindow(<span class="string">&#x27;canny&#x27;</span>, cv2.WINDOW_NORMAL | cv2.WINDOW_KEEPRATIO)</span><br><span class="line">cv2.createTrackbar(<span class="string">&#x27;Min threshold&#x27;</span>, <span class="string">&#x27;canny&#x27;</span>, lowThreshold, max_lowThreshold, canny_low_threshold)</span><br><span class="line">cv2.createTrackbar(<span class="string">&#x27;Max threshold&#x27;</span>, <span class="string">&#x27;canny&#x27;</span>, maxThreshold, max_maxThreshold, canny_max_threshold)</span><br><span class="line"></span><br><span class="line">canny_low_threshold(<span class="number">0</span>)  <span class="comment"># initialization</span></span><br><span class="line"><span class="keyword">if</span> cv2.waitKey(<span class="number">0</span>) == <span class="number">27</span>:    <span class="comment"># 27是ESC键值</span></span><br><span class="line">    cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure>
<h2 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h2><p>可调节参数：缩放图像尺寸，窗口标题</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.setup(<span class="number">800</span>,<span class="number">800</span>)      <span class="comment"># 缩放图像尺寸</span></span><br><span class="line">t.title(<span class="string">&#x27;送你一只冰墩墩&#x27;</span>)    <span class="comment"># 更改窗口默认标题</span></span><br></pre></td></tr></table></figure>
<p>笔的大小</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.pensize(<span class="number">4</span>) <span class="comment"># 笔的大小</span></span><br></pre></td></tr></table></figure>
<p>绘图速度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t.speed(<span class="number">10000</span>)</span><br></pre></td></tr></table></figure>
<p>绘图的中心位置等等。</p>
<h2 id="结果图-1"><a href="#结果图-1" class="headerlink" title="结果图"></a>结果图</h2><p><img src="https://img-blog.csdnimg.cn/654a986b79574c958616df55db71b11e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt=""><br><img src="https://img-blog.csdnimg.cn/9245a6b22a634593b93e91170073d171.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h1 id="进阶版"><a href="#进阶版" class="headerlink" title="进阶版"></a>进阶版</h1><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>1、git clone <a href="https://github.com/tfx2001/python-turtle-draw-svg.git">https://github.com/tfx2001/python-turtle-draw-svg.git</a><br>2、安装potrace，参考：<a href="https://pypi.org/project/pypotrace/">https://pypi.org/project/pypotrace/</a><br>3、利用requirement.txt安装依赖库：<a href="https://mp.csdn.net/postedit/103198577">https://mp.csdn.net/postedit/103198577</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-i https://pypi.org/simple</span><br><span class="line">beautifulsoup4==4.6.0</span><br><span class="line">lxml==4.2.1</span><br><span class="line">numpy==1.14.5</span><br><span class="line">opencv-python==3.4.1.15</span><br><span class="line">pywin32==223</span><br></pre></td></tr></table></figure>
<p>注：在安装国外库报错Read timed out时，可以通过以下方式解决：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip --default-timeout=100000 install -U +库名</span><br></pre></td></tr></table></figure>
<p><strong>更换国内安装源</strong>和<strong>设置超时时间</strong>。在<code>pip install XXX</code>命令的后面加上</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">--default-timeout=100000 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/835499df819c43389164b1b964a3c5a3.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>4、测试执行：python main.py -c=32 60960684_p0.png，有用虚拟环境的需切换到虚拟环境后执行前面命令</p>
<h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>1、通过opencv图像识别，把png、jpg图片矢量化，转化成SVG格式<br>2、通过SVG格式知道图画的边界，通过turtle按一定速度沿边界移动，以得到自动作画的效果<br>3、做完边界后，把每个区域颜色填充，这样一幅画就画好了</p>
<h2 id="代码分解-1"><a href="#代码分解-1" class="headerlink" title="代码分解"></a>代码分解</h2><p>由于图片的颜色比较多，因此作者通过opencv对图像先做聚类，用更少颜色去表示更多颜色</p>
<p>通过opencv读入图片：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bitmap = cv2.imread(args.filename)</span><br><span class="line">drawBitmap(bitmap)</span><br></pre></td></tr></table></figure>
<p>通过opencv对图片做颜色聚类&amp;Potrace对图片做矢量图转化：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawBitmap</span>(<span class="params">w_image</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Reducing the colors...&#x27;</span>)</span><br><span class="line">    Z = w_image.reshape((-<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># convert to np.float32</span></span><br><span class="line">    Z = np.float32(Z)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># define criteria, number of clusters(K) and apply kmeans()</span></span><br><span class="line">    criteria = (cv2.TERM_CRITERIA_EPS, <span class="number">10</span>, <span class="number">1.0</span>)</span><br><span class="line">    <span class="keyword">global</span> K</span><br><span class="line">    ret, label, center = cv2.kmeans(</span><br><span class="line">        Z, K, <span class="literal">None</span>, criteria, <span class="number">10</span>, cv2.KMEANS_RANDOM_CENTERS)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Now convert back into uint8, and make original image</span></span><br><span class="line">    center = np.uint8(center)</span><br><span class="line">    <span class="built_in">print</span>(center)</span><br><span class="line">    res = center[label.flatten()]</span><br><span class="line">    res = res.reshape(w_image.shape)</span><br><span class="line">    no = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> center:</span><br><span class="line">        sys.stdout.write(<span class="string">&#x27;\rDrawing: %.2f%% [&#x27;</span> % (</span><br><span class="line">            no / K * <span class="number">100</span>) + <span class="string">&#x27;#&#x27;</span> * no + <span class="string">&#x27; &#x27;</span> * (K - no) + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">        no += <span class="number">1</span></span><br><span class="line">        res2 = cv2.inRange(res, i, i)</span><br><span class="line">        res2 = cv2.bitwise_not(res2)</span><br><span class="line">        <span class="comment">#print(i)</span></span><br><span class="line">        res2 = res</span><br><span class="line">        cv2.imwrite(<span class="string">&#x27;.tmp.bmp&#x27;</span>, res2)</span><br><span class="line">        os.system(<span class="string">&#x27;potrace .tmp.bmp -s --flat&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        drawSVG(<span class="string">&#x27;.tmp.svg&#x27;</span>, <span class="string">&#x27;#%02x%02x%02x&#x27;</span> % (i[<span class="number">2</span>], i[<span class="number">1</span>], i[<span class="number">0</span>]))</span><br><span class="line">    <span class="comment">#os.remove(&#x27;.tmp.bmp&#x27;)</span></span><br><span class="line">    <span class="comment">#os.remove(&#x27;.tmp.svg&#x27;)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n\rFinished, close the window to exit.&#x27;</span>)</span><br><span class="line">    te.done()</span><br></pre></td></tr></table></figure>
<p>按矢量图轨迹作画，利用了python turtle库：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawSVG</span>(<span class="params">filename, w_color</span>):</span></span><br><span class="line">    <span class="keyword">global</span> first</span><br><span class="line">    SVGFile = <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    SVG = BeautifulSoup(SVGFile.read(), <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    Height = <span class="built_in">float</span>(SVG.svg.attrs[<span class="string">&#x27;height&#x27;</span>][<span class="number">0</span>: -<span class="number">2</span>])</span><br><span class="line">    Width = <span class="built_in">float</span>(SVG.svg.attrs[<span class="string">&#x27;width&#x27;</span>][<span class="number">0</span>: -<span class="number">2</span>])</span><br><span class="line">    transform(SVG.g.attrs[<span class="string">&#x27;transform&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> first:</span><br><span class="line">        te.setup(height=Height, width=Width)</span><br><span class="line">        te.setworldcoordinates(-Width / <span class="number">2</span>, <span class="number">300</span>, Width -</span><br><span class="line">                               Width / <span class="number">2</span>, -Height + <span class="number">300</span>)</span><br><span class="line">        first = <span class="literal">False</span></span><br><span class="line">    te.tracer(<span class="number">100</span>)</span><br><span class="line">    te.pensize(<span class="number">1</span>)</span><br><span class="line">    te.speed(Speed)</span><br><span class="line">    te.penup()</span><br><span class="line">    te.color(w_color)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> SVG.find_all(<span class="string">&#x27;path&#x27;</span>):</span><br><span class="line">        attr = i.attrs[<span class="string">&#x27;d&#x27;</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        f = readPathAttrD(attr)</span><br><span class="line">        lastI = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">                te.end_fill()</span><br><span class="line">                Moveto(<span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">                te.begin_fill()</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="string">&#x27;m&#x27;</span>:</span><br><span class="line">                te.end_fill()</span><br><span class="line">                Moveto_r(<span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">                te.begin_fill()</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                Curveto(<span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                        <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                        <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">                lastI = i</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                Curveto_r(<span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                          <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                          <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">                lastI = i</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                Lineto(<span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="string">&#x27;l&#x27;</span>:</span><br><span class="line">                Lineto_r(<span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">                lastI = i</span><br><span class="line">            <span class="keyword">elif</span> lastI == <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                Curveto(i * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                        <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                        <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">elif</span> lastI == <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                Curveto_r(i * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                          <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                          <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">elif</span> lastI == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                Lineto(i * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">elif</span> lastI == <span class="string">&#x27;l&#x27;</span>:</span><br><span class="line">                Lineto_r(i * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">    te.penup()</span><br><span class="line">    te.hideturtle()</span><br><span class="line">    te.update()</span><br><span class="line">    SVGFile.close()</span><br></pre></td></tr></table></figure>
<h2 id="全部代码-1"><a href="#全部代码-1" class="headerlink" title="全部代码"></a>全部代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># Author: tfx2001</span></span><br><span class="line"><span class="comment"># License: GNU GPLv3</span></span><br><span class="line"><span class="comment"># Time: 2018-08-09 18:27</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> turtle <span class="keyword">as</span> te</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line">WriteStep = <span class="number">15</span>  <span class="comment"># 贝塞尔函数的取样次数</span></span><br><span class="line">Speed = <span class="number">1000</span></span><br><span class="line">Width = <span class="number">600</span>  <span class="comment"># 界面宽度</span></span><br><span class="line">Height = <span class="number">600</span>  <span class="comment"># 界面高度</span></span><br><span class="line">Xh = <span class="number">0</span>  <span class="comment"># 记录前一个贝塞尔函数的手柄</span></span><br><span class="line">Yh = <span class="number">0</span></span><br><span class="line">scale = (<span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line">first = <span class="literal">True</span></span><br><span class="line">K = <span class="number">32</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Bezier</span>(<span class="params">p1, p2, t</span>):</span>  <span class="comment"># 一阶贝塞尔函数</span></span><br><span class="line">    <span class="keyword">return</span> p1 * (<span class="number">1</span> - t) + p2 * t</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Bezier_2</span>(<span class="params">x1, y1, x2, y2, x3, y3</span>):</span>  <span class="comment"># 二阶贝塞尔函数</span></span><br><span class="line">    te.goto(x1, y1)</span><br><span class="line">    te.pendown()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, WriteStep + <span class="number">1</span>):</span><br><span class="line">        x = Bezier(Bezier(x1, x2, t / WriteStep),</span><br><span class="line">                   Bezier(x2, x3, t / WriteStep), t / WriteStep)</span><br><span class="line">        y = Bezier(Bezier(y1, y2, t / WriteStep),</span><br><span class="line">                   Bezier(y2, y3, t / WriteStep), t / WriteStep)</span><br><span class="line">        te.goto(x, y)</span><br><span class="line">    te.penup()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Bezier_3</span>(<span class="params">x1, y1, x2, y2, x3, y3, x4, y4</span>):</span>  <span class="comment"># 三阶贝塞尔函数</span></span><br><span class="line">    x1 = -Width / <span class="number">2</span> + x1</span><br><span class="line">    y1 = Height / <span class="number">2</span> - y1</span><br><span class="line">    x2 = -Width / <span class="number">2</span> + x2</span><br><span class="line">    y2 = Height / <span class="number">2</span> - y2</span><br><span class="line">    x3 = -Width / <span class="number">2</span> + x3</span><br><span class="line">    y3 = Height / <span class="number">2</span> - y3</span><br><span class="line">    x4 = -Width / <span class="number">2</span> + x4</span><br><span class="line">    y4 = Height / <span class="number">2</span> - y4  <span class="comment"># 坐标变换</span></span><br><span class="line">    te.goto(x1, y1)</span><br><span class="line">    te.pendown()</span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, WriteStep + <span class="number">1</span>):</span><br><span class="line">        x = Bezier(Bezier(Bezier(x1, x2, t / WriteStep), Bezier(x2, x3, t / WriteStep), t / WriteStep),</span><br><span class="line">                   Bezier(Bezier(x2, x3, t / WriteStep), Bezier(x3, x4, t / WriteStep), t / WriteStep), t / WriteStep)</span><br><span class="line">        y = Bezier(Bezier(Bezier(y1, y2, t / WriteStep), Bezier(y2, y3, t / WriteStep), t / WriteStep),</span><br><span class="line">                   Bezier(Bezier(y2, y3, t / WriteStep), Bezier(y3, y4, t / WriteStep), t / WriteStep), t / WriteStep)</span><br><span class="line">        te.goto(x, y)</span><br><span class="line">    te.penup()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Moveto</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 移动到svg坐标下（x，y）</span></span><br><span class="line">    te.penup()</span><br><span class="line">    te.goto(-Width / <span class="number">2</span> + x, Height / <span class="number">2</span> - y)</span><br><span class="line">    te.pendown()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Moveto_r</span>(<span class="params">dx, dy</span>):</span></span><br><span class="line">    te.penup()</span><br><span class="line">    te.goto(te.xcor() + dx, te.ycor() - dy)</span><br><span class="line">    te.pendown()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">line</span>(<span class="params">x1, y1, x2, y2</span>):</span>  <span class="comment"># 连接svg坐标下两点</span></span><br><span class="line">    te.penup()</span><br><span class="line">    te.goto(-Width / <span class="number">2</span> + x1, Height / <span class="number">2</span> - y1)</span><br><span class="line">    te.pendown()</span><br><span class="line">    te.goto(-Width / <span class="number">2</span> + x2, Height / <span class="number">2</span> - y2)</span><br><span class="line">    te.penup()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Lineto_r</span>(<span class="params">dx, dy</span>):</span>  <span class="comment"># 连接当前点和相对坐标（dx，dy）的点</span></span><br><span class="line">    te.pendown()</span><br><span class="line">    te.goto(te.xcor() + dx, te.ycor() - dy)</span><br><span class="line">    te.penup()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Lineto</span>(<span class="params">x, y</span>):</span>  <span class="comment"># 连接当前点和svg坐标下（x，y）</span></span><br><span class="line">    te.pendown()</span><br><span class="line">    te.goto(-Width / <span class="number">2</span> + x, Height / <span class="number">2</span> - y)</span><br><span class="line">    te.penup()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Curveto</span>(<span class="params">x1, y1, x2, y2, x, y</span>):</span>  <span class="comment"># 三阶贝塞尔曲线到（x，y）</span></span><br><span class="line">    te.penup()</span><br><span class="line">    X_now = te.xcor() + Width / <span class="number">2</span></span><br><span class="line">    Y_now = Height / <span class="number">2</span> - te.ycor()</span><br><span class="line">    Bezier_3(X_now, Y_now, x1, y1, x2, y2, x, y)</span><br><span class="line">    <span class="keyword">global</span> Xh</span><br><span class="line">    <span class="keyword">global</span> Yh</span><br><span class="line">    Xh = x - x2</span><br><span class="line">    Yh = y - y2</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Curveto_r</span>(<span class="params">x1, y1, x2, y2, x, y</span>):</span>  <span class="comment"># 三阶贝塞尔曲线到相对坐标（x，y）</span></span><br><span class="line">    te.penup()</span><br><span class="line">    X_now = te.xcor() + Width / <span class="number">2</span></span><br><span class="line">    Y_now = Height / <span class="number">2</span> - te.ycor()</span><br><span class="line">    Bezier_3(X_now, Y_now, X_now + x1, Y_now + y1,</span><br><span class="line">             X_now + x2, Y_now + y2, X_now + x, Y_now + y)</span><br><span class="line">    <span class="keyword">global</span> Xh</span><br><span class="line">    <span class="keyword">global</span> Yh</span><br><span class="line">    Xh = x - x2</span><br><span class="line">    Yh = y - y2</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">transform</span>(<span class="params">w_attr</span>):</span></span><br><span class="line">    funcs = w_attr.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> func <span class="keyword">in</span> funcs:</span><br><span class="line">        func_name = func[<span class="number">0</span>: func.find(<span class="string">&#x27;(&#x27;</span>)]</span><br><span class="line">        <span class="keyword">if</span> func_name == <span class="string">&#x27;scale&#x27;</span>:</span><br><span class="line">            <span class="keyword">global</span> scale</span><br><span class="line">            scale = (<span class="built_in">float</span>(func[func.find(<span class="string">&#x27;(&#x27;</span>) + <span class="number">1</span>: -<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>]),</span><br><span class="line">                     -<span class="built_in">float</span>(func[func.find(<span class="string">&#x27;(&#x27;</span>) + <span class="number">1</span>: -<span class="number">1</span>].split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>]))</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readPathAttrD</span>(<span class="params">w_attr</span>):</span></span><br><span class="line">    ulist = w_attr.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> ulist:</span><br><span class="line">        <span class="comment"># print(&quot;now cmd:&quot;, i)</span></span><br><span class="line">        <span class="keyword">if</span> i.isdigit() <span class="keyword">or</span> i.isalpha():</span><br><span class="line">            <span class="keyword">yield</span> <span class="built_in">float</span>(i)</span><br><span class="line">        <span class="keyword">elif</span> i[<span class="number">0</span>].isalpha():</span><br><span class="line">            <span class="keyword">yield</span> i[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">yield</span> <span class="built_in">float</span>(i[<span class="number">1</span>:])</span><br><span class="line">        <span class="keyword">elif</span> i[-<span class="number">1</span>].isalpha():</span><br><span class="line">            <span class="keyword">yield</span> <span class="built_in">float</span>(i[<span class="number">0</span>: -<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">elif</span> i[<span class="number">0</span>] == <span class="string">&#x27;-&#x27;</span>:</span><br><span class="line">            <span class="keyword">yield</span> <span class="built_in">float</span>(i)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawSVG</span>(<span class="params">filename, w_color</span>):</span></span><br><span class="line">    <span class="keyword">global</span> first</span><br><span class="line">    SVGFile = <span class="built_in">open</span>(filename, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    SVG = BeautifulSoup(SVGFile.read(), <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">    Height = <span class="built_in">float</span>(SVG.svg.attrs[<span class="string">&#x27;height&#x27;</span>][<span class="number">0</span>: -<span class="number">2</span>])</span><br><span class="line">    Width = <span class="built_in">float</span>(SVG.svg.attrs[<span class="string">&#x27;width&#x27;</span>][<span class="number">0</span>: -<span class="number">2</span>])</span><br><span class="line">    transform(SVG.g.attrs[<span class="string">&#x27;transform&#x27;</span>])</span><br><span class="line">    <span class="keyword">if</span> first:</span><br><span class="line">        te.setup(height=Height, width=Width)</span><br><span class="line">        te.setworldcoordinates(-Width / <span class="number">2</span>, <span class="number">300</span>, Width -</span><br><span class="line">                               Width / <span class="number">2</span>, -Height + <span class="number">300</span>)</span><br><span class="line">        first = <span class="literal">False</span></span><br><span class="line">    te.tracer(<span class="number">100</span>)</span><br><span class="line">    te.pensize(<span class="number">1</span>)</span><br><span class="line">    te.speed(Speed)</span><br><span class="line">    te.penup()</span><br><span class="line">    te.color(w_color)</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> SVG.find_all(<span class="string">&#x27;path&#x27;</span>):</span><br><span class="line">        attr = i.attrs[<span class="string">&#x27;d&#x27;</span>].replace(<span class="string">&#x27;\n&#x27;</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        f = readPathAttrD(attr)</span><br><span class="line">        lastI = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">            <span class="keyword">if</span> i == <span class="string">&#x27;M&#x27;</span>:</span><br><span class="line">                te.end_fill()</span><br><span class="line">                Moveto(<span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">                te.begin_fill()</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="string">&#x27;m&#x27;</span>:</span><br><span class="line">                te.end_fill()</span><br><span class="line">                Moveto_r(<span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">                te.begin_fill()</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                Curveto(<span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                        <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                        <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">                lastI = i</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                Curveto_r(<span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                          <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                          <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">                lastI = i</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                Lineto(<span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">elif</span> i == <span class="string">&#x27;l&#x27;</span>:</span><br><span class="line">                Lineto_r(<span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">                lastI = i</span><br><span class="line">            <span class="keyword">elif</span> lastI == <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">                Curveto(i * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                        <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                        <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">elif</span> lastI == <span class="string">&#x27;c&#x27;</span>:</span><br><span class="line">                Curveto_r(i * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                          <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>],</span><br><span class="line">                          <span class="built_in">next</span>(f) * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">elif</span> lastI == <span class="string">&#x27;L&#x27;</span>:</span><br><span class="line">                Lineto(i * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">            <span class="keyword">elif</span> lastI == <span class="string">&#x27;l&#x27;</span>:</span><br><span class="line">                Lineto_r(i * scale[<span class="number">0</span>], <span class="built_in">next</span>(f) * scale[<span class="number">1</span>])</span><br><span class="line">    te.penup()</span><br><span class="line">    te.hideturtle()</span><br><span class="line">    te.update()</span><br><span class="line">    SVGFile.close()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">drawBitmap</span>(<span class="params">w_image</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Reducing the colors...&#x27;</span>)</span><br><span class="line">    Z = w_image.reshape((-<span class="number">1</span>, <span class="number">3</span>))</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># convert to np.float32</span></span><br><span class="line">    Z = np.float32(Z)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># define criteria, number of clusters(K) and apply kmeans()</span></span><br><span class="line">    criteria = (cv2.TERM_CRITERIA_EPS, <span class="number">10</span>, <span class="number">1.0</span>)</span><br><span class="line">    <span class="keyword">global</span> K</span><br><span class="line">    ret, label, center = cv2.kmeans(</span><br><span class="line">        Z, K, <span class="literal">None</span>, criteria, <span class="number">10</span>, cv2.KMEANS_RANDOM_CENTERS)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># Now convert back into uint8, and make original image</span></span><br><span class="line">    center = np.uint8(center)</span><br><span class="line">    <span class="built_in">print</span>(center)</span><br><span class="line">    res = center[label.flatten()]</span><br><span class="line">    res = res.reshape(w_image.shape)</span><br><span class="line">    no = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> center:</span><br><span class="line">        sys.stdout.write(<span class="string">&#x27;\rDrawing: %.2f%% [&#x27;</span> % (</span><br><span class="line">            no / K * <span class="number">100</span>) + <span class="string">&#x27;#&#x27;</span> * no + <span class="string">&#x27; &#x27;</span> * (K - no) + <span class="string">&#x27;]&#x27;</span>)</span><br><span class="line">        no += <span class="number">1</span></span><br><span class="line">        res2 = cv2.inRange(res, i, i)</span><br><span class="line">        res2 = cv2.bitwise_not(res2)</span><br><span class="line">        <span class="comment">#print(i)</span></span><br><span class="line">        res2 = res</span><br><span class="line">        cv2.imwrite(<span class="string">&#x27;.tmp.bmp&#x27;</span>, res2)</span><br><span class="line">        <span class="comment">#转成矢量图，保存成.svg格式</span></span><br><span class="line">        os.system(<span class="string">&#x27;potrace .tmp.bmp -s --flat&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        drawSVG(<span class="string">&#x27;.tmp.svg&#x27;</span>, <span class="string">&#x27;#%02x%02x%02x&#x27;</span> % (i[<span class="number">2</span>], i[<span class="number">1</span>], i[<span class="number">0</span>]))</span><br><span class="line">    <span class="comment">#os.remove(&#x27;.tmp.bmp&#x27;)</span></span><br><span class="line">    <span class="comment">#os.remove(&#x27;.tmp.svg&#x27;)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;\n\rFinished, close the window to exit.&#x27;</span>)</span><br><span class="line">    te.done()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    paser = argparse.ArgumentParser(</span><br><span class="line">        description=<span class="string">&quot;Convert an bitmap to SVG and use turtle libray to draw it.&quot;</span>)</span><br><span class="line">    paser.add_argument(<span class="string">&#x27;filename&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,</span><br><span class="line">                       <span class="built_in">help</span>=<span class="string">&#x27;The file(*.jpg, *.png, *.bmp) name of the file you want to convert.&#x27;</span>)</span><br><span class="line">    paser.add_argument(</span><br><span class="line">        <span class="string">&quot;-c&quot;</span>, <span class="string">&quot;--color&quot;</span>, <span class="built_in">help</span>=<span class="string">&quot;How many colors you want to draw.(If the number is too large that the program may be very slow.)&quot;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">32</span>)</span><br><span class="line">    args = paser.parse_args()</span><br><span class="line">    K = args.color</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        bitmapFile = <span class="built_in">open</span>(args.filename, mode=<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="built_in">print</span>(__file__ + <span class="string">&#x27;: error: The file is not exists.&#x27;</span>)</span><br><span class="line">        quit()</span><br><span class="line">    <span class="keyword">if</span> os.path.splitext(args.filename)[<span class="number">1</span>].lower() <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">&#x27;.jpg&#x27;</span>, <span class="string">&#x27;.bmp&#x27;</span>, <span class="string">&#x27;.png&#x27;</span>]:</span><br><span class="line">        <span class="built_in">print</span>(__file__ + <span class="string">&#x27;: error: The file is not a bitmap file.&#x27;</span>)</span><br><span class="line">        quit()</span><br><span class="line">    bitmap = cv2.imread(args.filename)</span><br><span class="line">    <span class="comment">#if bitmap.shape[0] &gt; 240:</span></span><br><span class="line">    <span class="comment">#    bitmap = cv2.resize(bitmap,(500,200))</span></span><br><span class="line">    <span class="comment">#    bitmap = cv2.resize(bitmap, (int(bitmap.shape[1] * (</span></span><br><span class="line">    <span class="comment">#        (80 - 50) / bitmap.shape[0])), 80 - 50))</span></span><br><span class="line">    <span class="comment">#print(bitmap.shape[1])</span></span><br><span class="line">    drawBitmap(bitmap)</span><br></pre></td></tr></table></figure>
<h1 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h1><p>参考：「涂寐」<a href="https://blog.csdn.net/weixin_46318141/article/details/122841674">https://blog.csdn.net/weixin_46318141/article/details/122841674</a></p>
<p>参考：「林雪飞」<a href="https://blog.csdn.net/qq_39096769/article/details/105212737">https://blog.csdn.net/qq_39096769/article/details/105212737</a></p>
<p>参考：「远洋之帆」<a href="https://blog.csdn.net/liangwqi/article/details/103201455">https://blog.csdn.net/liangwqi/article/details/103201455</a></p>
<p>视频地址：<a href="https://www.bilibili.com/video/av20349733?share_medium=android&amp;share_source=copy_link&amp;bbid=37902872-DA4A-4D5D-878B-AEE788048F4217066infoc&amp;ts=1533854267282">https://www.bilibili.com/video/av20349733?share_medium=android&amp;share_source=copy_link&amp;bbid=37902872-DA4A-4D5D-878B-AEE788048F4217066infoc&amp;ts=1533854267282</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E5%8D%95%E7%89%87%E6%9C%BA%E4%B8%8EHC-05%E8%93%9D%E7%89%99%E6%A8%A1%E5%9D%97%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<p>@<a href="单片机与HC-05蓝牙模块通信">TOC</a></p>
<h1 id="一、写在最前面"><a href="#一、写在最前面" class="headerlink" title="一、写在最前面"></a>一、写在最前面</h1><p>与物院、材院的同学一起，设计由霍尔元件、电磁铁和单片机等元素构成的水污染测试系统，通过自学完成单片机与HC-05蓝牙模块通信板块以及系统前端页面设计，获得全国物理实验三等奖、湖北省物理实验创新设计竞赛二等奖。<br>感谢@周 一个下午外加三晚上的单片机讲解，@队友们提供的物理实验的机会，@的APP前端设计</p>
<h1 id="二、相关介绍"><a href="#二、相关介绍" class="headerlink" title="二、相关介绍"></a>二、相关介绍</h1><p>本实验以树莓派开发板作为控制板并加以5V的直流稳压电源，通过UART库初始化树莓派的单片机的串口，再使用初始化单片机的串口连接HC-05蓝牙模块，将单片机测试的电压值处理后通过蓝牙无线通信传输至手机，最后手机通过无线通信控制单片机的继电器从而改变电路中的净化功能。<br>树莓派Raspberry Pi Pico 是一款搭载了 RP 2040 芯片的微处理器开发板，搭载双核 ARM Cortex M0+ 处理器，运行频率 133 MHz，内置 264 KB 的片上 RAM，可通过专用 QSPI 总线支持最高 16 MB 的片外闪存，DMA 控制器，外挂内插器和整数除法器，2 个 SPI、2 个 I2C、2 个 UART，16 个 PWM 通道，主机和设备支持的 USB 1.1，8 个树莓派可编程 I/O 状态，支持 UF2 的 USB 大容量存储启动模式。开发板上有30个GPIO接口，使用python的第三方库machine进行对各个引脚的控制，并通过GPIO26接口实现模拟信号的输入，即待测电路的电压值。<br><img src="https://img-blog.csdnimg.cn/20210617121048804.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>HC-05蓝牙模块，是一个蓝牙转串口转换器，可以连接微控制器的其他设备，允许它们进行无线蓝牙通信。HC-05的主要工作是为了添加双向（全双工）的无线功能。它可以用于两个具有串行功能的微控制器之间的通信，也可以用于通过微控制性控制蓝牙设备的功能，反之亦然。模块启动后，任何蓝牙设备都可以发现它。在这里，我们通过其将单片机与手机建立连接，之后数据通过HC-05传输，并转换为串行流，然后由模块连接的控制器读取该串行流，与从控制器发送数据给蓝牙的方法相反。</p>
<h1 id="三、电路"><a href="#三、电路" class="headerlink" title="三、电路"></a>三、电路</h1><p>（1）建立电路<br>我们通过杜邦线分别将树莓派的GPIO与测试电路、HC-05蓝牙模块、5V直流稳压电源、CLR元件等信号进行连接。预测电路的待测电压及GNU分别连接，向单片机输入电压等模拟信号；由外部电源给单片机供电，运行烧入单片机的程序；同时将串口模块输出信号3V3（OUT）与HC-05蓝牙模块连接起来，实现蓝牙通信功能；CLR元件能对电路实现通断控制，从而实现复位功能。<br>单片机串口模块 —————————— 测试电路<br>GPIO26 ————————————————— 正极<br>GND —————————————————— 负极</p>
<p>单片机串口模块 ——————— HC-05蓝牙模块<br>3V3OUT ————————————————— VCC<br>GND ——————————————————— GND<br>GPIO0（TXD） —————————————— RXD<br>GPIO1（RXD） —————————————— TXD</p>
<p>单片机串口模块 —————————— 外部电源<br>VSYS —————————————————— VCC<br>GND —————————————————— GUN</p>
<p>单片机串口模块 —————————— CLR元件<br>3V3OUT ————————————————— 一端<br>GND —————————————————— 另一端</p>
<p>（2）升级安装蓝牙相关软件包，添加pi用户到蓝牙组，并重启；<br>打开PC端串口工具，由于此时默认波特率为38400，故将软件端波特率选项选为38400。此时可以在命令窗口发送命令，以 “回车”即换行结尾。输入 AT，再按回车换行，点击发送，此时接收端的窗口会收到一条OK指令，说明通信成功。之后我们对波特率进行设置。在初次调试过程中，我们将波特率设置为可以和手机通信的波特率9600bits/s。发送指令AT+UART=9600,0,0换行，将设置波特率为9600，停止位是1位，奇偶效验位没有（none）。最后设置配对码。发送指令AT+PSWD=<1234>换行，将配对码设置为1234；发送指令AT+PSWD?换行，显示配对码为1234，说明设置成功。</p>
<p>（3）HC-05蓝牙模块与手机连接，查看设备名；<br>进入蓝牙模式，HC-05蓝牙模块的指示灯会一秒钟闪两下。通过手机APPSPP蓝牙串口连接蓝牙。连接成功后，灯变成连闪两下。之后，我们将通过蓝牙模块连接手机进行无限通信。将USB串口拔下，再直接插上（这次不用按小钮），便进入了自动连接模式。PC软件端波特率设置为9600，16进制显示，16进制发送。手机蓝牙串口APP端设置为HEX模式。就可以进行通信了。如果传输文本，那么PC端去掉 16进制显示和16进制发送的勾选，app端去掉HEX模式的勾选即可。<br>（4）编写能控制输出处理后模拟量的程序函数；<br>（5）编写蓝牙模块与手机蓝牙的测试程序，确保两个模块正常运行；<br>（6）编写完整程序，使得能通过蓝牙模块发送和接收模拟信号信息；<br>（7） 写了一个交互模块，单片机测试的电压值处理后通过蓝牙无线通信传输至手机，使得使用者能够通过手机获取污水有关信息；手机可以通过蓝牙传输的方式，发送给树莓派，最后根据选择模式控制单片机的继电器从而改变电路中的净化功能。<br><img src="https://img-blog.csdnimg.cn/20210617121147852.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title>开发中遇到问题如何更好地提问</title>
    <url>/2020/07/05/%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E9%97%AE%E9%A2%98%E5%A6%82%E4%BD%95%E6%9B%B4%E5%A5%BD%E5%9C%B0%E6%8F%90%E9%97%AE/</url>
    <content><![CDATA[<p>开发过程中遇到问题提问，让他人快速理解你的问题、同时如何在提问中学习成长<br>相关阅读链接: <a href="http://www.catb.org/~esr/faqs/smart-questions.html">How To Ask Questions The Smart Way</a></p>
 <span id="more"></span>
<h3 id="①Before-You-Ask"><a href="#①Before-You-Ask" class="headerlink" title="①Before You Ask"></a>①Before You Ask</h3><p>Before asking a technical question by e-mail, or in a newsgroup, or on a website chat board, do the following:<br>1.Try to find an answer by searching the archives of the forum or mailing list you plan to post to.<br>2.Try to find an answer by searching the Web.<br>3.Try to find an answer by reading the manual.<br>4.Try to find an answer by reading a FAQ.<br>5.Try to find an answer by inspection or experimentation.<br>6.Try to find an answer by asking a skilled friend.<br>7.If you’re a programmer, try to find an answer by reading the source code.</p>
<h3 id="②Stack-Overflow"><a href="#②Stack-Overflow" class="headerlink" title="②Stack Overflow"></a>②Stack Overflow</h3><p>Search, then ask on Stack Exchange<br>Start with a Google search，the Stack Exchange sites are often near the top of the search results.<br>  If you didn’t find anything through Google, search again on the specific site most relevant to your question (see below). Searching with tags can help narrow down the results.<br>If you still didn’t find anything, post your question on the one site where it’s most on-topic.<br>add tags that are related to the substance of your question (particularly the name of the programming language, operating system, or library you’re having trouble with). </p>
<h3 id="③Be-precise-and-informative-about-your-problem"><a href="#③Be-precise-and-informative-about-your-problem" class="headerlink" title="③Be precise and informative about your problem"></a>③Be precise and informative about your problem</h3><p>1.Describe the symptoms of your problem or bug carefully and clearly.<br>2.Describe the environment in which it occurs (machine, OS, application, whatever). Provide your vendor’s distribution and release level (e.g.: “Fedora Core 7”, “Slackware 9.1”, etc.).<br>3.Describe the research you did to try the problem before you asked the question.<br>4.Describe the diagnostic steps you took to try and pin down the problem yourself.<br>5.Describe any possibly relevant recent changes in your computer or software configuration.<br>If at all possible, provide a way to reproduce the problem in a controlled environment.</p>
<h3 id="④Describe-the-problem’s-symptoms-not-your-guesses"><a href="#④Describe-the-problem’s-symptoms-not-your-guesses" class="headerlink" title="④Describe the problem’s symptoms, not your guesses"></a>④Describe the problem’s symptoms, not your guesses</h3><p>If you feel it’s important to state your guess, clearly label it as such and describe why that answer isn’t working for you.<br>Example：<br>I’m getting back-to-back SIG11 errors on kernel compiles, and suspect a hairline crack on one of the motherboard traces. What’s the best way to check for those?<br>Smarter:<br>My home-built K6/233 on an FIC-PA2007 motherboard (VIA Apollo VP2 chipset) with 256MB Corsair PC133 SDRAM starts getting frequent SIG11 errors about 20 minutes after power-on during the course of kernel compiles, but never in the first 20 minutes. Rebooting doesn’t restart the clock, but powering down overnight does. Swapping out all RAM didn’t help. The relevant part of a typical compile session log follows.</p>
<h3 id="⑤Describe-your-problem’s-symptoms-in-chronological-order"><a href="#⑤Describe-your-problem’s-symptoms-in-chronological-order" class="headerlink" title="⑤Describe your problem’s symptoms in chronological order"></a>⑤Describe your problem’s symptoms in chronological order</h3><p>The clues most useful in figuring out something that went wrong often lie in the events immediately prior. So, your account should describe precisely what you did, and what the machine and software did, leading up to the blowup. In the case of command-line processes, having a session log (e.g., using the script utility) and quoting the relevant twenty or so lines is very useful.<br>If the program that blew up on you has diagnostic options (such as -v for verbose), try to select options that will add useful debugging information to the transcript. try to choose a debug level that will inform rather than drowning the reader in junk.<br>If your account ends up being long (more than about four paragraphs), it might be useful to succinctly state the problem up top, then follow with the chronological tale. </p>
<h3 id="⑥Describe-the-goal-not-the-step"><a href="#⑥Describe-the-goal-not-the-step" class="headerlink" title="⑥Describe the goal, not the step"></a>⑥Describe the goal, not the step</h3><p>If you are trying to find out how to do something (as opposed to reporting a bug), begin by describing the goal. Only then describe the particular step towards it that you are blocked on.<br>Example：<br>How do I get the color-picker on the FooDraw program to take a hexadecimal RGB value?<br>Smarter:<br>I’m trying to replace the color table on an image with values of my choosing. Right now the only way I can see to do this is by editing each table slot, but I can’t get FooDraw’s color picker to take a hexadecimal RGB value.<br>The second version allows an answer that suggests a tool better suited to the task.</p>
<h3 id="中文翻译（部分更改）"><a href="#中文翻译（部分更改）" class="headerlink" title="中文翻译（部分更改）"></a>中文翻译（部分更改）</h3><p>①在问之前</p>
<p>在通过电子邮件、新闻组或网站聊天板询问技术问题之前，请执行以下操作:</p>
<p>1.通过搜索论坛的档案或计划发布到的邮件列表来找到答案。</p>
<p>2.在网上搜索答案。</p>
<p>3.通过阅读手册找到答案。</p>
<p>4.通过阅读常见问题来找到答案。</p>
<p>5.通过观察或实验找到答案。</p>
<p>6.向一个有经验的朋友寻求答案。</p>
<p>7.如果您是一名程序员，请尝试通过阅读源代码来找到答案。</p>
<p>②Stack Overflow(CSDN)</p>
<p>搜索，然后询问Stack Overflow（全球IT界最受欢迎的技术问答网站）。或者CSDN（对于初学者来说足够了)。</p>
<p>百度搜索时，CSDN相关问题的站点通常位于搜索结果的顶部。</p>
<p>如果没有通过百度找到想要的东西，再次搜索与你的问题最相关的特定网站。使用标签搜索可以帮助缩小搜索结果的范围。</p>
<p>如果仍然没有找到任何东西，把问题贴在最热门的网站上。</p>
<p>添加与问题的实质相关的标记(特别是编程语言、操作系统或有问题的库的名称)。</p>
<p>③精确描述关于你的问题</p>
<p>1.仔细清楚地描述问题或bug的症状。</p>
<p>2.描述它发生的环境(机器、操作系统、应用程序等)。提供你的供应商的发行和发布级别(例如:“Fedora Core 7”，“Slackware 9.1”等等)。</p>
<p>3.描述在你问这个问题之前，你为解决这个问题所做的研究。</p>
<p>4.描述一下你自己试图确定问题的诊断步骤。</p>
<p>5.请描述您的计算机或软件配置中最近可能发生的任何相关更改。</p>
<p>如果可能的话，提供一种在受控环境中重现问题的方法。</p>
<p>④描述问题的症状,而不是你的猜测</p>
<p>如果你觉得说出你的猜测很重要，就清楚地把它标出来，并说明为什么这个答案对你不合适。</p>
<p>例子:</p>
<p>我在内核编译中遇到了连续的SIG11错误，并怀疑在一个主板跟踪中出现了细微的裂纹。检查这些的最好方法是什么?</p>
<p>更好的表达:</p>
<p>我在一个ficc - pa2007主板(通过Apollo VP2芯片组)上自制的K6/233具有256MB的Corsair PC133 SDRAM，在内核编译过程中，在开机大约20分钟后开始频繁地出现SIG11错误，但在最初的20分钟内从未出现过。重启不会重启时钟，但夜间关机会。换出所有内存没有帮助。下面是典型编译会话日志的相关部分。</p>
<p>⑤按时间顺序描述你的问题的症状</p>
<p>最有用的线索往往是在事件发生之前。所以，你的账户应该准确地描述你做了什么，以及机器和软件做了什么，从而导致爆炸。对于命令行进程，使用会话日志(例如使用脚本工具)并引用相关的20行左右是非常有用的。</p>
<p>如果发生故障的程序具有诊断选项(例如-v表示verbose)，请尝试选择将有用的调试信息添加到记录的选项。试着选择一个能够通知读者的调试级别，而不是让读者陷入垃圾中。</p>
<p>如果你的叙述很长(超过四段)，那么在最上面简明地陈述问题，然后按照时间顺序叙述可能会很有用。</p>
<p>⑥描述的目标,而不是步骤</p>
<p>如果您试图找出如何做某事(与报告错误相反)，那么从描述目标开始。只有这样，你才能描述你被阻止的具体步骤。</p>
<p>例子:</p>
<p>我如何让颜色选择器在FooDraw程序采取一个十六进制RGB值?</p>
<p>更好的表达:</p>
<p>我试图用我选择的值替换图像上的颜色表。现在我能看到的唯一的方法是编辑每个表槽，但是我不能让FooDraw的颜色选择器取一个十六进制的RGB值。</p>
<p>第二个版本给出的答案是一种更适合这项任务的工具。</p>
]]></content>
      <categories>
        <category>复盘</category>
      </categories>
      <tags>
        <tag>其他</tag>
      </tags>
  </entry>
  <entry>
    <title>找比赛队友</title>
    <url>/2020/04/20/%E6%89%BE%E9%98%9F%E5%8F%8B/</url>
    <content><![CDATA[<p>Hi！这里是「小雨」。<br><img src="https://img-blog.csdnimg.cn/20210420174541443.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="「找队友」"><a href="#「找队友」" class="headerlink" title="「找队友」"></a>「找队友」</h2><p>各个专业什么比赛都行，跨校也行。</p>
 <span id="more"></span>
<h3 id="关于我："><a href="#关于我：" class="headerlink" title="关于我："></a>关于我：</h3><ul>
<li>华为杯数学建模国二、互联网+国铜、蓝桥杯国二、市场调研国三、物理实验国三。</li>
<li>有好奇心，并不断提升能力以满足前者</li>
<li>希望负责数据分析部分（大一开始参加数模，会一些模型。SPSS、MATLAB等软件有所涉及）</li>
<li>主要写代码。主攻Python。</li>
<li>会做软件原型图。产品需求分析、前后端均有涉猎。不会运维。但开发不是我的主方向。</li>
<li>写文案，答辩也行<h3 id="关于队友："><a href="#关于队友：" class="headerlink" title="关于队友："></a>关于队友：</h3>所期待的队友的充分且必要条件为</li>
</ul>
<p><strong>责任感强。有时间和精力，且愿意投入所合作的项目。</strong></p>
<p>如果还符合下面中的一项，项目期间零食不断QAQ</p>
<ul>
<li>可以帮我改bug（如果能指导我写代码就更帅了！！！</li>
<li>能力刚好互补；</li>
<li>丰富的比赛经历；</li>
</ul>
<h3 id="请联系我-QQ：598666122"><a href="#请联系我-QQ：598666122" class="headerlink" title="请联系我~ QQ：598666122"></a>请联系我~ QQ：598666122</h3>]]></content>
      <categories>
        <category>复盘</category>
      </categories>
      <tags>
        <tag>队友</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库入门</title>
    <url>/2020/10/19/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p>数据库基础</p>
 <span id="more"></span>
<h1 id="数据库基础"><a href="#数据库基础" class="headerlink" title="数据库基础"></a>数据库基础</h1><h2 id="数据库简单介绍"><a href="#数据库简单介绍" class="headerlink" title="数据库简单介绍"></a>数据库简单介绍</h2><p>早期数据库：层次数据库、网络数据库<br>目前：关系型数据库（MySQL）<br>存在编程接口，通过软件自动化处理数据<br>先学习SQL（基本操作接口，API），再学其他软件<br>增删改查<br>MySQL官网：下载DOWNLOAD、文档DOCUMENATION、<br>错误百度（mysql 1045：登录权限问题）<br>Navicat15，破解版，百度破解文档<br>SQLite（羽毛），MySQL（海豚）</p>
<h2 id="Navicat基本操作"><a href="#Navicat基本操作" class="headerlink" title="Navicat基本操作"></a>Navicat基本操作</h2><h3 id="新建数据库"><a href="#新建数据库" class="headerlink" title="新建数据库"></a>新建数据库</h3><p><img src="https://img-blog.csdnimg.cn/2020101911200839.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>utf8mb4（比utf8更广）<br>_general_ci</p>
<h3 id="常规操作"><a href="#常规操作" class="headerlink" title="常规操作"></a>常规操作</h3><p><img src="https://img-blog.csdnimg.cn/20201019112303360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201019112311452.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"></p>
<h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>%全部用户<br>右键，全部授予</p>
<h2 id="基本语句"><a href="#基本语句" class="headerlink" title="基本语句"></a>基本语句</h2><p>封装的好处：<br>可以在不同的底层数据库中执行</p>
<h2 id="学习思路"><a href="#学习思路" class="headerlink" title="学习思路"></a>学习思路</h2><p>学习设计和创建数据库<br>大量时间去实践，看得舒服，用的方便</p>
<p>先结合实例，模仿思路</p>
]]></content>
      <categories>
        <category>基础</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Navicat</tag>
        <tag>MySql</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E6%95%B0%E6%8D%AE%E5%BA%93%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9FMySQL/</url>
    <content><![CDATA[<p>@<a href="数据库管理系统MySQL">TOC</a></p>
<h1 id="一、MySQL的介绍"><a href="#一、MySQL的介绍" class="headerlink" title="一、MySQL的介绍"></a>一、MySQL的介绍</h1><h2 id="2、数据处理流程"><a href="#2、数据处理流程" class="headerlink" title="2、数据处理流程"></a>2、数据处理流程</h2><ul>
<li>数据采集：将产生各种数据进行统一化的存储</li>
<li>数据存储：将数据存储数据仓库中</li>
<li>数据处理：使用SQL开发语言开发程序对数据进行处理</li>
<li>数据应用：将处理好的结果进行 应用</li>
</ul>
<h2 id="3、数据存储及处理"><a href="#3、数据存储及处理" class="headerlink" title="3、数据存储及处理"></a>3、数据存储及处理</h2><ul>
<li>存储的形式：文件<ul>
<li>不能满足企业中对于数据处理需求</li>
</ul>
</li>
<li>工作需求：更加规范的数据存储、处理<ul>
<li>早期：Excel【表格，聚合统计分析，图表】</li>
<li>问题<ul>
<li>Excel能承载的数据量大小：MB<ul>
<li>实际工作中要处理的数据大小：GB</li>
</ul>
</li>
<li>Excel中提供的功能不能满足对数据处理的需求<ul>
<li>支持开发不同的功能</li>
<li>开发的方式不太友好</li>
</ul>
</li>
</ul>
</li>
<li>解决<ul>
<li>数据库管理系统</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="4、数据库管理系统"><a href="#4、数据库管理系统" class="headerlink" title="4、数据库管理系统"></a>4、数据库管理系统</h2><ul>
<li>功能<ul>
<li>专门用户数据存储、处理数据的工具</li>
</ul>
</li>
<li>特点<ul>
<li>承载数据量会更大</li>
<li>更加规范化</li>
<li>功能更加全面</li>
<li>开发接口更加优化：SQL</li>
</ul>
</li>
<li>应用场景<ul>
<li>网站后台中存储商品信息、订单信息、用户注册 信息</li>
</ul>
</li>
</ul>
<h2 id="5、MySQL介绍及概念"><a href="#5、MySQL介绍及概念" class="headerlink" title="5、MySQL介绍及概念"></a>5、MySQL介绍及概念</h2><ul>
<li><p>常见的数据库管理系统</p>
<ul>
<li>Oracle：Sun公司商业化数据库产品，性能功能是最强大，但是是收费的商业化产品</li>
<li>SQL Server：微软公司的产品，受Windows局限性比较大 ，市场占有率并不高，收费</li>
<li>MySQL：Sun公司的社区产品，体积小，速度快，总体使用的成本比较低</li>
</ul>
</li>
<li><p>MySQL的介绍</p>
<ul>
<li>典型的市场占有率是最高的数据库管理系统</li>
<li>在国内非常广泛<ul>
<li>所有网站后台的存储</li>
</ul>
</li>
</ul>
</li>
<li><p>概念</p>
<ul>
<li><p>数据库管理系统</p>
<ul>
<li>专门用户存储和处理数据【结构化数据】的工具</li>
<li>MySQL就是一个数据库管理系统</li>
</ul>
</li>
<li><p>结构化数据</p>
<ul>
<li>例如：表格，行和列是固定的</li>
<li>行和列是固定的结构，就是数据的格式存在一定的规律</li>
</ul>
</li>
<li><p>数据库：MySQL中用于管理和区分数据表的单元</p>
<ul>
<li>database</li>
<li>理解为对数据进行分类存放的划分</li>
<li>数据库1：存放用户的数据</li>
<li>数据库2：存放商品的数据</li>
<li>数据库3：存放订单的数据</li>
<li>类似于一个Excel文件<ul>
<li>人事：人事的Excel文件</li>
<li>财务：财务的Excel文件</li>
</ul>
</li>
</ul>
</li>
<li><p>表格：MySQL中用于在数据库中划分数据的单元</p>
<ul>
<li>将数据进行更细的划分</li>
<li>类似于一个Excel文件中会有多张表<ul>
<li>人事Excel文件 <ul>
<li>在职人员信息表</li>
<li>离职人员信息表</li>
</ul>
</li>
<li>财务Excel文件<ul>
<li>报销信息表</li>
<li>收入信息表</li>
<li>报税信息表</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>数据库管理系统与Excel对比</p>
<p>|           Excel            |      MySQL       |<br>| :————————————: | :———————: |<br>|       一个Excel文件        |    一个数据库    |<br>| 可以有多个Excel的sheet表格 | 可以有多张数据表 |<br>|        表格有行和列        |  表格中有行和列  |</p>
<ul>
<li>区别：<ul>
<li>MySQL功能更加强大</li>
<li>Excel的开发比较复杂</li>
<li>MySQL对数据进行处理：SQL</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>MySQL的使用</p>
<ul>
<li>SQL：开发语言，实现数据的存储以及分析管理</li>
</ul>
</li>
</ul>
<h1 id="二、MySQL及DataGrip部署"><a href="#二、MySQL及DataGrip部署" class="headerlink" title="二、MySQL及DataGrip部署"></a>二、MySQL及DataGrip部署</h1><h2 id="1、MySQL安装"><a href="#1、MySQL安装" class="headerlink" title="1、MySQL安装"></a>1、MySQL安装</h2><ul>
<li>参考MySQL安装文档实现安装</li>
</ul>
<h2 id="2、DataGrip的安装"><a href="#2、DataGrip的安装" class="headerlink" title="2、DataGrip的安装"></a>2、DataGrip的安装</h2><ul>
<li>功能：使用图形化界面的方式来操作MySQL，进行数据的管理</li>
<li>参考DataGrip安装文档实现安装</li>
</ul>
<h2 id="3、DataGrip连接MySQL"><a href="#3、DataGrip连接MySQL" class="headerlink" title="3、DataGrip连接MySQL"></a>3、DataGrip连接MySQL</h2><ul>
<li><p>创建一个连接，配置连接MySQL即可</p>
<ul>
<li><p>MySQL所在机器的地址和端口</p>
<ul>
<li>地址：localhost</li>
<li>端口：3306</li>
</ul>
</li>
<li><p>MySQL的连接驱动</p>
<ul>
<li>下载</li>
</ul>
</li>
<li><p>MySQL用户名和密码</p>
<figure class="highlight xquery"><table><tr><td class="code"><pre><span class="line">用户名<span class="built_in">：root</span></span><br><span class="line">密码：<span class="number">123456</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>MySQL连接地址属性</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">jdbc:mysql:<span class="regexp">//</span>localhost:<span class="number">3306</span>?serverTimezone=UTC</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>参考视频或者课件中的图片实现连接</p>
</li>
</ul>
<h1 id="三、SQL介绍及其规则"><a href="#三、SQL介绍及其规则" class="headerlink" title="三、SQL介绍及其规则"></a>三、SQL介绍及其规则</h1><h2 id="1、SQL的介绍"><a href="#1、SQL的介绍" class="headerlink" title="1、SQL的介绍"></a>1、SQL的介绍</h2><ul>
<li><p>Struct Qurey Language：结构化查询语言</p>
</li>
<li><p>一种编程语言，是一种命令，通过这种命令或者编程语言开发程序来实现数据处理</p>
<ul>
<li>MySQL使用SQL命令来管理MySQL中数据</li>
</ul>
</li>
<li><p>SQL是所有RDBMS【关系型数据库管理系统】通用语言</p>
<ul>
<li>在语法上有一点点区别</li>
</ul>
</li>
</ul>
<h2 id="2、SQL的分类"><a href="#2、SQL的分类" class="headerlink" title="2、SQL的分类"></a>2、SQL的分类</h2><ul>
<li><p>MySQL中的SQL根据不同的功能模块划分不同的命令的分类</p>
</li>
<li><p>DDL：数据定义语言</p>
<ul>
<li>如何管理我们的数据库和表</li>
<li>数据库的管理：创建、删除、切换<ul>
<li>学生信息数据库</li>
</ul>
</li>
<li>表的管理：创建、删除、清空、描述<ul>
<li>学生表</li>
<li>成绩表</li>
<li>学籍表</li>
</ul>
</li>
</ul>
</li>
<li><p>DML：数据操作语言</p>
<ul>
<li>如何管理表中的数据</li>
<li>对表中数据实现以下功能<ul>
<li>插入：insert</li>
<li>更改：update</li>
<li>删除：delete</li>
</ul>
</li>
<li>例如<ul>
<li>录入学生信息</li>
<li>更改学生信息</li>
<li>删除学生信息</li>
</ul>
</li>
</ul>
</li>
<li><p>DQL：数据查询语言</p>
<ul>
<li><p>实现对表中数据的查询和统计分析</p>
</li>
<li><p>我们在工作中60%的开发都是开发SQL，有90%都是在开发DQL</p>
</li>
<li><p>select</p>
</li>
</ul>
</li>
</ul>
<h2 id="3、SQL的规则"><a href="#3、SQL的规则" class="headerlink" title="3、SQL的规则"></a>3、SQL的规则</h2><ul>
<li><p>所有的SQL语句都需要以分号来作为结束符，表示这条命令结束了，可以提交运行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> databases;</span><br><span class="line"><span class="keyword">show</span> tables;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> mysql.user;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h1 id="四、SQL分析之DDL"><a href="#四、SQL分析之DDL" class="headerlink" title="四、SQL分析之DDL"></a>四、SQL分析之DDL</h1><h2 id="1、数据库管理"><a href="#1、数据库管理" class="headerlink" title="1、数据库管理"></a>1、数据库管理</h2><ul>
<li><p>创建</p>
<ul>
<li><p>功能：构建一个新的数据库</p>
</li>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database [ if <span class="keyword">not</span> <span class="keyword">exists</span> ] 数据库的名字;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<ul>
<li><p>创建一个新的数据库叫做：itcast01</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database itcast01;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>- 创建一个新的数据库：itcast02

  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> itcast02;</span><br></pre></td></tr></table></figure>


- if not exists：如果不存在的情况下，就创建，如果已经存在就不会创建

  - 功能：为了避免程序报错

  - 如果不加：数据库已存在，就会报错

  - 如果加了：数据库已存在，不会报错
</code></pre><ul>
<li><p>列举</p>
<ul>
<li><p>功能：用于列举当前MySQL中所有的数据库名称</p>
</li>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span>  databases;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>查看</p>
<ul>
<li><p>功能：查看当前所在的数据库</p>
</li>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> database();</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
</li>
</ul>
</li>
</ul>
<pre><code>- null表示我们当前不在任何一个数据库中
</code></pre><ul>
<li><p>切换</p>
<ul>
<li><p>功能：切换到某个数据库中</p>
</li>
<li><p>语法</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">use 数据库名称<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<ul>
<li><p>切换到itcast01这个数据库中</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use itcast01;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>- 切换到itcast02这个数据库中

  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">use itcast02;</span><br></pre></td></tr></table></figure>
</code></pre><ul>
<li><p>删除</p>
<ul>
<li><p>功能：删除已存在的一个数据库</p>
</li>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database [ if <span class="keyword">exists</span> ] 数据库名称;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<ul>
<li><p>删除itcast01这个数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span>  database itcast01;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<pre><code>- if exists ：如果存在，就删除，如果不存在就不删除

  - 功能：为了避免程序报错

  - 如果不加：数据库不存在，删除就会报错

  - 如果加了：数据库不存在，删除不会报错
</code></pre><h2 id="2、数据表管理"><a href="#2、数据表管理" class="headerlink" title="2、数据表管理"></a>2、数据表管理</h2><ul>
<li><p>数据类型</p>
<ul>
<li><p>定义：用于描述表中列的一个数据格式</p>
</li>
<li><p>类型：</p>
<ul>
<li><p>字符类型：中文、英文或者比较长的数字、日期都可以使用字符串来存储</p>
<ul>
<li><p>字符类型是万能的类型</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">&#x27;a&#x27;：这就是一个字符，一个数字、一个英文字母、一个符号&#x27;abc,<span class="number">1234</span>4&#x27;：这就是一个字符串，很多个字符构成一个整体</span><br></pre></td></tr></table></figure>
<ul>
<li>字符串表示的数字是不能参与计算的</li>
</ul>
</li>
<li><p>==只要是字符类型，就使用varchar（N）==</p>
<ul>
<li>N表示字符串的长度，只能大不能小</li>
<li>手机号码：varchar（11）<ul>
<li>varchar（20）：可以</li>
<li>varchar(10)：不可以</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>数字类型</p>
<ul>
<li>整数<ul>
<li>整形：int</li>
<li>==只要是整数就用：int==</li>
</ul>
</li>
<li>小数<ul>
<li>单精度：float</li>
<li>双精度：double</li>
<li>==只要是小数就用：double==</li>
</ul>
</li>
</ul>
</li>
<li><p>日期类型</p>
<ul>
<li>日期是一种特殊的格式</li>
<li>==date：用于存储年月日==<ul>
<li>yyyy-MM-dd</li>
<li>2020-01-01</li>
</ul>
</li>
<li>==datetime：用于存储年月日，时分秒==<ul>
<li>yyyy-MM-dd HH:mm:ss</li>
<li>2020-01-01 12:30:50</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>创建</p>
<ul>
<li><p>功能：在某个数据库中创建一张，定义表的结构【表中哪些列以及每一列的类型】</p>
</li>
<li><p>语法</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">create</span> <span class="selector-tag">table</span> <span class="selector-attr">[if not exists]</span> <span class="selector-attr">[数据库名称.]</span>表的名称(   col1 type1,   col2 type2,   col3 type3,   ……   colN typeN);</span><br></pre></td></tr></table></figure>
<ul>
<li>注意事项<ul>
<li>所有的符号都是英文的，不允许出现中文符号</li>
<li>除了最后一行就是结尾括号的前一号不用加逗号，其他的都要加逗号</li>
<li>每一列都要指定对应的类型<ul>
<li>字符串：varchar(N)</li>
<li>整数：int</li>
<li>小数：double</li>
<li>年月日日期：date</li>
<li>年月日时分秒：datetime</li>
</ul>
</li>
<li>如果不加数据库名称，表示在当前数据库中创建表</li>
</ul>
</li>
</ul>
</li>
<li><p>测试</p>
<ul>
<li><p>创建一张学生表student：学生学号、学生姓名、学生年龄、学生性别</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> student(   stuid <span class="type">varchar</span>(<span class="number">10</span>),   stuname <span class="type">varchar</span>(<span class="number">10</span>),   age <span class="type">int</span>,   sex <span class="type">varchar</span>(<span class="number">2</span>));</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>列举</p>
<ul>
<li><p>功能：列举当前数据库中所有的表</p>
</li>
<li><p>语法</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>描述</p>
<ul>
<li><p>功能：查看一张表的详细的结构信息</p>
</li>
<li><p>语法：</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">desc  [dbname.]tbname<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">desc</span> student;<span class="keyword">desc</span> bigdata.student;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>删除</p>
<ul>
<li><p>功能：删除一张不需要再使用的表</p>
</li>
<li><p>语法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">drop <span class="selector-tag">table</span> <span class="selector-attr">[ if exists ]</span> <span class="selector-attr">[dbname.]</span>tbname;</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">exists</span> student;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h1 id="五、SQL分析之DML"><a href="#五、SQL分析之DML" class="headerlink" title="五、SQL分析之DML"></a>五、SQL分析之DML</h1><h2 id="1、创建表格"><a href="#1、创建表格" class="headerlink" title="1、创建表格"></a>1、创建表格</h2><ul>
<li><p>创建一个商品的分类表：category</p>
<ul>
<li>分类编号：cid</li>
<li>分类名称：cname</li>
</ul>
</li>
<li><p>创建语句</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> category(  cid <span class="type">varchar</span>(<span class="number">5</span>),  cname <span class="type">varchar</span>(<span class="number">10</span>));</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2、插入数据"><a href="#2、插入数据" class="headerlink" title="2、插入数据"></a>2、插入数据</h2><ul>
<li><p>功能：写入一条数据进入数据表</p>
</li>
<li><p>关键字：insert</p>
</li>
<li><p>语法</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">insert</span> into tbname(co<span class="number">11</span>,col<span class="number">2</span>,col<span class="number">3</span>……)  values(value<span class="number">1</span>,value<span class="number">2</span>,value<span class="number">3</span>……);</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> category(cid,cname) <span class="keyword">values</span>(<span class="string">&#x27;c001&#x27;</span>,<span class="string">&#x27;电器&#x27;</span>);<span class="keyword">insert</span> <span class="keyword">into</span> category(cname) <span class="keyword">values</span>(<span class="string">&#x27;服饰&#x27;</span>);<span class="keyword">insert</span> <span class="keyword">into</span> category(cid,cname) <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;化妆品&#x27;</span>);<span class="keyword">insert</span> <span class="keyword">into</span> category <span class="keyword">values</span>(<span class="string">&#x27;c002&#x27;</span>,<span class="string">&#x27;书籍&#x27;</span>);<span class="keyword">insert</span> <span class="keyword">into</span> category <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;蔬菜&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查询某张表的所有内容</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> category;</span><br></pre></td></tr></table></figure>
</li>
<li><p>==注意事项==</p>
<ul>
<li>所给定的列的名称必须与后面的值一一对应</li>
<li>给定值的时候，除了数值类型或者null，其他类型必须加上单引号</li>
<li>给定的值不能超过创建表时定义的长度</li>
<li>如果要给表中的每一列都赋值，就可以不写列名</li>
</ul>
</li>
</ul>
<h2 id="3、更新数据"><a href="#3、更新数据" class="headerlink" title="3、更新数据"></a>3、更新数据</h2><ul>
<li><p>功能：修改数据表中的数据</p>
</li>
<li><p>关键字：update</p>
</li>
<li><p>语法</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">update 表的名称 <span class="keyword">set</span> col1 = <span class="keyword">new</span><span class="type">Value</span>,col2 = <span class="keyword">new</span><span class="type">Value</span> …… [where 条件];</span><br></pre></td></tr></table></figure>
</li>
<li><p>测试</p>
<ul>
<li><p>需求1：将服饰的分类id更改为c003</p>
<figure class="highlight ebnf"><table><tr><td class="code"><pre><span class="line"><span class="attribute">update  category set  cid</span> = <span class="string">&#x27;c003&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code>- 上面不能满足我们的需求，因为更改了其他不需要更改的数据
- 解决：加上where 条件
  - 只有满足where条件的数据才会被更改
  - 没有指定where条件，就更改所有数据
</code></pre><ul>
<li><p>需求2：将服饰的分类id更改为c004</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> category <span class="keyword">set</span> cid = <span class="string">&#x27;c004&#x27;</span> <span class="keyword">where</span> cname = <span class="string">&#x27;服饰&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>需求3：将化妆品的分类id更改为c001，并且将分类名称更改为化妆</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> category <span class="keyword">set</span> cid=<span class="string">&#x27;c001&#x27;</span>,cname=<span class="string">&#x27;化妆&#x27;</span> <span class="keyword">where</span> cname = <span class="string">&#x27;化妆品&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>需求4：将所有 c003的分类名称更改为笔记本</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> category <span class="keyword">set</span> cname = <span class="string">&#x27;笔记本&#x27;</span> <span class="keyword">where</span> cid = <span class="string">&#x27;c003&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>==注意：==</p>
<ul>
<li>更改的列的新的值必须与列的类型相符</li>
<li>新的值不能超过这一列的长度</li>
</ul>
</li>
</ul>
<h2 id="4、删除数据"><a href="#4、删除数据" class="headerlink" title="4、删除数据"></a>4、删除数据</h2><ul>
<li><p>功能：删除数据表中的数据</p>
</li>
<li><p>关键字：delete</p>
</li>
<li><p>语法</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表的名称  [<span class="keyword">where</span> 条件];</span><br></pre></td></tr></table></figure>
<ul>
<li><p>如果不加where条件，会删除整张表所有的数据</p>
</li>
<li><p>where 条件：符合条件的数据将会被删除</p>
</li>
<li><p>需求1：删除所有分类名称为笔记本的分类数据</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> category <span class="keyword">where</span> cname = <span class="string">&#x27;笔记本&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>需求2：删除分类id不为c001的分类的数据</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> category <span class="keyword">where</span> cid != <span class="string">&#x27;c001&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>清空表中所有的数据</p>
<ul>
<li><p>delete：用于删除表中的数据，一行一行删除</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> category;</span><br></pre></td></tr></table></figure>
</li>
<li><p>truncate：用于清空整张表的数据</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">truncate category<span class="comment">;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>区别</p>
<ul>
<li>delete：DML命令，一条一条删除</li>
<li>truncate：DDL命令，类似于将整张表删除，然后重新创建一张一样的空表</li>
</ul>
</li>
</ul>
<h1 id="六、SQL分析之DQL"><a href="#六、SQL分析之DQL" class="headerlink" title="六、SQL分析之DQL"></a>六、SQL分析之DQL</h1><h2 id="1、准备数据"><a href="#1、准备数据" class="headerlink" title="1、准备数据"></a>1、准备数据</h2><ul>
<li><p>创建测试数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> database if <span class="keyword">exists</span> bigdata;<span class="keyword">create</span> database bigdata;use bigdata;</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建商品表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> product( pid <span class="type">int</span>, pname <span class="type">varchar</span>(<span class="number">20</span>), price <span class="keyword">double</span>, category_id <span class="type">varchar</span>(<span class="number">32</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入商品测试数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">1</span>,<span class="string">&#x27;联想&#x27;</span>,<span class="number">5000</span>,<span class="string">&#x27;c001&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">2</span>,<span class="string">&#x27;海尔&#x27;</span>,<span class="number">3000</span>,<span class="string">&#x27;c001&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">3</span>,<span class="string">&#x27;雷神&#x27;</span>,<span class="number">5000</span>,<span class="string">&#x27;c001&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">4</span>,<span class="string">&#x27;杰克琼斯&#x27;</span>,<span class="number">800</span>,<span class="string">&#x27;c002&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">5</span>,<span class="string">&#x27;真维斯&#x27;</span>,<span class="number">200</span>,<span class="string">&#x27;c002&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">6</span>,<span class="string">&#x27;花花公子&#x27;</span>,<span class="number">440</span>,<span class="string">&#x27;c002&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">7</span>,<span class="string">&#x27;劲霸&#x27;</span>,<span class="number">2000</span>,<span class="string">&#x27;c002&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">8</span>,<span class="string">&#x27;香奈儿&#x27;</span>,<span class="number">800</span>,<span class="string">&#x27;c003&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">9</span>,<span class="string">&#x27;相宜本草&#x27;</span>,<span class="number">200</span>,<span class="string">&#x27;c003&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">10</span>,<span class="string">&#x27;面霸&#x27;</span>,<span class="number">5</span>,<span class="string">&#x27;c003&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">11</span>,<span class="string">&#x27;好想你枣&#x27;</span>,<span class="number">56</span>,<span class="string">&#x27;c004&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">12</span>,<span class="string">&#x27;香飘飘奶茶&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;c005&#x27;</span>);<span class="keyword">INSERT</span> <span class="keyword">INTO</span> product(pid,pname,price,category_id) <span class="keyword">VALUES</span>(<span class="number">13</span>,<span class="string">&#x27;海澜之家&#x27;</span>,<span class="number">1</span>,<span class="string">&#x27;c002&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建商品分类类：categroy</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> category(  category_id <span class="type">varchar</span>(<span class="number">10</span>),  category_name <span class="type">varchar</span>(<span class="number">100</span>));</span><br></pre></td></tr></table></figure>
</li>
<li><p>插入商品分类测试数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> category <span class="keyword">values</span>(<span class="string">&#x27;c001&#x27;</span>,<span class="string">&#x27;电脑&#x27;</span>);<span class="keyword">insert</span> <span class="keyword">into</span> category <span class="keyword">values</span>(<span class="string">&#x27;c002&#x27;</span>,<span class="string">&#x27;服装&#x27;</span>);<span class="keyword">insert</span> <span class="keyword">into</span> category <span class="keyword">values</span>(<span class="string">&#x27;c003&#x27;</span>,<span class="string">&#x27;化妆品&#x27;</span>);<span class="keyword">insert</span> <span class="keyword">into</span> category <span class="keyword">values</span>(<span class="string">&#x27;c004&#x27;</span>,<span class="string">&#x27;吃的&#x27;</span>);<span class="keyword">insert</span> <span class="keyword">into</span> category <span class="keyword">values</span>(<span class="string">&#x27;c005&#x27;</span>,<span class="string">&#x27;喝的&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="2、基本语法"><a href="#2、基本语法" class="headerlink" title="2、基本语法"></a>2、基本语法</h2><ul>
<li><p>功能：实现对于数据表中的数据的查询、统计分析、处理</p>
</li>
<li><p>关键字：select</p>
</li>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="number">1</span> <span class="keyword">from</span> <span class="number">2</span> <span class="keyword">where</span> <span class="number">3</span> <span class="keyword">group</span> <span class="keyword">by</span> <span class="number">4</span> <span class="keyword">having</span> <span class="number">5</span> <span class="keyword">order</span> <span class="keyword">by</span> <span class="number">6</span> limit <span class="number">7</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>1：用于决定查询的结果中有哪些列，给定哪些列，结果就会显示这些列</p>
<ul>
<li>写列的名字，多列用逗号隔开</li>
<li>*号代表所有的列</li>
</ul>
</li>
<li><p>2：用于表示查询哪张表，给定表的名字</p>
</li>
<li><p>3：条件查询，只有满足条件的数据才会被返回</p>
<ul>
<li>不满足条件的数据会被过滤掉，不会在结果中显示</li>
<li>符合where条件的行才会在结果中显示</li>
</ul>
</li>
<li><p>4：用于实现分组的，将多条数据按照某一列或者多列进行分组，划分到同一组中</p>
<ul>
<li>用于实现统计分析</li>
<li>语法：group by col</li>
</ul>
</li>
<li><p>5：用于实现分组后的条件过滤</p>
<ul>
<li>功能类似于where</li>
<li>满足having后的条件就会出现在结果中</li>
<li>不满足条件就会被过滤掉</li>
<li>与where的区别<ul>
<li>where：分组之前过滤</li>
<li>having：分组之后过滤</li>
</ul>
</li>
</ul>
</li>
<li><p>6：用于实现将查询的结果按照某一列或者多列进行排序</p>
<ul>
<li>order by col  [ asc | desc]</li>
<li>asc：升序排序</li>
<li>desc：降序排序</li>
<li>如果不指定，默认是升序排序</li>
</ul>
</li>
<li><p>7：用于实现分页输出</p>
</li>
</ul>
</li>
</ul>
<h2 id="3、简单查询"><a href="#3、简单查询" class="headerlink" title="3、简单查询"></a>3、简单查询</h2><ul>
<li><p>查询所有的商品信息</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查询所有的商品名称和价格</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> pname,price <span class="keyword">from</span> product;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查询所有的商品名称和价格，结果的列的名称分别为商品和价格</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> pname <span class="keyword">as</span> <span class="string">&#x27;商品&#x27;</span>, price <span class="keyword">as</span> <span class="string">&#x27;价格&#x27;</span> <span class="keyword">from</span> product;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>as：用于给列或者表取别名</li>
</ul>
<ul>
<li><p>查询所有商品的价格，并去掉重复价格</p>
<ul>
<li>查询所有商品价格</li>
</ul>
</li>
</ul>
<ul>
<li><p>去掉重复价格</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">distinct</span> price <span class="keyword">from</span> product;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>distinct：用于对列值进行去重</li>
</ul>
<ul>
<li><p>将所有商品的价格+10元显示</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> price <span class="keyword">as</span> <span class="string">&#x27;价格&#x27;</span> , price + <span class="number">10</span> <span class="keyword">as</span> <span class="string">&#x27;新价格&#x27;</span> <span class="keyword">from</span> product;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>直接对数值类型的列进行运算<ul>
<li>加：+</li>
<li>减：-</li>
<li>乘：*</li>
<li>除：/</li>
</ul>
</li>
</ul>
<h2 id="4、条件查询：where"><a href="#4、条件查询：where" class="headerlink" title="4、条件查询：where"></a>4、条件查询：where</h2><ul>
<li><p>功能：对于数据行的过滤</p>
</li>
<li><p>查询商品名称为“花花公子”的商品所有信息 </p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> pname = <span class="string">&#x27;花花公子&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查询价格为800商品  </p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price = <span class="number">800</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查询价格不是800的所有商品</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>  product <span class="keyword">where</span>  price != <span class="number">800</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查询商品价格大于60元的所有商品信息</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price &gt; <span class="number">60</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>等于：=</p>
</li>
<li><p>不等于：！=</p>
</li>
<li><p>小于：&lt;</p>
</li>
<li><p>大于：&gt;</p>
</li>
<li><p>小于等于：&lt;=</p>
</li>
<li><p>大于等于：&gt;=</p>
</li>
</ul>
<ul>
<li><p>查询商品价格在200到1000之间所有商品</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price &gt;= <span class="number">200</span> <span class="keyword">and</span> price &lt;= <span class="number">1000</span>;<span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price <span class="keyword">between</span> <span class="number">200</span> <span class="keyword">and</span> <span class="number">1000</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>and：并列关系，两个条件都要满足</li>
</ul>
<ul>
<li><p>查询商品价格是200或800的所有商品</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> price = <span class="number">200</span> or price = <span class="number">800</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>or：或者关系，两个条件满足其中一个即可</li>
</ul>
<ul>
<li><p>查询含有’霸’字的所有商品</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> pname <span class="keyword">like</span> <span class="string">&#x27;%霸%&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>%：任意多个字符</li>
</ul>
<ul>
<li><p>查询以’香’开头的所有商品</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> pname <span class="keyword">like</span> <span class="string">&#x27;香%&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查询第二个字为’想’的所有商品</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span>  product <span class="keyword">where</span> pname <span class="keyword">like</span> <span class="string">&#x27;_想%&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>_：表示一个字符</li>
</ul>
<ul>
<li><p>查询没有分类的商品</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> product <span class="keyword">values</span>(<span class="number">14</span>,<span class="string">&#x27;weiC 100&#x27;</span>,<span class="number">9.9</span>,<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
  <figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> category_id <span class="keyword">is</span> <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>查询有分类的商品</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> category_id <span class="keyword">is</span> not <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="5、聚合查询"><a href="#5、聚合查询" class="headerlink" title="5、聚合查询"></a>5、聚合查询</h2><ul>
<li><p>聚合函数</p>
<ul>
<li>函数：MySQL为你定义好的功能，你只要调用这个命令就可以实现聚合功能</li>
<li>MYSQL默认为我们提供的常见的聚合函数<ul>
<li>count(colname)：统计某一列的行数，统计个数，null不参与统计</li>
<li>sum（colname）：计算某一列的所有值的和，只能对数值类型求和，如果不是数值，结果为0</li>
<li>max（colname）：计算某一列的所有值中的最大值</li>
<li>min（colname）：计算某一列的所有值中的最小值</li>
<li>avg（colname）：计算某一列的平均值</li>
</ul>
</li>
</ul>
</li>
<li><p>查询商品的总条数 </p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(pid) <span class="keyword">as</span> <span class="string">&#x27;总个数&#x27;</span> <span class="keyword">from</span> product;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查询价格大于200商品的总条数 </p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(pid) <span class="keyword">as</span> <span class="string">&#x27;大于200的商品个数&#x27;</span> <span class="keyword">from</span> product <span class="keyword">where</span> price &gt; <span class="number">200</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查询分类为’c001’的所有商品价格的总和  </p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">sum</span>(price) <span class="keyword">as</span> totalPrice <span class="keyword">from</span> product <span class="keyword">where</span> category_id = <span class="string">&#x27;c001&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查询分类为’c002’所有商品的平均价格 </p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">avg</span>(price) <span class="keyword">as</span> <span class="string">&#x27;平均价格&#x27;</span> <span class="keyword">from</span> product <span class="keyword">where</span> category_id = <span class="string">&#x27;c002&#x27;</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查询商品的最大价格和最小价格  </p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">max</span>(price) <span class="keyword">as</span> <span class="string">&#x27;最大价格&#x27;</span>,<span class="built_in">min</span>(price) <span class="keyword">as</span> <span class="string">&#x27;最小价格&#x27;</span> <span class="keyword">from</span> product;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="6、分组查询：gourp-by"><a href="#6、分组查询：gourp-by" class="headerlink" title="6、分组查询：gourp by"></a>6、分组查询：gourp by</h2><ul>
<li><p>关键字：group by col …… having</p>
</li>
<li><p>功能：按照某些列进行分组，对分组后的数据进行处理，一般都会搭配聚合函数使用</p>
</li>
<li><p>统计各个分类商品的个数  </p>
<ul>
<li><p>分析过程</p>
<ul>
<li><p>结果长什么样？</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">category_id</span>			个数c<span class="number">001</span>				<span class="number">3</span>c<span class="number">002</span>				<span class="number">5</span>c<span class="number">003</span>				<span class="number">3</span>c<span class="number">004</span>				<span class="number">2</span>c<span class="number">005</span>				<span class="number">1</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>按照什么分组？</p>
<ul>
<li>按照category_id进行分组</li>
</ul>
</li>
<li><p>统计每组商品的个数</p>
<ul>
<li>count</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> category_id,<span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="string">&#x27;个数&#x27;</span> <span class="keyword">from</span> product <span class="keyword">group</span> <span class="keyword">by</span> category_id;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>统计查询每种分类中的商品的最大价格和最小价格</p>
<ul>
<li>分析<ul>
<li>结果长什么样？<ul>
<li>三列：分类的id        最大价格            最小价格</li>
</ul>
</li>
<li>按照分类的id进行分组</li>
<li>统计每个分组内部的最大价格和最小价格</li>
</ul>
</li>
</ul>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>      category_id,    <span class="built_in">max</span>(price) <span class="keyword">as</span> maxprice,    <span class="built_in">min</span>(price) <span class="keyword">as</span> minprice   <span class="keyword">from</span>     product  <span class="keyword">group</span> <span class="keyword">by</span>     category_id;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>统计各个分类商品的个数,且只显示个数大于1的数据</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> category_id,<span class="keyword">count</span>(*) <span class="keyword">as</span> <span class="string">&#x27;个数&#x27;</span> <span class="keyword">from</span> product <span class="keyword">group</span> <span class="keyword">by</span> category_id;</span><br></pre></td></tr></table></figure>
<ul>
<li>需要对分组后的结果再进行行的过滤</li>
<li>where：实现对数据行的过滤，指定条件<ul>
<li>这个需求中不能使用where</li>
<li>因为where会在group by之前执行，而个数是在分组之后才产生的列</li>
</ul>
</li>
<li>having：实现对数据行的过滤，指定条件，写法与where一致<ul>
<li>用于分组之后结果数据的过滤</li>
<li>对分组以后的 结果进行过滤</li>
</ul>
</li>
<li>什么时候用where，什么时候用having<ul>
<li>你要过滤的条件是分组之前就存在的，还是分组以后才产生的</li>
</ul>
</li>
</ul>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> category_id,count<span class="comment">(*) as &#x27;个数&#x27; from product group by category_id having count(*)</span> &gt; <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="7、排序查询：order-by"><a href="#7、排序查询：order-by" class="headerlink" title="7、排序查询：order by"></a>7、排序查询：order by</h2><ul>
<li><p>关键字：order by col…… 【 asc | desc】</p>
</li>
<li><p>功能：将结果按照某些列进行升序或者 降序的排序来显示</p>
<ul>
<li>默认是升序</li>
<li>asc：升序</li>
<li>desc：降序</li>
</ul>
</li>
</ul>
<ul>
<li><p>查询所有商品的信息，并按照价格降序排序</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">order</span> <span class="keyword">by</span>  price <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查询所有商品的信息，并按照价格排序(降序)，如果价格相同，以分类排序(降序)</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">order</span> <span class="keyword">by</span> price <span class="keyword">desc</span>,category_id <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>统计各个分类商品的个数 ，并按照个数降序排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> category_id,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="string">&#x27;个数&#x27;</span> <span class="keyword">from</span> product <span class="keyword">group</span> <span class="keyword">by</span> category_id;</span><br></pre></td></tr></table></figure>
</li>
</ul>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> category_id,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> <span class="string">&#x27;个数&#x27;</span> <span class="keyword">from</span> product <span class="keyword">group</span> <span class="keyword">by</span> category_id <span class="keyword">order</span> <span class="keyword">by</span> <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
<h2 id="8、分页查询：limit"><a href="#8、分页查询：limit" class="headerlink" title="8、分页查询：limit"></a>8、分页查询：limit</h2><ul>
<li><p>关键字：limit</p>
</li>
<li><p>功能：限制输出的结果</p>
</li>
<li><p>语法：limit M,N</p>
<ul>
<li>M：你想从第M+1条开始显示</li>
<li>N：显示N条</li>
<li>显示第一条到第三条<ul>
<li>M：0</li>
<li>N：3</li>
</ul>
</li>
<li>显示第9条到第10条<ul>
<li>M：8</li>
<li>N：2</li>
</ul>
</li>
<li>如果从第一条开始，M为0，可以省略不写<ul>
<li>limit N</li>
</ul>
</li>
</ul>
</li>
<li><p>查询product表的前5条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product limit <span class="number">0</span>,<span class="number">5</span>;<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product limit <span class="number">5</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查询product表的第4条和第5条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> product limit <span class="number">3</span>,<span class="number">2</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>查询商品个数最多的分类的前三名</p>
<ul>
<li><p>查询所有商品分类的商品个数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> category_id,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> numb  <span class="keyword">from</span> product <span class="keyword">group</span> <span class="keyword">by</span> category_id;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对上一步做排序</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> category_id,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> numb  <span class="keyword">from</span> product <span class="keyword">group</span> <span class="keyword">by</span> category_id <span class="keyword">order</span> <span class="keyword">by</span> numb <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>limit选择前三名</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> category_id,<span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> numb  <span class="keyword">from</span> product <span class="keyword">group</span> <span class="keyword">by</span> category_id <span class="keyword">order</span> <span class="keyword">by</span> numb <span class="keyword">desc</span> limit <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h2 id="9、结果保存"><a href="#9、结果保存" class="headerlink" title="9、结果保存"></a>9、结果保存</h2><ul>
<li><p>语法</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表的名称   <span class="keyword">select</span>……</span><br></pre></td></tr></table></figure>
</li>
<li><p>功能：将一条select语句运行的结果写入一张表中</p>
</li>
<li><p>注意：结果表的列一定要与Select语句的结果的列要匹配</p>
<ul>
<li>列的名称可以不一样</li>
<li>但是列的类型和个数必须一一对应</li>
</ul>
</li>
<li><p>统计各个分类商品的个数 ，并按照个数降序排序，并将结果进行保存</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  category_id,  <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> numbfrom  productgroup <span class="keyword">by</span>  category_idorder <span class="keyword">by</span>  numb <span class="keyword">desc</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--创建一张表用于存储分析的结果create table result (  cid varchar(100),  numb int);</span></span><br></pre></td></tr></table></figure>
  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--将分析的结果存储在这张表中insert into resultselect  category_id,  count(*) as numbfrom  productgroup by  category_idorder by  numb desc;</span></span><br></pre></td></tr></table></figure>
<h1 id="七、多表关系与查询"><a href="#七、多表关系与查询" class="headerlink" title="七、多表关系与查询"></a>七、多表关系与查询</h1><h2 id="1、多表关系"><a href="#1、多表关系" class="headerlink" title="1、多表关系"></a>1、多表关系</h2><ul>
<li>电商数据库<ul>
<li>用户表<ul>
<li>用户id、用户名称、用户手机……</li>
</ul>
</li>
<li>商品表<ul>
<li>商品id、商品名称、商品价格、库存、尺寸……</li>
</ul>
</li>
<li>订单表<ul>
<li>订单id、用户id、商品id、总金额、支付方式</li>
</ul>
</li>
</ul>
</li>
<li>员工数据库<ul>
<li>员工表<ul>
<li>员工id、员工姓名、员工性别、年龄、部门id……</li>
</ul>
</li>
<li>部门表<ul>
<li>部门id、部门名称、部门位置、部门领导……</li>
</ul>
</li>
<li>员工和部门之间的关系<ul>
<li>员工属于某一个部门</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>表与表之间通过某些列来实现关联，表现数据之间的关系</li>
</ul>
<h2 id="2、join"><a href="#2、join" class="headerlink" title="2、join"></a>2、join</h2><ul>
<li><p>功能：通过两张表之间关联的列，实现将两张表的列进行合并</p>
</li>
<li><p>关键字：A    join B   on  条件</p>
</li>
<li><p>语法</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询的两张表的哪些列  <span class="keyword">from</span> A表  <span class="keyword">join</span>  B表  <span class="keyword">on</span> 关联条件;</span><br></pre></td></tr></table></figure>
</li>
<li><p>本质：通过某种列的关系，将两张表的列进行了关联</p>
</li>
<li><p>需求1：查询每个商品的名称以及所属分类的名称</p>
<ul>
<li><p>分析结果长什么样？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">商品名称			分类名称联想					电脑……weiC 100			 吃的</span><br></pre></td></tr></table></figure>
</li>
<li><p>问题：商品名称 属于商品表，分类名称属于分类表</p>
</li>
<li><p>关系：分类id：categor_id</p>
</li>
<li><p>查询</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--将商品表与分类表通过分类id进行关联，并显示两张表的所有列select   a.*,   b.*from   product as a join category as b on a.category_id = b.category_id;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<pre><code><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  a.pname,  b.category_namefrom  product a <span class="keyword">join</span> category b <span class="keyword">on</span> a.category_id <span class="operator">=</span> b.category_id;</span><br></pre></td></tr></table></figure>
</code></pre><ul>
<li><p>需求2：统计每个分类名称对应的商品个数</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  b.category_name,  <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> numbfrom  product a <span class="keyword">join</span> category b <span class="keyword">on</span> a.category_id <span class="operator">=</span> b.category_idgroup <span class="keyword">by</span>  b.category_name;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>需求3：统计除了吃的分类以外的所有分类的商品个数，并显示个数最多的前三个分类</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>    b.category_name,   <span class="built_in">count</span>(<span class="operator">*</span>) <span class="keyword">as</span> numbfrom    product a <span class="keyword">join</span> category b <span class="keyword">on</span> a.category_id <span class="operator">=</span> b.category_idwhere   b.category_name <span class="operator">!=</span> <span class="string">&#x27;吃的&#x27;</span><span class="keyword">group</span> <span class="keyword">by</span>   b.category_nameorder <span class="keyword">by</span>   numb desclimit <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>分类</p>
<ul>
<li><p>inner join：内连接，inner可以省略</p>
<ul>
<li>关联条件中，两张表都有这个值，结果就有</li>
<li>类似于集合中两个集合的交集</li>
</ul>
</li>
<li><p>left outer join：左外连接，outer可以省略</p>
<ul>
<li><p>关联条件中，左表中有，结果就有</p>
</li>
<li><p>类似于集合中左表的全集</p>
<figure class="highlight n1ql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span>  a.pname,  b.category_namefrom  product a <span class="keyword">left</span> <span class="keyword">join</span> category b <span class="keyword">on</span> a.category_id = b.category_id;</span><br></pre></td></tr></table></figure>
<ul>
<li>左表是product，右表是category</li>
<li>如果product表中有一条数据的category_id是c006，而category中没有</li>
<li>结果有</li>
</ul>
</li>
</ul>
</li>
<li><p>right   outer join：右外连接，outer可以省略</p>
<ul>
<li><p>关联条件中，右表中有，结果就有</p>
</li>
<li><p>类似于集合中右表的全集</p>
<figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">select  <span class="keyword">a</span>.pname,  b.category_namefrom  product <span class="keyword">a</span> <span class="literal">right</span> join category b <span class="keyword">on</span> <span class="title">a</span>.<span class="title">category_id</span> = <span class="title">b</span>.<span class="title">category_id</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>左表是product，右表是category</li>
<li>如果category表中有一条数据的category_id是c006，而product中没有</li>
<li>结果有</li>
</ul>
</li>
</ul>
</li>
<li><p>full   join：全连接</p>
<ul>
<li>关联条件中，两张表任意一边有，结果就有</li>
<li>类似于集合中的两张表全集</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="3、子查询"><a href="#3、子查询" class="headerlink" title="3、子查询"></a>3、子查询</h2><ul>
<li><p>功能：在select语句中嵌套select语句</p>
</li>
<li><p>需求1：查询化妆品这个分类对应的所有商品信息</p>
<ul>
<li>分析结果长什么样？<ul>
<li>所有商品信息：product</li>
</ul>
</li>
<li>条件：化妆品这个分类对应的商品<ul>
<li>化妆品：category</li>
</ul>
</li>
<li>解决：先获取化妆品对应的分类id，然后根据分类id到商品表中查询这个分类id对应的商品</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> category_id <span class="keyword">from</span> category <span class="keyword">where</span> category_name = <span class="string">&#x27;化妆品&#x27;</span>;<span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> category_id = <span class="string">&#x27;c003&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>|</p>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> product <span class="keyword">where</span> category_id = (<span class="keyword">select</span> category_id <span class="keyword">from</span> category <span class="keyword">where</span> category_name = <span class="string">&#x27;化妆品&#x27;</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>先执行内层的SQL语句</li>
<li>然后执行外层的SQL语句</li>
</ul>
</li>
</ul>
<ul>
<li><p>需求2：查询相宜本草对应的分类的名称</p>
<ul>
<li>结果：显示分类的 名称：category</li>
<li>条件：相宜本草  pname：product</li>
</ul>
<figure class="highlight axapta"><table><tr><td class="code"><pre><span class="line">--先查询相宜本草对应的分类idselect category_id <span class="keyword">from</span> product <span class="keyword">where</span> pname = <span class="string">&#x27;相宜本草&#x27;</span>;--根据分类id到分类表中查询分类的名称<span class="keyword">select</span> category_name <span class="keyword">from</span> category <span class="keyword">where</span> category_id = <span class="string">&#x27;c003&#x27;</span>;|<span class="keyword">select</span> category_name <span class="keyword">from</span> category <span class="keyword">where</span> category_id = (<span class="keyword">select</span> category_id <span class="keyword">from</span> product <span class="keyword">where</span> pname = <span class="string">&#x27;相宜本草&#x27;</span>);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>join与子查询的应用场景</p>
<ul>
<li>如果你的查询结果包含多张表的列<ul>
<li>join</li>
</ul>
</li>
<li>如果你的查询结果只有一张表的列，条件来自于别的表<ul>
<li>子查询</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%981%E2%80%94%E2%80%94%E8%AF%BE%E5%90%8E%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<p>@<a href="数据挖掘1——课后习题">TOC</a></p>
<h1 id="部分习题"><a href="#部分习题" class="headerlink" title="部分习题"></a>部分习题</h1><h2 id="第一章：引论"><a href="#第一章：引论" class="headerlink" title="第一章：引论"></a>第一章：引论</h2><h3 id="1-3"><a href="#1-3" class="headerlink" title="1.3"></a>1.3</h3><blockquote>
<p>定义以下数据挖掘功能：特征化、区分、关联和相关性分析、分类、回归、聚类、离群点分析。使用你熟悉的现实生活中的数据库，给出每种数据挖掘功能的例子。</p>
</blockquote>
<ul>
<li><strong>特征化</strong>是目标类数据的一般特性或者特征的汇总。例如可以通过收集销量在前10%的物品的信息，再进行特征汇总。</li>
<li><strong>区分</strong>是将目标类数据对象的一般特性与一个或多个对比类对象的一般特性进行比较。例如将销量增加10%和销量减少30%的物品放在一起进行比较。</li>
<li><strong>频繁模式</strong>：频繁模式(frequent pattern)是在数据中频繁出现的模式。挖掘频繁模式导致发现数据中有趣的<strong>关联和相关性</strong>。</li>
<li><strong>关联</strong>是类与类之间的联接，使一个类知道另一个类的属性和方法。例如Apriori算法挖掘产生布尔关联规则所需频繁项集。</li>
<li><strong>相关性分析</strong>是两个或多个具备相关性的变量元素进行分析，从而衡量两个因素的的相关密切程度。例如分析人的身高和体重之间的关系。</li>
<li><strong>分类</strong>是找出描述和区分数据类或概念的模型，以便能够使用模型预测类标号位置的对象的类标号。例如找出描述销量增加30%和销量减少30%的物品，通过对其特征进行描述和建模，再对一个新的物品根据其特征将其分类。</li>
<li><strong>回归</strong>建立连续值函数模型，用于<strong>预测</strong>缺失的难以确定的数据值。例如补全未采样的数据。</li>
<li><strong>聚类</strong>根据最大化类内相似性、最小化类间相似性的原则分析数据对象，但<strong>不进行类标号</strong>。例如可以对客户数据进行分析，以簇形式表示每个购物目标群。</li>
<li><strong>离群点</strong>分析指研究那些与数据的一般行为或模型不一致的数据离散点，可以从中挖掘某种模式。例如使用离群点分析发现信用卡诈骗使用活动。</li>
</ul>
<h3 id="1-4"><a href="#1-4" class="headerlink" title="1.4"></a>1.4</h3><blockquote>
<p>给出一个例子，其中数据挖掘对于工商企业的成功是至关重要的。该工商企业需要什么数据挖掘功能？这种模式能够通过简单的查询处理或统计分析得到吗？</p>
</blockquote>
<p>超市营销系统中采用Apriori算法发掘潜藏在商品中的某些关系，细化商品的布局和摆放。超市对销售数据进行分析，能够统计商品的销售情况，找出商品间存在的内在关联，预测新商品是否畅销。根据顾客购买记录，使用序列模式挖掘顾客的消费变化，分析顾客的忠诚程度。电商平台基于用户的基本属性（年龄、性别）、购买能力、行为特征、兴趣爱好，使用数据挖掘技术构建客户画像，实现精准营销。</p>
<h3 id="1-5"><a href="#1-5" class="headerlink" title="1.5"></a>1.5</h3><blockquote>
<p>解释区分和分类、特征化和聚类、分类和回归之间的区别和相似之处。</p>
</blockquote>
<p><strong>区分</strong>指的是将目标类数据的一般特性和一个或多个对比类对象的一般特性进行比较，即找出两者之间的<strong>特征区别</strong>；<br><strong>分类</strong>指的是找出一种模型来描述和区分数据类型或概念，并<strong>预测类标号</strong>未知的对象的类标号。<br><strong>相似性</strong>在于他们都要对目标类数据对象进行处理和分析，输出结果都是类别特征，这些类别是预先指定的。<br><strong>区别</strong>：区分只是找出特征区别，分类是预测类标号。</p>
<p><strong>特征化</strong>是对目标类数据的的一般特性或特征的汇总，即在进行数据特征化时很清楚特征化的这些数据的特点是什么；<br><strong>聚类</strong>是分析数据对象，按照“最大化类内相似度、最小化类间相似度”的原则进行聚类或分组。即在不考虑明确标签分类的情况下进行分析。<br><strong>相似处</strong>在于刻画目标的总体特征。<br><strong>区别</strong>：特征化是对每一列特征维度，聚类是行与行之间元素维度。</p>
<p><strong>分类</strong>用于找出一种模型来描述和区分数据类型或概念，并预测类标号未知的对象的类标号；<br><strong>回归</strong>则是建立一个连续值函数模型，而不是离散、无序的标号。<br><strong>相似点</strong>：用函数进行预测。<br><strong>区别</strong>：分类是离散值，回归是连续值。</p>
<h2 id="第二章：认识数据"><a href="#第二章：认识数据" class="headerlink" title="第二章：认识数据"></a>第二章：认识数据</h2><h3 id="2-5"><a href="#2-5" class="headerlink" title="2.5"></a>2.5</h3><blockquote>
<p>简要概述如何计算被如下属性描述的对象的相异性。</p>
</blockquote>
<p><strong>（a）标称属性</strong><br>两个对象i和j之间的相异性根据不匹配率来计算：<br><img src="https://img-blog.csdnimg.cn/2daaba15ba544798902c19377ba09430.png" alt="请添加图片描述"><br>其中，p为刻画对象的属性总数，m是匹配的数目。</p>
<p><strong>（b）非对称的二元属性</strong><br>可以依据二元属性的列联表去计算，计算公式如下：<img src="https://img-blog.csdnimg.cn/537adc41d3db4aadbc1c4308bc06134a.png" alt="请添加图片描述"><br>其中，r为在对象i中取1、在对象j中取0的属性数；s为在对象i中取0、对象j中取1的属性数；q为在对象i和j中都取1的属性数。</p>
<p><strong>（c）数值属性</strong><br>使用闵可夫斯基距离进行计算，即欧几里得距离和曼哈顿距离的推广，定义如下：<br><img src="https://img-blog.csdnimg.cn/10038a3177434b4da577140f5f518fdb.png" alt="请添加图片描述"><br>其中，h是实数，h≥1。且当h = 1时，它代表曼哈顿距离（即，L1范数）；当h = 2时表示欧几里得距离（即，L2范数）。</p>
<p><strong>（d）词频向量</strong><br>使用余弦相似度进行计算，其计算公式如下：<br><img src="https://img-blog.csdnimg.cn/a9eb451cc9fb484c9c253c97d52ef035.png" alt="请添加图片描述"><br>其中，余弦值0意味着两个向量呈90°夹角（正交），没有匹配。余弦值越接近于1，夹角越小，向量之间的匹配度越大。</p>
<h3 id="2-6"><a href="#2-6" class="headerlink" title="2.6"></a>2.6</h3><blockquote>
<p>给定两个被元组(22,1,42,10)和(20,0,36,8)表示的对象。<br>（a）计算这两个对象之间的欧几里得距离。<br>（b）计算这两个对象之间的曼哈顿距离。<br>（c）使用q=3，计算这两个对象之间的闵可夫斯基距离。<br>（d）计算这两个对象之间的上确界距离。</p>
</blockquote>
<p>（a）计算两个对象之间的欧几里得距离：<br><img src="https://img-blog.csdnimg.cn/e5750d40a1c44feba31750d6956f15d8.png" alt="请添加图片描述"><br>（b）计算两个对象之间的曼哈顿距离：<br><img src="https://img-blog.csdnimg.cn/f734b249a2c34ac8a545ff732f56b323.png" alt="请添加图片描述"><br>（c）使用q=3，计算这两个对象之间的闵可夫斯基距离：<br><img src="https://img-blog.csdnimg.cn/432e6c857f1447bd96ab11ecdfbdc9a7.png" alt="请添加图片描述"><br>（d）计算这两个对象之间的上确界距离：<br><img src="https://img-blog.csdnimg.cn/bea2c787e7a84c4682719680c0adf9a6.png" alt="请添加图片描述"></p>
<h2 id="第三章：数据预处理"><a href="#第三章：数据预处理" class="headerlink" title="第三章：数据预处理"></a>第三章：数据预处理</h2><h3 id="3-1"><a href="#3-1" class="headerlink" title="3.1"></a>3.1</h3><blockquote>
<p>数据质量可以从多方面评估，包括准确性、完整性、一致性问题。 提出其他两个方面的数据质量。</p>
</blockquote>
<p><strong>准确性</strong>：由于技术的限制或人为的失误，有些需要准确投入营销，比如生日折扣等的商品，可能会失去作用。</p>
<p><strong>完整性</strong>：由于技术的限制或人为的失误，有些需要准确投入营销比如生日折扣等的商品可能会失去作用。<br>如果要对某宝、某东或者某宁的买家信息进行一个数据挖掘，从而用来营销其他东西，比如要对地址进行挖掘，此时详细、完整的地址数据则是一个必备的特性。</p>
<p><strong>一致性问题</strong>：由于某些不可抗因素而导致的数据不一致，例如多个数据源命名不一致时会影响数据集成等。比如技术问题，在并发量大的情况下，记录数据时出现问题；或者某些数据值是一样的，然而在不同的数据库中其命名却不一样；这些不一致性问题在数据挖掘时则会影响挖掘的结果。</p>
<p>数据质量的<strong>其他两个尺度</strong>：时效性和可信性。</p>
<p><strong>时效性</strong>：数据必须在一定时间范围内可用，以便对决策有用。</p>
<p><strong>可信性</strong>：数据值必须在可能结果的范围内，以便对决策有用。</p>
<h3 id="3-2"><a href="#3-2" class="headerlink" title="3.2"></a>3.2</h3><blockquote>
<p>在实际数据中，某些属性缺少值的元组是常见的情况。 描述解决此问题的各种方法。<br>处理数据元组中缺少值的问题的各种方法包括：</p>
</blockquote>
<p><strong>（a）忽略元组</strong>：通常在缺少类标签时执行此操作（假设挖掘任务涉及分类或描述）。除非元组包含缺少值的几个属性，否则此方法不太有效。当每个属性的缺失值的百分比相差很大时，这尤其差劲。</p>
<p><strong>（b）手动填充</strong>缺失值：通常，此方法很耗时，对于缺失值很多的大型数据集，这可能不是一个合理的任务，尤其是当填充值不容易确定时。</p>
<p>（c）使用<strong>全局常量</strong>填充缺失值：用相同的常量替换所有缺失的属性值，例如“ Unknown”或-∞之类的标签。如果将缺失的值替换为“未知”，则挖掘程序可能会错误地认为它们构成了一个有趣的概念，因为它们都具有一个共同的值，即“未知”。因此，尽管此方法很简单，但不建议使用。</p>
<p>（d）将<strong>属性均值</strong>用于定量（数字）值或将属性模式用于分类（标称）值：例如，假设AllElectronics客户的平均收入为$ 28,000。 使用此值替换任何缺失的收入值。</p>
<p>（e）对于属于与给定元组<strong>相同类别</strong>的所有样本，使用<strong>定量</strong>（数值）值的属性均值或分类（名义）值的属性模式：例如，如果根据信用风险对客户进行分类，则替换缺失的与给定元组处于相同信用风险类别的客户的平均收入值。</p>
<p>（f）使用<strong>最可能的值</strong>来填补缺失值：这可以通过回归，使用贝叶斯形式主义的基于推理的工具或决策树归纳法来确定。 例如，使用数据集中的其他客户属性，我们可以构建决策树来预测收入的缺失值。</p>
<h3 id="3-4"><a href="#3-4" class="headerlink" title="3.4"></a>3.4</h3><blockquote>
<p>讨论数据集成需要考虑的问题。</p>
</blockquote>
<p>数据集成涉及将来自多个源的数据组合到一个一致的数据存储中。 在这种集成过程中必须考虑的问题包括：</p>
<ul>
<li>模式集成：必须集成来自不同数据源的元数据，以匹配等效的实际实体。 这称为实体识别问题。</li>
<li>处理冗余数据：派生的属性可能是冗余的，不一致的属性命名也可能导致结果数据集中的冗余。 在元组级别可能出现重复，因此需要检测和解决。</li>
<li>数据值冲突的检测和解决：表示，缩放或编码上的差异可能导致相同的现实世界实体属性值在要集成的数据源中有所不同。</li>
</ul>
<h3 id="3-7"><a href="#3-7" class="headerlink" title="3.7"></a>3.7</h3><blockquote>
<p>使用习题3.3中给出的age数据，回答以下问题：<br>（a）使用最小最大规范化将age值35变换到[0.0,1.0]区间。<br>（b）使用z分数规范化，变换age，其中标准差为12.94。<br>（c）使用小数定标规范化变换35。<br>（d）指出给定数据，你愿意使用哪种方法。陈述你的理由。</p>
</blockquote>
<p><strong>（a）使用最小最大规范化将age值35变换到[0.0,1.0]区间</strong><br>为了便于阅读，将A设为属性年龄。 使用公式：<br><img src="https://img-blog.csdnimg.cn/a94c1646151340358c14c5896d6bb518.png" alt="请添加图片描述"><br>其中minA = 13，maxA = 70，new_minA = 0，new_maxA = 1.0，然后将v = 35转换为v` = 0.39。</p>
<p><strong>（b）使用z分数规范化，变换age，其中标准差为12.94</strong><br>使用公式<img src="https://img-blog.csdnimg.cn/60670c11682f4a4286384ed8d5ba3940.png" alt="请添加图片描述">（其中 <img src="https://img-blog.csdnimg.cn/0b065e264cb04707af9097db268b09d5.png" alt="请添加图片描述">= 809/27 = 29.96，<img src="https://img-blog.csdnimg.cn/341ee94307e94f5c9f6d4e2d3719f67f.png" alt="请添加图片描述">= 12.94），然后将v = 35转换为v` = 0.39。</p>
<p>（c）使用小数定标规范化变换35</p>
<p>使用公式<img src="https://img-blog.csdnimg.cn/7c768380938543c18ca598dab39554ff.png" alt="请添加图片描述">（其中j = 2），将v = 35转换为v` = 0.35。</p>
<p><strong>（d）指出给定数据，你愿意使用哪种方法。陈述你的理由。</strong><br>言之有理即可。一般情况下，使用最小最大规范化。</p>
<ul>
<li>在给定数据的情况下，十进制缩放进行规范化，可以将保持数据的分布并直观地解释，同时仍允许在特定年龄段进行挖掘。</li>
<li>最小最大规范化具有不希望的结果，即不允许任何将来的值落在当前的最小值和最大值之外，而不会遇到“超出范围的误差”。 由于此类值可能会出现在将来的数据中，因此此方法不太合适。</li>
<li>最小最大规范化和z分数规范化都极大地改变了原始数据。z分数规范化将值转换为表示它们与标准差之间的距离的度量。但与十进制缩放相比，这种类型的转换对用户而言可能不那么直观。</li>
</ul>
<h2 id="第六章：挖掘频繁模式、关联和相关性"><a href="#第六章：挖掘频繁模式、关联和相关性" class="headerlink" title="第六章：挖掘频繁模式、关联和相关性"></a>第六章：挖掘频繁模式、关联和相关性</h2><h3 id="6-6"><a href="#6-6" class="headerlink" title="6.6"></a>6.6</h3><blockquote>
<p>数据库有5个事务。设mini_sup=60%，min_conf=80%。<br><img src="https://img-blog.csdnimg.cn/12f17aa7c91248d1927c9cf31fb4b7a5.png" alt="请添加图片描述"><br>（a）分别使用Apriori算法和FP-growth算法找出频繁项集。比较两种挖掘过程的有效性。<br>（b）列举所有与下面的原规则匹配的强关联规则（给出支持度s和置信度c），其中X是代表顾客的变量，item是表示项的变量（如“A”，“B”等）：<br>∀x∈<em>transaction,buys(X,item_1 )∧buys(X,item_2 )⇒buys(X,item_3 )</em>        [s,c]</p>
</blockquote>
<p>使用Apriori算法<br>首先找出频繁的1-项集，然后进行组合再找出频繁的2-项集，以此类推，有如下图（其中L表示频繁项集）：<br><img src="https://img-blog.csdnimg.cn/670fd2d273874b3ebdf15bd883eadb63.png" alt="请添加图片描述"><br>使用FP-growth算法<br>首先找出频繁的1-项集，然后构建一个FP树，再对每个中间节点依次进行考察，建立条件FP树，最后得到单个路径的产生频繁模式的所有组合。<img src="https://img-blog.csdnimg.cn/5a985f6739444a9791a739befcac85bc.webp" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/21895ce26a604a4ab738cf583e686702.png" alt="请添加图片描述"><br>有效性比较：Apriori算法需要对数据库做多次扫描而FP-growth算法只需要一次扫描。Apriori的候选集产生代价较高（需要做多次自身连接），而FP-growth不需要生成任何候选集。</p>
<p>强关联规则：[s,c]支持度，置信度<br><img src="https://img-blog.csdnimg.cn/17ae5ac00904457699376e219b26d156.png" alt="请添加图片描述"><br><del>k,e —&gt; o [0.6,0.75]</del> （所以不满足要求）</p>
<p><img src="https://img-blog.csdnimg.cn/c86fcbc278344219a510de7fe4fb37b7.jpeg" alt="请添加图片描述"><img src="https://img-blog.csdnimg.cn/9f05664e60c241b2913fa7986c7a94b0.png" alt="在这里插入图片描述"></p>
<h3 id="6-14"><a href="#6-14" class="headerlink" title="6.14"></a>6.14</h3><blockquote>
<p>下面的相依表汇总了超市的事务数据。其中，hot dogs表示包含热狗的事务，(hot dogs) ̅表示不包含热狗的事务。hamburgers表示包含汉堡包的事务，(hamburgers) ̅表示不包含汉堡包的事务。（题图中第二行第一列改成(hamburgers) ̅）<br><img src="https://img-blog.csdnimg.cn/639fa03761c847e6b58c4db6c3014b7b.png" alt="请添加图片描述"><br>（a）假设挖掘出了关联规则hot dogs⇒humburgers，给定最小支持度阈值25%，最小置信度阈值50%，该关联规则是强规则吗？<br>（b）根据给定的数据，买hot dogs独立于买humburgers吗？如果不是，两者之间存在何种相关联系。<br>（c）在给定的数据上，将全置信度、最大置信度、Kulczynski和余弦的使用与提升度和相关度进行比较。</p>
</blockquote>
<p><strong>（a）假设挖掘出了关联规则hot dogs⇒humburgers，给定最小支持度阈值25%，最小置信度阈值50%，该关联规则是强规则吗？</strong><br>由于支持度为2000/5000=40%，置信度为2000/3000=66.7%。因此，该关联规则是强关联规则。</p>
<p><strong>（b）根据给定的数据，买hot dogs独立于买humburgers吗？如果不是，两者之间存在何种相关联系。</strong><br>不是，corr(hotdog,hamburgers)=P(hot,hum)/(P(hot)×P(hum))=(2000/5000)/((2500/5000)×(3000/5000))=0.4/(0.5×0.6)=1.33&gt;1，因此两者之间为正相关。</p>
<p><strong>（c）在给定的数据上，将全置信度、最大置信度、Kulczynski和余弦的使用与提升度和相关度进行比较。</strong><br>全置信度：〖all<em>conf〗(hotdog,hamburgers)=0.4/0.6=2/3<br>最大置信度：max⁡_conf</em>(hotdog,hamburgers)=0.4/0.5=0.8<br>Kulczynski：〖Kul〗(hotdog,hamburgers)=1/2 （0.8+2/3）=11/15<br>余弦度量：cos(hotdog,hamburgers)=√(0.8*2/3)=(2√30)/15<br>提升度：lift_(hotdog,hamburgers)=(2/3)/0.5=4/3<br>相关度：期望值计算参考P64，其计算公式为：<br>x2=∑〖(观测值-期望值)〗2/期望值，x2=833.3<br><img src="https://img-blog.csdnimg.cn/4447f77c4703463586fd4c01f045356b.png" alt="在这里插入图片描述"></p>
<h2 id="第八章：分类基本概念"><a href="#第八章：分类基本概念" class="headerlink" title="第八章：分类基本概念"></a>第八章：分类基本概念</h2><h3 id="8-7"><a href="#8-7" class="headerlink" title="8.7"></a>8.7</h3><blockquote>
<p>下表由雇员数据库的训练数据组成。数据已泛化。例如，age“31…35”表示年龄在31~35之间。对于给定的行，count表示department、status、age和salary在该行上具有给定值的元组数。<br><img src="https://img-blog.csdnimg.cn/1084a72375ec4c3393d0226bbf6bf48c.png" alt="请添加图片描述"><br>设status是类标号属性。<br>1） 如何修改基本决策树算法，以便考虑每个广义数据元组（即每个行）的count？<br>2） 使用修改过的算法，构造给定数据的决策树。<br>3） 给定一个数据元组，它的属性department、age和salary的值分别为“system”、“26…30”、“46…50K”。该元组status的朴素贝叶斯分类是什么？</p>
</blockquote>
<p><strong>1） 如何修改基本决策树算法，以便考虑每个广义数据元组（即每个行）的count？</strong><br>① 将每个元组的count作为计算属性选择方法中的一部分（例如信息增益）。<br>② 在决定元组多数表决的时候考虑元组的count。</p>
<p><strong>2） 使用修改过的算法，构造给定数据的决策树。</strong><br><img src="https://img-blog.csdnimg.cn/81c1a9abb5034967b44071508abf2731.png" alt="请添加图片描述"></p>
<p><strong>3） 给定一个数据元组，它的属性department、age和salary的值分别为“system”、“26…30”、“46…50K”。该元组status的朴素贝叶斯分类是什么？</strong><br><img src="https://img-blog.csdnimg.cn/6ac38d5c2dc8402bb23b88dbb9e091cc.jpeg" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/fc8b7c73953648ae8198fb68c360527e.jpeg" alt="请添加图片描述"></p>
<h3 id="8-12"><a href="#8-12" class="headerlink" title="8.12"></a>8.12</h3><blockquote>
<p>如图中的数据元组已经按分类器返回概率值的递减序排序。对于每个元组，计算真正例（TP）、假正例（FP）、真负例（TN）和假负例（FN）的个数。计算真正例率（TPR）和假正例率（FPR）。为该数据绘制ROC曲线。<br><img src="https://img-blog.csdnimg.cn/9d0d7a921711487197b2f8c4adf5c0aa.png" alt="请添加图片描述"></p>
</blockquote>
<p>根据计算，可以得到如上图所示对应的TPR和FPR，绘制出来的表格如下：<br><img src="https://img-blog.csdnimg.cn/f5561effb93f44349866aad0bcb6feb9.png" alt="请添加图片描述"><br>（这个图不对，应该是纵坐标是TPR，这样才是凸包）<br><img src="https://img-blog.csdnimg.cn/ff00715afa4545fc9052f559cc87cddf.png" alt="请添加图片描述"></p>
<h3 id="8-13"><a href="#8-13" class="headerlink" title="8.13"></a>8.13</h3><blockquote>
<p>当一个数据对象可以同时属于多个类时，很难评估分类的准确率。评述在这种情况下，你将使用何种标准比较在相同数据上建立的不同分类器。</p>
</blockquote>
<p>一个数据对象可以同时属于多个类。然而，一个数据对象可能比起其他类会更多属于一个特定类。因此，应该建立一个分类器去判断数据对象通常属于哪个类。<strong>第一个标准</strong>，一个类如果符合最可能或第二可能类即判断分类正确。<br><strong>另一个标准</strong>是使用同一个数据集判断不同分类器的分类速度、鲁棒性、可扩展性以及解释性。<br>通常我们会选择一个计算代价更小（训练时间、分类时间）、能在给出噪声甚至不完整数据下做出准确预测、在大型数据上有效工作并提供能够更易理解的准确结果的分类器。</p>
<h3 id="8-16"><a href="#8-16" class="headerlink" title="8.16"></a>8.16</h3><blockquote>
<p>概述处理类不平衡问题的方法。解释基于大量非欺诈案例和很少的欺诈案例，如何构建高质量的分类器。</p>
</blockquote>
<p>提升不平衡类分类准确率的方法有三大类：采样、阈值移动、调整代价或权重。</p>
<ul>
<li>对较多的那个类别进行欠采样(under-sampling)，舍弃一部分数据，使其与较少类别的数据相当。</li>
<li>对较少的类别进行过采样(over-sampling)，重复使用一部分数据，使其与较多类别的数据相当。</li>
<li>阈值调整（threshold moving），将原本默认为0.5的阈值调整到 较少类别/（较少类别+较多类别）即可。<br><img src="https://img-blog.csdnimg.cn/fcd9df2258eb4f2fab8e89dc9bb978b2.png" alt="请添加图片描述"><br>前两种方法都会明显的改变数据分布，训练数据假设不再是真实数据的无偏表述。在第一种方法中，浪费了很多数据。而第二类方法中有无中生有或者重复使用了数据，会导致过拟合的发生。因此欠采样的逻辑中，往往会结合集成学习来有效的使用数据。</li>
</ul>
<p><strong>方法评价</strong>：<br><img src="https://img-blog.csdnimg.cn/f0add00d20ef46bd9a4a804e97a78f37.png" alt="请添加图片描述"><br><strong>实例</strong><br>假设正例数据n，而反例数据m个。可以通过<strong>欠采样</strong>，随机无重复的生成（k=n/m）个反例子集，并将每个子集都与相同正例数据合并生成k个新的训练样本。在k个训练样本上分别训练一个分类器，最终将k个分类器的结果结合起来，比如求平均值。<br>这就是一个简单的思路，也就是Easy Ensemble[1]。</p>
<blockquote>
<p>[1] Liu, T.Y., 2009, August. Easyensemble and feature selection for<br>imbalance data sets. In Bioinformatics, Systems Biology and<br>Intelligent Computing, 2009. IJCBS’09. International Joint Conference<br>on (pp. 517-520). IEEE.</p>
</blockquote>
<p>代码可参考：<br><a href="https://cloud.tencent.com/developer/article/1689107">https://cloud.tencent.com/developer/article/1689107</a></p>
<ul>
<li>法一：SMOTE算法、LR模型以及阈值移动的方法<br><img src="https://img-blog.csdnimg.cn/8d629d37664b4ae1915c4fa5e35e1bb6.png" alt="请添加图片描述"></li>
<li>法二：算法集成技术XGBoost<br><img src="https://img-blog.csdnimg.cn/c0ee0004ec3d48f7bc4735bcd7f4d546.png" alt="请添加图片描述"><h2 id="第十章：聚类分析"><a href="#第十章：聚类分析" class="headerlink" title="第十章：聚类分析"></a>第十章：聚类分析</h2><h3 id="10-2"><a href="#10-2" class="headerlink" title="10.2"></a>10.2</h3><blockquote>
<p> 假设数据挖掘的任务是将如下的8个点（用（x，y）代表位置）聚类为3个簇。<br>A_1(2,10) ,A_2 (2,5),A_3 (8,4),B_1 (5,8),B_2 (7,5),B_3 (6,4),C_1 (1,2),C_2 (9,4)<br>距离是欧氏距离。假设初始我们选择A_1，B_1和C_1分别为每个簇的中心，用k-均值算法给出：<br>（a）在第一轮执行后的3个簇中心。<br>（b）最后的3个簇。</p>
</blockquote>
</li>
</ul>
<p><strong>（a）在第一轮执行后的3个簇中心。</strong><br>在第一轮执行时，分别计算除中心点外的所有点和每个中心点的欧几里得距离，将其并入离自己最近的中心点的簇中。因此可得第一轮后，3个簇为：<br> {A_1}，{B_1,A_3,B_2,B_3,C_2}，{C_1,A_2}，故簇中心为(2, 10)，(6, 6)，(1.5, 3.5)。 </p>
<p><strong>（b）最后的3个簇。</strong><br>使用新的均值作为簇的中心点，再次按照以上流程进行计算；如此迭代后，直到分配稳定后，最后形成的三个簇为：{A_1,C_2 ,B_1}，{A_3,B_2,B_3}，{C_1,A_2}。<br><img src="https://img-blog.csdnimg.cn/d1c8ba6cd11a4f819f16abfe154121eb.jpeg" alt="请添加图片描述"></p>
<h3 id="10-6"><a href="#10-6" class="headerlink" title="10.6"></a>10.6</h3><blockquote>
<p>k-均值和k-中心点算法都可以进行有效的聚类。<br>（a）概述k-均值和k-中心点相比较的优缺点。<br>（b）概述这两种方法与层次聚类方法（如AGNES）相比有何优缺点。</p>
</blockquote>
<p><strong>（a）概述k-均值和k-中心点相比较的优缺点。</strong><br>k-均值算法计算代价更小；k-中心点计算代价大，但是对于数据中的离群点和噪声鲁棒性更强，即更少受到离群点和噪声的影响。</p>
<p><strong>（b）概述这两种方法与层次聚类方法（如AGNES）相比有何优缺点。</strong><br>k-均值和k-中心点都是划分方法的一种，这种方法的好处在于每次迭代重定位的时候可以撤销之前的聚群操作，但是层次聚类方法一旦一个步骤（分裂或合并）完成将不能被撤回，因此层次聚类方法可能会影响聚类的结果的质量。划分方法在球形聚类上表现良好，且其聚类的结果在小型到中中型的数据库上质量较好。划分方法的缺点在于需要指定簇的数量。<br>层次聚类方法自动决定簇的数量。然而他们每一步做出合并或分裂步骤的时候需要进行大量计算来评估该步骤产生的簇的质量。然而，层次聚类方法能够和其他聚类方法集成一个扩展的聚类方法，提高层次聚类质量，如BIRCH、ROCK和Chameleon。</p>
<h3 id="10-12"><a href="#10-12" class="headerlink" title="10.12"></a>10.12</h3><blockquote>
<p>指出在何种情况下，基于密度的聚类方法比基于划分的聚类方法和层次聚类方法更合适。并给出一些应用实例来支持你的观点。</p>
</blockquote>
<p>基于划分的聚类方法和层次聚类方法都是基于对象之间的距离。这样的方法更倾向于发现球形簇并在发现任意形状的簇上遇到困难。划分方法还在簇的密度和直径方面存在问题；而层次划分方法计算代价昂贵且不能撤回已经完成的分裂或合并步骤。<br>基于密度的聚类方法是建立在每个簇通常其簇内的点的密度比簇外的大的前提之上的，即簇时数据空间中被稀疏区域分开的稠密区域。基于密度的方法能够发现任意形状的簇，不同意传统的聚类方法，其可以处理数据中的噪声。下图中展示了不同形状的簇，使用DBSCAN方法将能轻松处理这些簇。<br><img src="https://img-blog.csdnimg.cn/8027669b31f4498c9b3969b45d94a56a.png" alt="请添加图片描述"></p>
<h3 id="10-13"><a href="#10-13" class="headerlink" title="10.13"></a>10.13</h3><blockquote>
<p>给出一个例子来说明如何集成特定的聚类方法，例如，一种聚类方法被用作另一种算法的预处理步骤。此外，请解释为什么两种聚类方法的集成有时候会改进聚类的质量和有效性。</p>
</blockquote>
<p>一个例子是BIRCH，一种集成了层次性聚类方法（预处理步骤）和其他聚类方法的聚类算法。一开始使用树形结构作为层次划分的对象，然后使用其他聚类算法（例如迭代划分）来重新定义簇，BIRCH增量地构建一个聚类特征树（CF树），是一棵高度平衡树，用于为层次聚类存储聚类特征（总和特征）。BIRCH包括两个阶段，第一个阶段（微聚类）扫描一遍数据库，在内存中建立一棵CF树，可以看做数据的多层压缩，视图保留数据的内在结构；第二个阶段（宏聚类）采用其他的聚类算法（例如迭代重定位）来对CF树的叶节点进行聚类，把稀疏的点当做离群点移出并且将稠密的簇合并为更大的簇。<br><strong>集成不同的聚类方法能够克服单个方法的局限性</strong>。例如，集成层次聚类方法和一种其他聚类方法，例如BIRCH克服了层次聚类分两大局限性——可扩展性和不能撤销已经完成的步骤。</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/qq_40669059/article/details/105697907">https://blog.csdn.net/qq_40669059/article/details/105697907</a><br><a href="https://blog.csdn.net/qq_43060870/article/details/107099163">https://blog.csdn.net/qq_43060870/article/details/107099163</a><br><a href="https://cloud.tencent.com/developer/article/1689107">https://cloud.tencent.com/developer/article/1689107</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%982.1%E2%80%94%E2%80%94%E7%BB%AA%E8%AE%BA%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>@<a href="数据挖掘2.1——绪论">TOC</a></p>
<h1 id="1-数据挖掘背景、-历史及发展"><a href="#1-数据挖掘背景、-历史及发展" class="headerlink" title="1.数据挖掘背景、 历史及发展"></a>1.数据挖掘背景、 历史及发展</h1><h1 id="2-数据挖掘定义"><a href="#2-数据挖掘定义" class="headerlink" title="2.数据挖掘定义"></a>2.数据挖掘定义</h1><h2 id="2-1数据定义"><a href="#2-1数据定义" class="headerlink" title="2.1数据定义"></a>2.1数据定义</h2><p>数据是代表一个或一组变量的定性或定量属性的信息片段。 数据通常被视为信息和知识的最低层次的抽象。</p>
<blockquote>
<p>数据类型</p>
<ul>
<li>连续、二值</li>
<li>离散、字符串</li>
<li>符号</li>
</ul>
<p>存储</p>
<ul>
<li>物理</li>
<li>逻辑</li>
</ul>
<p>主要问题</p>
<ul>
<li>类型转换<ul>
<li>错误<h2 id="2-2数据挖掘定义"><a href="#2-2数据挖掘定义" class="headerlink" title="2.2数据挖掘定义"></a>2.2数据挖掘定义</h2>数据挖掘是从大量的、 不完全的、 有噪声的、 模糊的、 随机的数据中提取隐含在其中的、 人们事先不知道的、 但又是潜在有用的信息和知识的过程。<br>Data Mining is the process of automatically extracting interesting useful hidden patterns from usually massive， incomplete and noisy data. [Wikipedia]<h1 id="3-数据挖掘过程"><a href="#3-数据挖掘过程" class="headerlink" title="3.数据挖掘过程"></a>3.数据挖掘过程</h1><img src="https://img-blog.csdnimg.cn/8764733e3e804409b03e4107a6821d11.png" alt="在这里插入图片描述"></li>
</ul>
<ol>
<li><strong>数据</strong>是未经加工和修饰的原料。<br>数据是可以记录、 通信和能识别的符号， 它通过有意义的组合来表达现实世界中的某种实体 （具体对象、 事件、 状态或活动） 的特征。</li>
</ol>
</li>
</ul>
</blockquote>
<ol>
<li><strong>信息</strong>是对数据经过过滤、 融合、标准化、 对比、 翻译、 分类、 管理等一系列环节处理后得到的。</li>
<li><strong>知识</strong>是对信息内容进行提炼、 比较、 挖掘、 分析、 概括、判断和推论得到的。</li>
</ol>
<h1 id="4-数据挖掘任务关联规则挖掘"><a href="#4-数据挖掘任务关联规则挖掘" class="headerlink" title="4.数据挖掘任务关联规则挖掘"></a>4.数据挖掘任务关联规则挖掘</h1><ul>
<li>关联规则挖掘</li>
<li>非监督式机器学习 —— 聚类</li>
<li>监督式机器学习<ul>
<li>离散标签预测 —— 标签分类</li>
<li>连续标签预测 —— 数值预测</li>
</ul>
</li>
<li>回归</li>
</ul>
<h1 id="5-数据挖掘应用"><a href="#5-数据挖掘应用" class="headerlink" title="5.数据挖掘应用"></a>5.数据挖掘应用</h1><h2 id="5-1应用场景"><a href="#5-1应用场景" class="headerlink" title="5.1应用场景"></a>5.1应用场景</h2><p>商务智能：通过数据挖掘等技术可以获得隐藏在各种数据中的有利信息，从而帮助商家进一步调整营销策略。<br>信息识别：信息识别是指信息接受者从一定的目的出发，运用已有的知识和经验，对信息的真伪性、有用性进行辨识和甄别。<br>搜索引擎：根据用户提供的关键词，在互联网上搜索用户最需要的内容。<br>辅助医疗：对大量历史诊断数据进行分析和挖掘，有助于医生对病人的病情进行有效的判断。</p>
<h2 id="5-2存在的问题"><a href="#5-2存在的问题" class="headerlink" title="5.2存在的问题"></a>5.2存在的问题</h2><p>数据类型的多样性<br>高维度数据<br>噪声数据<br>分析与挖掘结果的可视化<br>隐私数据的保护</p>
<h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/qq_41433002/article/details/123260714">https://blog.csdn.net/qq_41433002/article/details/123260714</a></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%982.2%E2%80%94%E2%80%94%E8%AE%A4%E8%AF%86%E6%95%B0%E6%8D%AE%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>@<a href="数据挖掘2.2——认识数据">TOC</a></p>
<h1 id="1-数据类型"><a href="#1-数据类型" class="headerlink" title="1.数据类型"></a>1.数据类型</h1><ul>
<li>数据库中的行 -&gt;数据对象</li>
<li>列 -&gt; 属性<h2 id="1-1数据对象"><a href="#1-1数据对象" class="headerlink" title="1.1数据对象"></a>1.1数据对象</h2><h2 id="1-2属性"><a href="#1-2属性" class="headerlink" title="1.2属性"></a>1.2属性</h2></li>
</ul>
<blockquote>
<p>类型</p>
<ul>
<li>标称：类别、状态</li>
<li>二进制：包括对称、不对称</li>
<li>序数：有意义排序，不知道连续值间隔大小</li>
<li>区间标度：值有序，差有意义</li>
<li>比率标度：倍数有意义<br><img src="https://img-blog.csdnimg.cn/8140d76e687d4e0999adbfc89e0faabe.png" alt="在这里插入图片描述"><h1 id="2-数据统计汇总"><a href="#2-数据统计汇总" class="headerlink" title="2.数据统计汇总"></a>2.数据统计汇总</h1><h2 id="2-1中心化趋势度量：-均值、-中位数和众数"><a href="#2-1中心化趋势度量：-均值、-中位数和众数" class="headerlink" title="2.1中心化趋势度量： 均值、 中位数和众数"></a>2.1中心化趋势度量： 均值、 中位数和众数</h2>均值对离群值很敏感。<br>均值与众数的经验公式<br><em>mean- mode= 3×(mean- median)</em></li>
</ul>
</blockquote>
<h2 id="2-2-离散度度量"><a href="#2-2-离散度度量" class="headerlink" title="2.2 离散度度量"></a>2.2 离散度度量</h2><ul>
<li>方差、标准差</li>
<li>分位数：IQR分位数极差=Q3-Q1</li>
<li>五点概况：min,Ql 9 median,Q3,max</li>
<li>盒装图：分析多个属性数据的离散度差异</li>
<li>离群点：值高于or低于1.5倍IQR<h2 id="2-3数据可视化"><a href="#2-3数据可视化" class="headerlink" title="2.3数据可视化"></a>2.3数据可视化</h2></li>
<li>盒装图：分析多个属性数据的离散度差异<br><img src="https://img-blog.csdnimg.cn/003b1ddc69d7429a9e9bb2f721d433b2.png" alt="在这里插入图片描述"></li>
<li>直方图：单个属性在各个区间变化分布</li>
<li>散点图：两组数据的相关性分布</li>
</ul>
<h1 id="3-数据相似性和相异性度量"><a href="#3-数据相似性和相异性度量" class="headerlink" title="3.数据相似性和相异性度量"></a>3.数据相似性和相异性度量</h1><h2 id="3-1度量数据的相似性和相异性"><a href="#3-1度量数据的相似性和相异性" class="headerlink" title="3.1度量数据的相似性和相异性"></a>3.1度量数据的相似性和相异性</h2><p>数据矩阵<br>相异矩阵</p>
<h2 id="3-2-标称属性的邻近性度量"><a href="#3-2-标称属性的邻近性度量" class="headerlink" title="3.2 标称属性的邻近性度量"></a>3.2 标称属性的邻近性度量</h2><p>方法：简单匹配<br><img src="https://img-blog.csdnimg.cn/6d962d5810ba40059fa5d1b886556b44.png" alt="在这里插入图片描述"></p>
<h2 id="3-3-二值属性的邻近性度量"><a href="#3-3-二值属性的邻近性度量" class="headerlink" title="3.3 二值属性的邻近性度量"></a>3.3 二值属性的邻近性度量</h2><p>后续分类问题与这个刚好相反<br>d的分子 = （0,1）+（1,0）<br>d的分母 = 全 —（0,0）<br><img src="https://img-blog.csdnimg.cn/7a5f52382ac24d09a1995735ea69dcb8.png" alt="在这里插入图片描述"></p>
<h2 id="3-4数值属性的邻近性度量"><a href="#3-4数值属性的邻近性度量" class="headerlink" title="3.4数值属性的邻近性度量"></a>3.4数值属性的邻近性度量</h2><p><img src="https://img-blog.csdnimg.cn/b92d5a229b90454d8b1c88a819438c75.png" alt="在这里插入图片描述"><br>（x1,y1）与(x2,y2)<br>h=1：曼哈顿距离<br>h=2：欧氏距离<br>h趋向于无穷：上确界距离 = max[(x1-x2),(y1-y2)]</p>
<h2 id="3-5余弦相似性"><a href="#3-5余弦相似性" class="headerlink" title="3.5余弦相似性"></a>3.5余弦相似性</h2><p><img src="https://img-blog.csdnimg.cn/a71dafe01164444388171679a4312217.png" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%982.3%E2%80%94%E2%80%94%E6%95%B0%E6%8D%AE%E9%A2%84%E5%A4%84%E7%90%86%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>@<a href="数据挖掘2.3——数据预处理 知识点整理">TOC</a></p>
<h1 id="1-数据质量"><a href="#1-数据质量" class="headerlink" title="1.数据质量"></a>1.数据质量</h1><p><img src="https://img-blog.csdnimg.cn/9f77d0e2f38f4349b42c99f321c718bb.png" alt="在这里插入图片描述"></p>
<h1 id="2-数据预处理方法"><a href="#2-数据预处理方法" class="headerlink" title="2.数据预处理方法"></a>2.数据预处理方法</h1><ul>
<li>数据清理</li>
<li>填写缺失值， 平滑噪声数据， 识别或删除离群， 并解决不一致问题</li>
<li>数据集成</li>
<li>整合多个数据库， 多维数据集或文件</li>
<li>数据缩减</li>
<li>降维</li>
<li>Numerosity reduction</li>
<li>数据压缩</li>
<li>数据转换和数据离散化</li>
<li>正常化</li>
<li>生成概念层次结构</li>
</ul>
<h2 id="2-1-数据清洗"><a href="#2-1-数据清洗" class="headerlink" title="2.1 数据清洗"></a>2.1 数据清洗</h2><ul>
<li>脏数据<ul>
<li>不完整的： 缺少属性值， 缺乏某些属性值， 或只包含总数据</li>
<li>忽略元组、手动填写、自动填写</li>
</ul>
</li>
<li>含嘈杂的噪音， 错误或离群<ul>
<li>例如， 工资= -10 (错误)</li>
<li>处理：盒装图检测并删除离群点</li>
</ul>
</li>
<li>不一致的代码或不符的名称<ul>
<li>年龄= “42”  生日=“03/07/1997”</li>
<li>曾经评级 “1,2,3” , 现在评级 “A, B, C”</li>
<li>计算推理替换、全局替换</li>
</ul>
</li>
</ul>
<h2 id="2-2-数据集成"><a href="#2-2-数据集成" class="headerlink" title="2.2 数据集成"></a>2.2 数据集成</h2><p>将来自多个数据源的数据组合成一个连贯的数据源<br><img src="https://img-blog.csdnimg.cn/3bee3374e4a24b8bb464be416f8529da.png" alt="在这里插入图片描述"></p>
<h3 id="1-模式集成"><a href="#1-模式集成" class="headerlink" title="1. 模式集成"></a>1. 模式集成</h3><p><img src="https://img-blog.csdnimg.cn/6dff557004bb4c74862ca74c2f2f7b95.png" alt="在这里插入图片描述"></p>
<h3 id="2-实体识别问题"><a href="#2-实体识别问题" class="headerlink" title="2. 实体识别问题"></a>2. 实体识别问题</h3><p><img src="https://img-blog.csdnimg.cn/2451e8231b014553bc494cf571ea0995.png" alt="在这里插入图片描述"></p>
<h3 id="3-数据冲突检测"><a href="#3-数据冲突检测" class="headerlink" title="3. 数据冲突检测"></a>3. 数据冲突检测</h3><p><img src="https://img-blog.csdnimg.cn/e6fd5118643c4be1bfdf894350dbcff0.png" alt="在这里插入图片描述"></p>
<h2 id="2-3数据规约"><a href="#2-3数据规约" class="headerlink" title="2.3数据规约"></a>2.3数据规约</h2><p><strong>原因</strong></p>
<p>由于数据仓库可以存储TB的数据， 因此在一个完整的数据集上运行时， 复杂的数据分析可能需要一个很长的时间</p>
<h3 id="1-降维"><a href="#1-降维" class="headerlink" title="1.降维"></a>1.降维</h3><p><strong>原因</strong><br>①随着维数的增加， 数据变得越来越稀疏<br>②子空间的可能的组合将成倍增长<br>③需要学习的参数越多，模型越复杂，需要更多的训练集，越容易欠拟合</p>
<p><strong>需要降维的场景</strong></p>
<ul>
<li>参数据稀疏， 维度高</li>
<li>高维数据采用基于规则的分类方法</li>
<li>采用复杂模型， 但是训练集数目较少</li>
<li>需要可视化</li>
</ul>
<p><strong>方法</strong></p>
<ul>
<li>PCA主成分分析法<h3 id="2-降数据"><a href="#2-降数据" class="headerlink" title="2.降数据"></a>2.降数据</h3></li>
<li><strong>方法</strong><br>抽样法</li>
</ul>
<blockquote>
<p>抽样类型</p>
<ul>
<li>简单随机抽样(Simple Random Sampling)<ul>
<li>相等的概率选择</li>
<li>不放回抽样(Sampling without replacement)<ul>
<li>一旦对象被选中， 则将其删除</li>
</ul>
</li>
<li>有放回抽样(Sampling with replacement)<ul>
<li>选择对象不会被删除</li>
</ul>
</li>
<li>分层抽样</li>
<li>每组抽相同个数</li>
<li>用于偏斜数据</li>
</ul>
</li>
</ul>
</blockquote>
<h3 id="3-数据压缩"><a href="#3-数据压缩" class="headerlink" title="3.数据压缩"></a>3.数据压缩</h3><h2 id="2-4数据转换和离散化"><a href="#2-4数据转换和离散化" class="headerlink" title="2.4数据转换和离散化"></a>2.4数据转换和离散化</h2><p><strong>函数映射</strong>，给定的属性值更换了一个新的表示方法， 每个旧值与新的值可以被识别。</p>
<p><strong>方法</strong></p>
<ul>
<li><p>规范化： 按比例缩放到一个具体区间</p>
<ul>
<li>最小-最大规范化<br><img src="https://img-blog.csdnimg.cn/23d6a6100a81422db6d9c127543f5ae5.png" alt="在这里插入图片描述"></li>
<li><p>Z-得分正常化<br><img src="https://img-blog.csdnimg.cn/c64d88eadcc54040b864a66624df36d4.png" alt="在这里插入图片描述"></p>
</li>
<li><p>小数定标规范化<br>移动属性A的小数点位置(移动位数依赖于属性A的最大值）<br><img src="https://img-blog.csdnimg.cn/c87416d9d61a4c07920008d93ee182e0.png" alt="在这里插入图片描述"></p>
<ul>
<li>离散化<br>原因：部分挖掘算法仅适用于离散数据<br>方法：<br>①非监督离散<br>等宽法、等频法、聚类<br><img src="https://img-blog.csdnimg.cn/f74cc4b0882c4429947e18c603efc654.png" alt="在这里插入图片描述"></li>
</ul>
</li>
</ul>
</li>
</ul>
<h1 id="3-数据特征构造"><a href="#3-数据特征构造" class="headerlink" title="3.数据特征构造"></a>3.数据特征构造</h1>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%982.4%E2%80%94%E2%80%94%E5%85%B3%E8%81%94%E8%A7%84%E5%88%99%E6%8C%96%E6%8E%98%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>@<a href="数据挖掘2.4——关联规则挖掘">TOC</a></p>
<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h1><h2 id="1-1定义"><a href="#1-1定义" class="headerlink" title="1.1定义"></a>1.1定义</h2><p><strong>关联分析</strong>用于发现隐藏在大型数据集中令人兴趣的联系， 所发现的模式通常用关联规则或频<br>繁项集的形式表示。<br><strong>关联规则</strong>反映一个事物与其他事物之间的相互依存性和关联性。 如果两个或者多个事物之间存在一定的关联关系， 那么， 其中一个事物发生就能够预测与它相关联的其它事物的发生。</p>
<p>项集</p>
<blockquote>
<p>支持度：确定项集的频繁程度<br>置信度：确认Y在包含X的事务中出现的频繁程度</p>
</blockquote>
<p>将关联规则挖掘任务<strong>分解</strong>为如下两个主要的子任务：</p>
<ol>
<li>频繁项集产生 （ Frequent Itemset Generation )</li>
</ol>
<ul>
<li>其目标是发现满足最小支持度阈值的所有项集， 这些项集称作频繁项集。</li>
</ul>
<ol>
<li>规则的产生（ RuleGeneration )</li>
</ol>
<ul>
<li>其目标是从上一步发现的频繁项集中提取所有高置信度的规则， 这些规则称作强规则（ strong rule) 。</li>
</ul>
<h1 id="2-频繁项挖掘算法"><a href="#2-频繁项挖掘算法" class="headerlink" title="2.频繁项挖掘算法"></a>2.频繁项挖掘算法</h1><h2 id="2-1降低产生频繁顷集计算复杂度的算法"><a href="#2-1降低产生频繁顷集计算复杂度的算法" class="headerlink" title="2.1降低产生频繁顷集计算复杂度的算法"></a>2.1降低产生频繁顷集计算复杂度的算法</h2><ul>
<li>减少候选项集的数量<br>先验原理：(Apriori)</li>
<li>减少比较的次数<br>替代将每个候选项集与每个事务相匹配， 可以使用更高级的数据结构， 或存储候选项集或压缩数据集，来减少比较次数(FPGrowth)<h2 id="2-2-Apriori"><a href="#2-2-Apriori" class="headerlink" title="2.2 Apriori"></a>2.2 Apriori</h2><strong>先验原理</strong>：</li>
<li>如果一个项集是频繁的， 则它的所有子集一定也是频繁的；</li>
<li>相反， 如果一个项集是非频繁的， 则它的所有超集也一定是非频繁的。</li>
</ul>
<p><strong>算法过程</strong>：最小支持度计数==2<br><img src="https://img-blog.csdnimg.cn/daef5e051ae3444ab76076ced3827af4.png" alt="。"><br><strong>注意事项</strong>：<br>①尽管集合具有无序性， 但为了方便比较计数， 通常对所有商品做一个默认的排序 （类似于建立一个字典索引）。<br>②项的连接：降低候选项的生成。对于任何2个需要连接的项集，去掉第1个项集的首项、第2个项集的尾项，若剩下的一样即可连接。</p>
<p><strong>特点</strong>：<br>①多次扫描数据库<br>②候选项规模庞大<br>③计算支持度开销大</p>
<p><strong>提升性能方法</strong>：<br>Hash-based itemset counting (散列项集计数)<br>Transaction reduction (事务压缩）<br>Partitioning (划分）<br>Sampling (釆样）</p>
<p><strong>缺点</strong>：<br>①需要反复的生成候选项， 如果项的数目比较大， 候选项的数目将达到组合爆炸式的增长</p>
<h2 id="2-3-FPGrowth"><a href="#2-3-FPGrowth" class="headerlink" title="2.3 FPGrowth"></a>2.3 FPGrowth</h2><p><strong>基本思想</strong><br>• 只扫描数据库两遍， 构造频繁模式树 (FP-Tree)<br>• 自底向上递归产生频繁项集<br>• FP树是一种输入数据的压缩表示， 它通过逐个读入事务， 并把每个事努映射到FP树中的一条路径来构造</p>
<p><strong>方法</strong></p>
<ul>
<li>对每个项， 生成它的<strong>条件模式基</strong>， 然后生成它的<strong>条件FP-tree</strong></li>
<li>对每个新生成的条件 FP-tree，重复这个步骤 </li>
<li>直到结果FP-tree为<strong>空</strong>， 或只含<strong>唯一的一个路径</strong> (此路径的每个子路径对应的项集都是频繁集）</li>
</ul>
<p><strong>实例1</strong><br><img src="https://img-blog.csdnimg.cn/3c7439e720f547bab2508e576ccd2807.png" alt="在这里插入图片描述"><br>①构造FP树</p>
<ol>
<li>扫描数据库一次， 得到频繁1-项集</li>
<li>把项按支持度递减排序</li>
<li>再一次扫描数据库， 建立FP-tree</li>
</ol>
<p>②生成条件模式</p>
<ol>
<li>从 FP-tree 的头表开始</li>
<li>按照每个频繁项的连接遍历 FP-tree </li>
<li>列出能够到达此项的所有前缀路径，得到条件模式基</li>
</ol>
<p><strong>步骤</strong><br><img src="https://img-blog.csdnimg.cn/5acda6c6cd5e43b7a8773625e49c2a79.png" alt="在这里插入图片描述"><br><strong>实例2</strong><br><img src="https://img-blog.csdnimg.cn/f342af845f1842b6afbae173c95fd5f6.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/3cf42eb42c074214a54063a7eb7aa16f.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/1beeaf8876c94d8990c3f70a567669f1.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/49aa6a6530b34089a8e59e3847edc714.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/afdf4cd63c6e4d1491c1fa96464942e5.png" alt="在这里插入图片描述"><br><strong>优点</strong></p>
<ul>
<li>完 备：<ul>
<li>不会打破交易中的任何模式</li>
<li>包含了频繁模式挖掘所需的全部信息</li>
</ul>
</li>
<li>紧密<ul>
<li>支持度降序排列： 支持度高的项在FP-tree中共享的机会也高</li>
<li>决不会比原数据库大</li>
</ul>
</li>
</ul>
<h2 id="2-4-产生关联规则"><a href="#2-4-产生关联规则" class="headerlink" title="2.4 产生关联规则"></a>2.4 产生关联规则</h2><p>针对同一个频繁项集的关联规则， 如果规则的后件满足子集关系， 那么这些规则的置信度间满足反单调性<br><img src="https://img-blog.csdnimg.cn/01f3cb89c0d741f2824acca53d208aab.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>支持度：确定项集的频繁程度<br>置信度：确认Y在包含X的事务中出现的频繁程度</p>
</blockquote>
<h1 id="3-关联分析的评估"><a href="#3-关联分析的评估" class="headerlink" title="3.关联分析的评估"></a>3.关联分析的评估</h1><p>lift计算提升度<br><img src="https://img-blog.csdnimg.cn/9009e01c6d8b4b3f97c3fbca1d456498.png" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%982.5%E2%80%94%E2%80%94%E5%88%86%E7%B1%BB%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>@<a href="数据挖掘2.5——分类">TOC</a></p>
<h1 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1.基本概念"></a>1.基本概念</h1><p><strong>分类</strong><br>找出描述和区分数据类或概念的模型， 以便能够使用模型预测类标号未知的对象的类标号。</p>
<p><strong>概念区分</strong><br>■ 分类与预测<br>• 分类是预测分类（ 离散、 无序） 标号；<br>• 预测建立连续值函数模型；<br>■ 分类与聚类<br>• 分类是有监督学习， 提供了训练元组的类标号；<br>• 聚类是无监督学习， 不依赖有类标号的训练实例；</p>
<h1 id="2-描述分类的一般过程"><a href="#2-描述分类的一般过程" class="headerlink" title="2.描述分类的一般过程"></a>2.描述分类的一般过程</h1><p>■ 学习阶段<br>• 建立描述预先定义的数据类或概念集的分类器<br>• 训练集提供了每个训练元组的类标号， 分类的学习过程，也称为监督学习 (supervised learning)<br>■ 分类阶段<br>• 使用定义好的分类器进行分类的过程</p>
<h1 id="3-掌握朴素贝叶斯分类原理"><a href="#3-掌握朴素贝叶斯分类原理" class="headerlink" title="3.掌握朴素贝叶斯分类原理"></a>3.掌握朴素贝叶斯分类原理</h1><h1 id="4-决策树分类"><a href="#4-决策树分类" class="headerlink" title="4.决策树分类"></a>4.决策树分类</h1><p>决策树算法：</p>
<ul>
<li>Hunt算法</li>
<li>信息增益 Information gain(ID3)</li>
<li>增益比率 Gain ration (ID3，C4.5)</li>
<li>基尼指数—Gini index (SLIQ, SPRINT)<h2 id="4-1-Hunt算法"><a href="#4-1-Hunt算法" class="headerlink" title="4.1 Hunt算法"></a>4.1 Hunt算法</h2>• 贪心策略（局部最优）构建决策树</li>
</ul>
<blockquote>
<p>• 决策树归纳的<strong>设计问题</strong></p>
<ul>
<li>如何分裂训练记录？<br>怎样为不同类型的属性指定测试条件<br>怎样评估每种测试条件</li>
<li>如何停止分裂过程？</li>
</ul>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/fe922b75867e498f8291cf23dacce914.png" alt="在这里插入图片描述"></p>
<h1 id="5-模型的评价"><a href="#5-模型的评价" class="headerlink" title="5.模型的评价"></a>5.模型的评价</h1><h2 id="5-1-准确率的局限"><a href="#5-1-准确率的局限" class="headerlink" title="5.1 准确率的局限"></a>5.1 准确率的局限</h2><p>■ 考虑一个二分类问题</p>
<ul>
<li>0类的实例数 = 9990</li>
<li>1类的实例数 = 10</li>
</ul>
<p>■ 如果模型预测每个实例为0类， 则准确率为</p>
<ul>
<li>准确率是误导</li>
<li>模型不能正确预测任何 而在疾病检测中，1类更需要被关心</li>
</ul>
<h2 id="5-2-其他度量"><a href="#5-2-其他度量" class="headerlink" title="5.2 其他度量"></a>5.2 其他度量</h2><h3 id="1-混淆矩阵"><a href="#1-混淆矩阵" class="headerlink" title="1.混淆矩阵"></a>1.混淆矩阵</h3><p><img src="https://img-blog.csdnimg.cn/ce18eede18df4733bd150e12140e3292.png" alt="在这里插入图片描述"></p>
<blockquote>
<p>第一个字母T对应预测正确，F预测错误<br>第二个字母P对应真实正例，N真实反例</p>
</blockquote>
<ul>
<li>真阳历TP， 真阳性（True positive rate,TPR) 或灵敏度（sensitivity) 、 查全率(recall)<br><em>TPR= TP/(TP+ FN)</em></li>
<li>真阴历TN， 真阴性（True negative rate， TNR) 或特指度 (specificity)<br><em>TNR= TN/(TN+ FP)</em></li>
<li>假阳历FP， 假阳性（False positive rate,FPR) 或误报率<br><em>FPR = FP/(TN + FP)</em></li>
<li>假阴历FN，假阴性(False negative rate, FNR ) ，漏报率（与查全率此消彼长 )<br><em>FNR = FN/(TP + FN)</em></li>
</ul>
<h3 id="2-广泛使用"><a href="#2-广泛使用" class="headerlink" title="2.广泛使用"></a>2.广泛使用</h3><p>召回率（查全率，recall）：所有真实正例中<br>精确率（查准率，precision）：所有预测正例中<br><img src="https://img-blog.csdnimg.cn/2e5fbc0350e04156a57191fcbfc812f0.png" alt="在这里插入图片描述"><br><strong>实例</strong><br><img src="https://img-blog.csdnimg.cn/9e05a505336b4b71aaf522e785b936ec.png" alt="在这里插入图片描述"></p>
<h2 id="5-3-ROC曲线"><a href="#5-3-ROC曲线" class="headerlink" title="5.3 ROC曲线"></a>5.3 ROC曲线</h2><p>■ 前面分类器性能评价的局限性：分类器预测结果为离散的1或者0<br>■ 朴素贝叶斯输出 p(|x y)=<br>■ 其他分类器输出是一个连续的概率值，且同我们仅仅关系“1” 类别的概率</p>
<blockquote>
<p><strong>解决方法</strong>： 连续的值离散化<br><strong>导致的问题</strong>： 离散阈值难以确定</p>
</blockquote>
<p>接收者操作特征曲线（Receiver Operating Characteristic Curve, 或者叫ROC曲线）是一种坐标图式的分析工具， 用于</p>
<ul>
<li>(1)选择最佳的分类模型、 舍弃次佳的模型。</li>
<li>(2)在同一模型中设定最佳阈值。</li>
</ul>
<p>■ ROC曲线下方的区域称为<strong>AUC</strong><br><img src="https://img-blog.csdnimg.cn/781bdaa18a58415a8662ebaf20746991.png" alt="在这里插入图片描述"><br>■ <strong>做法</strong>：</p>
<ul>
<li>首先利用分类器计算每个数据记录的后验概率 P(+|A)</li>
<li>将这些数据记录对应的 P(+|A)从高到低排列（如下表）：<ul>
<li>由低到高，对于每个P(+|A)值(threshold, 阈值），把对应的记录以及那些值高于或等于阈值指派为阳性类positive， 把那些低于阈值指派为阴性类negative</li>
<li>统计TP，FP，TN，FN</li>
<li>计算TPR = TP/(TP+FN)和<br>FPR = FP/(FP+ TN)</li>
</ul>
</li>
<li>绘出诸点(FPR， TPR)并连接它们</li>
</ul>
<h2 id="5-4-过拟合与欠拟合"><a href="#5-4-过拟合与欠拟合" class="headerlink" title="5.4 过拟合与欠拟合"></a>5.4 过拟合与欠拟合</h2><p>■ 分类模型的误差大致分为两种：</p>
<ul>
<li>训练误差： 是在训练记录上误分类样本比例</li>
<li>泛化误差： 是模型在未知记录上的期望误差</li>
</ul>
<p>■ 一个好的分类模型不仅要能够很好的拟合训练数据， 而且对未知样本也要能准确分类。<br>■ 换句话说， 一个好的分类模型必须具有低训练误差和低泛化误差。<br>■ 当训练数据拟合太好的模型（较低训练误差） ， 其泛化误差可能比具有较高训练误差的模型高， 这种情况成为模型过分拟合。</p>
<blockquote>
<p>数据预处理—&gt;模型训练—&gt;模型调整—&gt;对新数据分类—&gt;模型评价</p>
</blockquote>
<p><strong>实例</strong><br>以决策树算法为例：<br>• 当决策树很小时，训练和检验误差都很大，这种情况称为模型拟合不足。出现拟合不足的原因是模型尚未学习到数据的真实结构。<br>• 随着决策树中结点数的增加，模型的训练误差和泛化误差都会随之下降。<br>• 当树的规模变得太大时，即使训练误差还在继续降低，但泛化误差开始增大，导致模型过分拟合。<br><img src="https://img-blog.csdnimg.cn/794f3bdf4b564462898cfbd3f3469fd3.png" alt="在这里插入图片描述"><br><strong>导致过拟合的原因</strong><br>• 训练集规模太大<br>• 训练集中存在大量噪音数据<br>• 训练集规模太小， 训练模型过于复杂</p>
<h1 id="6-基于规则的分类"><a href="#6-基于规则的分类" class="headerlink" title="6.基于规则的分类"></a>6.基于规则的分类</h1>]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%982.6%E2%80%94%E2%80%94%E8%81%9A%E7%B1%BB%20%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    <content><![CDATA[<p>@<a href="数据挖掘2.6——聚类">TOC</a></p>
<h1 id="1-聚类分析概述"><a href="#1-聚类分析概述" class="headerlink" title="1.聚类分析概述"></a>1.聚类分析概述</h1><p>■ 定义<br>• 把数据对象集合按照相似性划分成多个子集的过程<br>• 每个子集是一个簇 (cluster) , 使得簇中的对象<br>彼此相似，但与其他簇中的对象不相似。</p>
<p>■ 与分类的区别<br>无监督学习，给的数据没有类标号信息</p>
<h1 id="2-基本聚类方法"><a href="#2-基本聚类方法" class="headerlink" title="2.基本聚类方法"></a>2.基本聚类方法</h1><h2 id="2-1-划分方法"><a href="#2-1-划分方法" class="headerlink" title="2.1 划分方法"></a>2.1 划分方法</h2><p><strong>■ 定义</strong><br>将有n 个对象的数据集D划分成k个簇，并且k&lt;n，满足如下的要求：<br>• 每个簇至少包含一个对象<br>• 每个对象属于且仅属于一个簇</p>
<p><strong>■ 基本思想</strong><br>• 首先创建一个初始k划分（ k为要构造的划分数）<br>• 然后不断迭代地计算各个簇的聚类中心并依新的聚类中心调整聚类情况，直至收敛</p>
<p><strong>■ 目标</strong><br>• 同一个簇中的对象之间尽可能“接近” 或相关<br>• 不同簇中的对象之间尽可能“远离” 或不同</p>
<p><strong>■ 适用性</strong><br>• 这些启发式算法适合发现中小规模数据库中的球状聚<br>• 对于大规模数据库和处理任意形状的聚类， 这些算法需要进一步扩展</p>
<h3 id="1-Kmeans算法"><a href="#1-Kmeans算法" class="headerlink" title="1.Kmeans算法"></a>1.Kmeans算法</h3><p>Kmeans算法为启发式算法，遵循的寻优原则：每次聚类保证局部最优，随后调整聚类，利用局部最优聚类的上限来不断逼近全局最优。</p>
<p><strong>实例1</strong><br><img src="https://img-blog.csdnimg.cn/0c67f34ebf844e0795824e08cf407f99.png" alt="在这里插入图片描述"><br>其中，m1,m2为两个聚类的中心坐标。</p>
<p><strong>■ 优点</strong><br>• 聚类时间快<br>• 当结果簇是密集的，而簇与簇之间区别明显时， 效果较好<br>• 相对可扩展和有效， 能对大数据集进行高效划分</p>
<p><strong>■ 缺点</strong><br>• 用户必须事先指定聚类簇的个数<br>• 常常终止于局部最优<br>• 只适用于数值属性聚类(计算均值有意义）<br>• 对噪声和异常数据也很敏感<br>• 不同的初始值， 结果可能不同<br>• 不适合发现非凸面形状的簇</p>
<p><strong>■ 问题</strong><br>1.初始簇影响<br><img src="https://img-blog.csdnimg.cn/6b0ea1a732c74556936e1cc5e98bf2d4.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/56f3afdba9b941429e099eeabc574a12.png" alt="在这里插入图片描述"><br>2.数据分布形状<br><img src="https://img-blog.csdnimg.cn/8f4e688067a04a55b9e5f570c3ea39c6.png" alt="在这里插入图片描述"><br>3.数据分散程度<br><img src="https://img-blog.csdnimg.cn/15e0215adadc4ff6b11c7592995be460.png" alt="在这里插入图片描述"><br>4.初始随机种子的影响<br><img src="https://img-blog.csdnimg.cn/9b3a82fb5158470a9641bcdcd51dbc65.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/37c8f48483c3452da84f8d790c430dc8.png" alt="在这里插入图片描述"></p>
<h3 id="2-k-modes算法"><a href="#2-k-modes算法" class="headerlink" title="2.k-modes算法"></a>2.k-modes算法</h3><p>解决数据敏感问题</p>
<h3 id="3-KMeans-算法"><a href="#3-KMeans-算法" class="headerlink" title="3.KMeans++算法"></a>3.KMeans++算法</h3><p>每次选择一个与聚类中心距离最大的点作为新的聚类中心。<br>KMeans++效果：解决初始点选择问题。<br><img src="https://img-blog.csdnimg.cn/c785919ea30f482cac3ee84ac81a8161.png" alt="在这里插入图片描述"></p>
<h3 id="4-k-中心点"><a href="#4-k-中心点" class="headerlink" title="4.k-中心点"></a>4.k-中心点</h3><p>选择簇中位置最中心的实际对象为中心点，基于最小化<strong>所有</strong>对象与其的相异度<strong>之和</strong>来划分。<br><strong>优点</strong>：解决对离群值敏感的问题。<br>划分方法聚类质量评价准则：最小化E值。</p>
<p><strong>基本思想</strong><br>• 首先为每个簇随意选择一个代表对象，剩余的对象根据其与代表对象的距离分配给最近的一个簇<br>• 然后迭代地用非代表对象来替代代表对象，以改进聚类的质量(找更好的代表对象）<br>• 聚类结果的质量用一个代价函数来估算，该函数评估了对象与其参照对象之间的平均相异度</p>
<p><strong>PAM算法实例</strong><br><img src="https://img-blog.csdnimg.cn/664546f0a2c8449f9defdd1ea929b669.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/f71d981dc1ad436b86a056635f7af063.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/5e60f28c176c4752b63da6f5318d14cf.png" alt="在这里插入图片描述"></p>
<h2 id="2-2-层次方法"><a href="#2-2-层次方法" class="headerlink" title="2.2 层次方法"></a>2.2 层次方法</h2><h2 id="2-3基于密度的方法"><a href="#2-3基于密度的方法" class="headerlink" title="2.3基于密度的方法"></a>2.3基于密度的方法</h2><p>根据密度条件对邻近对象分组形成簇，簇的增长或者根据邻域密度，或者根据特定的密度函数(只要临近区域的密度超过某个阈值，就继续聚类）。</p>
<p>■ 主要特点<br>• 发现任意形状的聚类<br>• 处理噪音<br>• 一遍扫描<br>• 需要密度参数作为终止条件</p>
<p>■ 缺点<br>对用户定义的参数是敏感的，参数难以确定(特别是对于高维数据)，设置的细微不同可能导致差别很大的聚类。全局密度参数不能刻画内在的聚类结构。</p>
<h1 id="3-聚类评估"><a href="#3-聚类评估" class="headerlink" title="3.聚类评估"></a>3.聚类评估</h1><p>估计在数据集上进行聚类的可行性，和被聚类方法产生的结果的质量。</p>
<p>■ 聚类评估的<strong>任务</strong><br>• 估计聚类趋势：评估数据集是否存在非随机结构。<br>• 确定数据集中的簇数：在聚类之前，估计簇数。<br>• 测定聚类质量：聚类之后，评估结果簇的质量。</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E6%95%B0%E6%8D%AE%E6%96%B0%E9%97%BB%E5%A4%A7%E8%B5%9B/</url>
    <content><![CDATA[<p>@<a href="数据新闻">TOC</a><br>注：<br>由于网页基调为深蓝色，因此HTML格式图片背景色均为深蓝#323a5e。</p>
<h1 id="分布地图"><a href="#分布地图" class="headerlink" title="分布地图"></a>分布地图</h1><h2 id="院士家乡图"><a href="#院士家乡图" class="headerlink" title="院士家乡图"></a>院士家乡图</h2><p>先爬取科学院院士官网，通过正则法则的分词处理每位院士的介绍，将所有科学院院士名单爬下来。<br>然后对名单所在的家乡地进行count统计。<br>最后调用pyercharts，绘制Html网页版的院士家乡个数分布图。<br><img src="https://img-blog.csdnimg.cn/3d8632c5af1140e7b8d05b8372c831e1.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p>
<h2 id="本科院校分布图"><a href="#本科院校分布图" class="headerlink" title="本科院校分布图"></a>本科院校分布图<img src="https://img-blog.csdnimg.cn/9be98248fb754f9c8bc508be125fa1f7.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></h2><h1 id="词云图"><a href="#词云图" class="headerlink" title="词云图"></a>词云图</h1><p>爬取微博<a href="https://m.weibo.cn/2656274875/4687873717044893网页成txt文本，对关键词进行提取，然后对需要的部分进行分词。">https://m.weibo.cn/2656274875/4687873717044893网页成txt文本，对关键词进行提取，然后对需要的部分进行分词。</a><br>最后选择一张分届明显、形状分明的图片，生成词云图。<br><img src="https://img-blog.csdnimg.cn/c4c4a42a551d4ef39bc087a6ff4bb45d.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="请添加图片描述"></p>
<h1 id="拖拉交互柱形图"><a href="#拖拉交互柱形图" class="headerlink" title="拖拉交互柱形图"></a>拖拉交互柱形图</h1><h2 id="每个省份的本科院校数"><a href="#每个省份的本科院校数" class="headerlink" title="每个省份的本科院校数"></a>每个省份的本科院校数</h2><p><img src="https://img-blog.csdnimg.cn/3d0bef8c56604b6dae0a1f82893d72b5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h1 id="单轴气泡图"><a href="#单轴气泡图" class="headerlink" title="单轴气泡图"></a>单轴气泡图</h1><h2 id="各国教育投入经费"><a href="#各国教育投入经费" class="headerlink" title="各国教育投入经费"></a>各国教育投入经费</h2><p>爬取网页后，对数据进行excel处理后，生成单轴气泡图。<br><img src="https://img-blog.csdnimg.cn/f951917b3ce34cbf8e3a61f6f688e1d5.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h1 id="饼图"><a href="#饼图" class="headerlink" title="饼图"></a>饼图</h1><h2 id="2019年世界各国经费分布饼图"><a href="#2019年世界各国经费分布饼图" class="headerlink" title="2019年世界各国经费分布饼图"></a>2019年世界各国经费分布饼图</h2><p><img src="https://img-blog.csdnimg.cn/4bcc0b4fd179437ab3306246ea21e4d3.png?x-oss-process=image/watermark,type_ZHJvaWRzYW5zZmFsbGJhY2s,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E8%87%AA%E5%8A%A8%E7%BB%98%E5%88%B6%E5%90%89%E7%A5%A5%E7%89%A9/</url>
    <content><![CDATA[<p><a href="https://lightrain.top/2022/02/12/%E4%BA%BA%E6%89%8B%E4%B8%80%E5%A2%A9%20%E2%80%94%E2%80%94%20python%E8%87%AA%E5%8A%A8%E7%BB%98%E5%88%B6%E5%86%B0%E5%A2%A9%E5%A2%A9/#more">源码！！！</a>.</p>
<p>turtle绘制，然后opencv识别图像边缘，自动绘制（黑白、彩色）。</p>
]]></content>
  </entry>
  <entry>
    <title>蓝桥杯python组省一</title>
    <url>/2022/05/01/%E8%93%9D%E6%A1%A5%E6%9D%AFPython%E7%BB%84%E7%9C%81%E4%B8%80%E5%87%86%E5%A4%87%E8%BF%87%E7%A8%8B%E5%A4%8D%E7%9B%98/</url>
    <content><![CDATA[<p>把准备的全部代码整理了一下，也是自己的一个小复盘。</p>
 <span id="more"></span>
<h1 id="写在最前面"><a href="#写在最前面" class="headerlink" title="写在最前面"></a>写在最前面</h1><p>通过十天左右的认真学习和准备，拿到了python组省一和国赛资格。给予了代码路上更大的自信，现在写起代码跟吃了德芙一样丝滑，报错解决就和喝水一样顺气自然。<br>不得不说，自信对于写代码解决报错而言真是个好东西(<em>^▽^</em>)<br><img src="https://img-blog.csdnimg.cn/37902733fc7749a28cd72b61ebb5d120.png" alt="在这里插入图片描述"></p>
<h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p><img src="https://img-blog.csdnimg.cn/9fd612b7a69040eab7db762e31a9556b.png" alt="在这里插入图片描述"></p>
<h1 id="各版块内容"><a href="#各版块内容" class="headerlink" title="各版块内容"></a>各版块内容</h1><p><a href="https://blog.csdn.net/wtyuong/article/details/124547334">蓝桥杯系列1——python组真题</a><br><a href="https://blog.csdn.net/wtyuong/article/details/124547334">https://blog.csdn.net/wtyuong/article/details/124547334</a><br><a href="https://blog.csdn.net/wtyuong/article/details/124553971">蓝桥杯系列2——python基本语法</a><br><a href="https://blog.csdn.net/wtyuong/article/details/124553971">https://blog.csdn.net/wtyuong/article/details/124553971</a><br><a href="https://blog.csdn.net/wtyuong/article/details/124560369">蓝桥杯系列3——基础算法</a><br><a href="https://blog.csdn.net/wtyuong/article/details/124560369">https://blog.csdn.net/wtyuong/article/details/124560369</a><br><a href="https://blog.csdn.net/wtyuong/article/details/124560407">蓝桥杯系列4——python基础练习</a><br><a href="https://blog.csdn.net/wtyuong/article/details/124560407">https://blog.csdn.net/wtyuong/article/details/124560407</a><br><a href="https://blog.csdn.net/wtyuong/article/details/124560438">蓝桥杯系列5——填空题练习</a><br><a href="https://blog.csdn.net/wtyuong/article/details/124560438">https://blog.csdn.net/wtyuong/article/details/124560438</a><br><a href="https://blog.csdn.net/wtyuong/article/details/124560522">蓝桥杯系列6——python技巧</a><br><a href="https://blog.csdn.net/wtyuong/article/details/124560522">https://blog.csdn.net/wtyuong/article/details/124560522</a></p>
<h1 id="全部"><a href="#全部" class="headerlink" title="全部"></a>全部</h1><p><a href="https://download.csdn.net/download/WTYuong/85274463">我准备蓝桥杯python组时全部的代码及结果，供时间不太够的同学冲击省一。</a></p>
<p><a href="https://download.csdn.net/download/WTYuong/85274463">https://download.csdn.net/download/WTYuong/85274463</a></p>
<p>其实博客内容基本都覆盖了，主要是里面是.ipynb文件版本，可以直接跑，并且更方便做笔记。也欢迎在博客下面留言邮箱，如果看到也会发过去滴(<em>╹▽╹</em>)</p>
<h1 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h1><p>由于平时用python相较其他语言更多，希望有一个能系统重新学习python的契机，因此报的python组。<br>最开始看了很多如何准备，热血沸腾，立即在番茄ToDo制定了100h计划，但不习惯软件辅助计时，除了注册后没就没打开过了，但感觉准备时间累计零零散散差不多也有40h左右。<br>然后学校给我们开了蓝桥杯的练习系统，顺着基础练习刷了一些，一题就几行代码给了我莫大的自信٩꒰▽ ꒱۶⁼³₌₃ 。<br><img src="https://img-blog.csdnimg.cn/224af47752b441a883c005eda1ee702a.png" alt="在这里插入图片描述"><br>然后逐渐有了手感，最基本的输入输出、杨辉三角（循环，if判断，递归）等等捡起来了。<br><img src="https://img-blog.csdnimg.cn/2a1ef2c5824f4180af233a3abcecad08.png" alt="在这里插入图片描述"><br>就二月准备了一下，中间去玩其他比赛了(๑╹ヮ╹๑)ﾉ ，其他比赛也都取得了比预期更好的成绩hhh，不得不说自己运气这方面一直比较顶，有想一起参赛的可以找我呀嘿嘿。<br>在之后准备是比赛前五天，倒数第五天把往届真题做了一下，题目很有意思，就是两题写一个下午，一天只写了几题。。。。速度太慢了，因此不是很想准备了来着<em>(´ཀ`」∠)</em>。<br>倒数第四天清理旧课本想回收，意外把之前上课的课本又看了一遍，不得不说教材写的真好，可惜第一次学的时候懵懵懂懂hhh（最后课本被我自己留下来了，还额外买了几本感兴趣的python教程 (((o(<em>ﾟ▽ﾟ</em>)o)))♡<br><img src="https://img-blog.csdnimg.cn/5f7c76da92024a458db643c44e20a3d3.png" alt="在这里插入图片描述"><br>倒数第三天，对照着菜鸟教程敲了一些基本语法<em>φ</em>(．．) 。（感谢前男友的之前的提醒，最基本的变量要理解清白，python基础确实很重要）。<br><img src="https://img-blog.csdnimg.cn/a1d37fd6811b4e17a07dbf9885bdaf69.png" alt="在这里插入图片描述"><br>倒数第二天，小题和技巧练习（内置函数）。<br><img src="https://img-blog.csdnimg.cn/aa49bacecd124515aa3047b5872063cc.png" alt="在这里插入图片描述"></p>
<p>倒数最后一天，发现了一个宝藏博主代码随想录的算法教程，他讲的好有意思！所以不知不觉学了一天算法٩(๑❛ᴗ❛๑)۶，把之前美赛自己琢磨的dp给系统化了，一下有点通的感觉hhh。然后学习了prim算法：最小生成树。</p>
<blockquote>
<p>完整版，⼤家可以直接看代码随想录网站：<a href="https://programmercarl.com/">https://programmercarl.com/</a> 。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/45a17d7838f649c993af7ab01c39a4ff.png" alt="在这里插入图片描述"></p>
<p>同学说只准备了一天一夜，和大佬还有很大的差距hhh，但是准备一下拿个省一也是很快乐的(～￣▽￣)～<br>能刷到这篇博客都是认真准备的同学，加油我们都可以！冲！</p>
]]></content>
      <categories>
        <category>蓝桥杯python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯系列1——真题</title>
    <url>/2022/05/02/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%B3%BB%E5%88%971%E2%80%94%E2%80%94python%E7%BB%84%E7%9C%9F%E9%A2%98/</url>
    <content><![CDATA[<p>把准备的全部代码整理了一下，也是自己的一个小复盘。</p>
 <span id="more"></span>
<h1 id="零"><a href="#零" class="headerlink" title="零"></a>零</h1><p>考完复盘，自认为练习真题进步最快。这个可能每个人不一样，仅供参考。<br>但前期可以先练习一下，做做小题把基础打好。我最开始直接写杨辉三角形，写了差不多一整天，后来练小题有手感后，一个下午能做两题|ू･ω･` )</p>
<h1 id="一"><a href="#一" class="headerlink" title="一"></a>一</h1><p>这个博主整理了几乎所有Python组蓝桥杯题目及代码U•ェ•*U，解锁专栏只要10r，物超所值。如果时间充裕，或者想冲击省一前几名，可以支持一下 ᕦ(･ㅂ･)ᕤ<br><a href="https://bigsmart.blog.csdn.net/article/details/103641497">https://bigsmart.blog.csdn.net/article/details/103641497</a></p>
<h1 id="二"><a href="#二" class="headerlink" title="二"></a>二</h1><p>我看代码时看不进去o(╥﹏╥)o，所以看上面博客时主要是看思路，然后自己再手敲一遍。他的思路真的是秒，叹为观止。但其中还有部分没满分的，我请学院老师帮忙拿到了答案，好像蓝桥杯系统老师端口有标答，其他题目没有的可以问问负责老师。</p>
<h1 id="三"><a href="#三" class="headerlink" title="三"></a>三</h1><p>练习真题这部分是我耗时最久的部分，因为python语言性质决定了，暴力算法很难拿满分，所以不断优化版本花了较长的时间，但这部分收获也是最大的。</p>
<h1 id="真题题型"><a href="#真题题型" class="headerlink" title="真题题型"></a>真题题型</h1><p>字符串算法、排序算法、递归、最小生成树之prim算法、dfs算法、贪婪算法、动态规划</p>
<h1 id="PREV-282-杨辉三角形【第十二届】【省赛】【B组】"><a href="#PREV-282-杨辉三角形【第十二届】【省赛】【B组】" class="headerlink" title="PREV-282    杨辉三角形【第十二届】【省赛】【B组】"></a>PREV-282    杨辉三角形【第十二届】【省赛】【B组】</h1><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><img src="https://img-blog.csdnimg.cn/59825c2adabe402587e93d15ff1847b2.png" alt="在这里插入图片描述"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_44091134/article/details/116748883">https://blog.csdn.net/weixin_44091134/article/details/116748883</a></p>
<h2 id="版本1-得分20"><a href="#版本1-得分20" class="headerlink" title="版本1 得分20"></a>版本1 得分20</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 杨辉三角 超时了得分：20</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">output</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">if</span> n == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        sanjiao=[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            sanjiao.append([<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>)])</span><br><span class="line">            <span class="keyword">if</span> i &gt;= <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,i):</span><br><span class="line">                    sanjiao[i][j]=sanjiao[i-<span class="number">1</span>][j-<span class="number">1</span>]+sanjiao[i-<span class="number">1</span>][j]</span><br><span class="line">                    <span class="keyword">if</span> sanjiao[i][j] == n:</span><br><span class="line">                        result=(<span class="number">1</span>+i)*i/<span class="number">2</span>+j+<span class="number">1</span></span><br><span class="line">                        <span class="built_in">print</span>(sanjiao)</span><br><span class="line">                        <span class="keyword">return</span> result   </span><br><span class="line"></span><br><span class="line">N=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(output(N)))</span><br></pre></td></tr></table></figure>
<pre><code>20
[[1], [1, 1], [1, 2, 1], [1, 3, 3, 1], [1, 4, 6, 4, 1], [1, 5, 10, 10, 5, 1], [1, 6, 15, 20, 1, 1, 1]]
25
</code></pre><h2 id="版本2-得分40"><a href="#版本2-得分40" class="headerlink" title="版本2 得分40"></a>版本2 得分40</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 杨辉三角 二项式定理 M=C(N,i)=n!/((n-i)!i!) 超时了 得分：40</span></span><br><span class="line"><span class="comment"># (sanjiao[i][j]=i!/((i-j)!j!)</span></span><br><span class="line"><span class="keyword">import</span> math </span><br><span class="line"></span><br><span class="line">row = <span class="number">3</span></span><br><span class="line">max1 = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">if</span> row%<span class="number">2</span> !=<span class="number">0</span>:</span><br><span class="line">        max1 = <span class="number">2</span>*max1</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        max1 = <span class="number">2</span>*max1*(row-<span class="number">1</span>)//row</span><br><span class="line">    <span class="built_in">print</span>(row,max1)</span><br><span class="line"><span class="comment">#     if max1&gt;515927503:</span></span><br><span class="line"><span class="comment">#         print(row)</span></span><br><span class="line">    row = row+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> row &gt;<span class="number">11</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>3 2
4 3
5 6
6 10
7 20
8 35
9 70
10 126
11 252
</code></pre><h2 id="版本3-标答-100分"><a href="#版本3-标答-100分" class="headerlink" title="版本3 标答 100分"></a>版本3 标答 100分</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">C</span>(<span class="params">a,b</span>):</span> <span class="comment"># 计算组合值</span></span><br><span class="line">    res=<span class="number">1</span></span><br><span class="line">    tmp=a</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">1</span>+b):</span><br><span class="line">        res=res*tmp//j <span class="comment">#累除取余j</span></span><br><span class="line">        <span class="keyword">if</span> res &gt; n:</span><br><span class="line">            <span class="keyword">return</span> res  <span class="comment">#大于n已无意义，且防止爆LL</span></span><br><span class="line">        tmp = tmp -<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">k</span>):</span></span><br><span class="line">    <span class="comment"># 二分该斜行,找到大于等于该值的第一个数</span></span><br><span class="line">    <span class="comment"># 左边界2k，右边界为max(l, n)取二者最大，避免右边界小于左边界</span></span><br><span class="line">    l,r=k*<span class="number">2</span>,<span class="built_in">max</span>(<span class="number">1</span>,n)</span><br><span class="line">    <span class="keyword">while</span> l&lt;r :</span><br><span class="line">        mid =l+r &gt;&gt;<span class="number">1</span></span><br><span class="line">        <span class="comment"># print(mid,k)</span></span><br><span class="line">        <span class="keyword">if</span> C(mid ,k)&gt;=n:</span><br><span class="line">            r=mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            l=mid+<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> C(r,k)!=n:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="built_in">print</span>(r*(r+<span class="number">1</span>)//<span class="number">2</span>+k+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> n==<span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    k=<span class="number">16</span> <span class="comment"># 从第16斜行枚举</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> check(k):</span><br><span class="line">        k=k-<span class="number">1</span></span><br></pre></td></tr></table></figure>
<pre><code>6
13
</code></pre><h1 id="PREV-279-时间显示【第十二届】【省赛】【B组】"><a href="#PREV-279-时间显示【第十二届】【省赛】【B组】" class="headerlink" title="PREV-279    时间显示【第十二届】【省赛】【B组】"></a>PREV-279    时间显示【第十二届】【省赛】【B组】</h1><h2 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h2><p><img src="https://img-blog.csdnimg.cn/b7d4f90136614f7dbdaa5a65dad72202.png" alt="在这里插入图片描述"></p>
<h2 id="得分100"><a href="#得分100" class="headerlink" title="得分100"></a>得分100</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">n = n / <span class="number">1000</span></span><br><span class="line">H = n // (<span class="number">60</span>*<span class="number">60</span>)</span><br><span class="line">M = (n-H*<span class="number">3600</span>)//<span class="number">60</span></span><br><span class="line">S = n%<span class="number">60</span></span><br><span class="line"><span class="keyword">if</span> H &gt; <span class="number">24</span>:</span><br><span class="line">    H = H % <span class="number">24</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.2d:%.2d:%.2d&#x27;</span>%(H,M,S))</span><br></pre></td></tr></table></figure>
<pre><code>1111111
00:18:31
</code></pre><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">3</span>//<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(<span class="number">3</span>/<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.2d:%.2d:%.2d&#x27;</span>%(<span class="number">13</span>,<span class="number">0</span>,<span class="number">1</span>)) <span class="comment">#%.2d格式化输出两位整数</span></span><br></pre></td></tr></table></figure>
<pre><code>1
1
13:00:01
</code></pre><h1 id="PREV-276-双向排序【第十二届】【省赛】【B组】"><a href="#PREV-276-双向排序【第十二届】【省赛】【B组】" class="headerlink" title="PREV-276    双向排序【第十二届】【省赛】【B组】"></a>PREV-276    双向排序【第十二届】【省赛】【B组】</h1><h2 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h2><p><img src="https://img-blog.csdnimg.cn/2606dd5e64b64143be25f55d296e1020.png" alt="在这里插入图片描述"></p>
<h2 id="版本1-得分60"><a href="#版本1-得分60" class="headerlink" title="版本1 得分60"></a>版本1 得分60</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 超时 得分60</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sheng</span>(<span class="params">num,x</span>):</span></span><br><span class="line">    a = <span class="built_in">sorted</span>(num[x-<span class="number">1</span>:])</span><br><span class="line">    num[x-<span class="number">1</span>:]=a</span><br><span class="line"><span class="comment">#     print(num)</span></span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jiang</span>(<span class="params">num,x</span>):</span></span><br><span class="line">    b = <span class="built_in">sorted</span>(num[:x],reverse=<span class="literal">True</span>)</span><br><span class="line">    num[:x]=b</span><br><span class="line">    <span class="keyword">return</span> num</span><br><span class="line"></span><br><span class="line">n,m=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">num=[i+<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">    p,q=<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    <span class="keyword">if</span> p == <span class="number">0</span>:</span><br><span class="line">        num = jiang(num,q)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        num = sheng(num,q)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">print</span>(num[i],end=<span class="string">&#x27; &#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>3 3
0 3
[3, 2, 1]
1 2
[3, 1, 2]
0 2
[3, 1, 2]
3 1 2 
</code></pre><h2 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h2><p>num[x-1:x]</p>
<p>左闭右开 (x-1,x-1)</p>
<h2 id="版本2-标答"><a href="#版本2-标答" class="headerlink" title="版本2 标答"></a>版本2 标答</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">	n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">	nums = [i + <span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">	seq = []  <span class="comment"># 用于存储操作序列</span></span><br><span class="line">	<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">		p, q = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line">		<span class="keyword">if</span> p == <span class="number">0</span>:</span><br><span class="line">			<span class="keyword">while</span> seq <span class="keyword">and</span> seq[-<span class="number">1</span>][<span class="number">0</span>] == <span class="number">0</span>:  </span><br><span class="line">				q = <span class="built_in">max</span>(q, seq[-<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">				seq.pop()</span><br><span class="line">			<span class="keyword">while</span> <span class="built_in">len</span>(seq) &gt; <span class="number">1</span> <span class="keyword">and</span> seq[-<span class="number">2</span>][<span class="number">1</span>] &lt;= q:  </span><br><span class="line">				seq.pop()</span><br><span class="line">				seq.pop()</span><br><span class="line">			seq.append((<span class="number">0</span>, q))</span><br><span class="line">		<span class="keyword">elif</span> seq:  </span><br><span class="line">			<span class="keyword">while</span> seq <span class="keyword">and</span> seq[-<span class="number">1</span>][<span class="number">0</span>] == <span class="number">1</span>: </span><br><span class="line">				q = <span class="built_in">min</span>(q, seq[-<span class="number">1</span>][<span class="number">1</span>])</span><br><span class="line">				seq.pop()</span><br><span class="line">			<span class="keyword">while</span> <span class="built_in">len</span>(seq) &gt; <span class="number">1</span> <span class="keyword">and</span> seq[-<span class="number">2</span>][<span class="number">1</span>] &gt;= q:  </span><br><span class="line">				seq.pop()</span><br><span class="line">				seq.pop()</span><br><span class="line">			seq.append((<span class="number">1</span>, q))</span><br><span class="line"></span><br><span class="line">	k, left, right = n, <span class="number">1</span>, n</span><br><span class="line">	<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(seq)):</span><br><span class="line">		<span class="keyword">if</span> seq[i][<span class="number">0</span>] == <span class="number">0</span>:  <span class="comment"># 前缀降序</span></span><br><span class="line">			<span class="keyword">while</span> right &gt; seq[i][<span class="number">1</span>] <span class="keyword">and</span> left &lt;= right:</span><br><span class="line">				nums[right - <span class="number">1</span>] = k		<span class="comment"># 从后往前设置</span></span><br><span class="line">				right -= <span class="number">1</span></span><br><span class="line">				k -= <span class="number">1</span></span><br><span class="line">		<span class="keyword">else</span>:  <span class="comment"># 后缀升序</span></span><br><span class="line">			<span class="keyword">while</span> left &lt; seq[i][<span class="number">1</span>] <span class="keyword">and</span> left &lt;= right:</span><br><span class="line">				nums[left - <span class="number">1</span>] = k		<span class="comment"># 从前往后设置</span></span><br><span class="line">				left += <span class="number">1</span></span><br><span class="line">				k -= <span class="number">1</span></span><br><span class="line">		<span class="keyword">if</span> left &gt; right:</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> <span class="built_in">len</span>(seq) % <span class="number">2</span>:   <span class="comment"># 最后一次操作为前缀降序</span></span><br><span class="line">		<span class="keyword">while</span> left &lt;= right:</span><br><span class="line">			nums[left - <span class="number">1</span>] = k</span><br><span class="line">			left += <span class="number">1</span></span><br><span class="line">			k -= <span class="number">1</span></span><br><span class="line">	<span class="keyword">else</span>:				<span class="comment"># 最后一次操作为后缀升序</span></span><br><span class="line">		<span class="keyword">while</span> left &lt;= right:</span><br><span class="line">			nums[right - <span class="number">1</span>] = k</span><br><span class="line">			right -= <span class="number">1</span></span><br><span class="line">			k -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, nums)))</span><br></pre></td></tr></table></figure>
<pre><code>3 3
0 3
1 2
0 2
3 1 2
</code></pre><h1 id="PREV-271-括号序列【第十二届】【省赛】【B组】"><a href="#PREV-271-括号序列【第十二届】【省赛】【B组】" class="headerlink" title="PREV-271    括号序列【第十二届】【省赛】【B组】"></a>PREV-271    括号序列【第十二届】【省赛】【B组】</h1><h2 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h2><p><img src="https://img-blog.csdnimg.cn/1fb6623a14084ff6b88384170d6f181f.png" alt="在这里插入图片描述"></p>
<h2 id="策略"><a href="#策略" class="headerlink" title="策略"></a>策略</h2><p>不会，之后遇到可以直接放弃</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="PREV-263-砝码称重【第十二届】【省赛】【B组】"><a href="#PREV-263-砝码称重【第十二届】【省赛】【B组】" class="headerlink" title="PREV-263    砝码称重【第十二届】【省赛】【B组】"></a>PREV-263    砝码称重【第十二届】【省赛】【B组】</h1><h2 id="题目-4"><a href="#题目-4" class="headerlink" title="题目"></a>题目</h2><p><img src="https://img-blog.csdnimg.cn/c5c3825cfdca4d8a8dbcc45a396e89ec.png" alt="在这里插入图片描述"></p>
<h2 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]<span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)]</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure>
<pre><code>[[0, 0, 0], [0, 0, 0]]
</code></pre><h2 id="版本1-得分80"><a href="#版本1-得分80" class="headerlink" title="版本1 得分80"></a>版本1 得分80</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 超时 得分80</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">array = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">sum1 = <span class="built_in">sum</span>(array)</span><br><span class="line">a_len = <span class="built_in">len</span>(array)</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line">dp = [[<span class="number">0</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(sum1+<span class="number">1</span>)] <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(a_len)]</span><br><span class="line"></span><br><span class="line">dp[<span class="number">0</span>][array[<span class="number">0</span>]]=<span class="number">1</span> <span class="comment"># no1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,a_len):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,sum1+<span class="number">1</span>):</span><br><span class="line">        dp[i][j]=dp[i-<span class="number">1</span>][j] <span class="comment"># copy 对于当前的复制前一个的重量</span></span><br><span class="line">    dp[i][array[i]]=<span class="number">1</span> <span class="comment"># 当前状态是可称的</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, sum1+<span class="number">1</span>): <span class="comment"># 最大重量为所有砝码重量总和</span></span><br><span class="line">        <span class="keyword">if</span>(dp[i-<span class="number">1</span>][j]): <span class="comment">#pre=1 上一个状态的重量</span></span><br><span class="line">            dp[i][j+array[i]] = <span class="number">1</span> <span class="comment"># 上一状态的重量在加上当前重量</span></span><br><span class="line">            dp[i][<span class="built_in">abs</span>(j-array[i])]=<span class="number">1</span> <span class="comment"># 上一个状态的重量减去当前状态的重量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,sum1+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span>(dp[n-<span class="number">1</span>][i]):</span><br><span class="line">        ans += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ans)</span><br><span class="line"><span class="comment"># print(dp)</span></span><br></pre></td></tr></table></figure>
<pre><code>3
1 4 6
10
</code></pre><h2 id="版本2-标答-1"><a href="#版本2-标答-1" class="headerlink" title="版本2 标答"></a>版本2 标答</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br><span class="line">weights = [<span class="built_in">eval</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">input</span>().split()]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">solution</span>(<span class="params">weights</span>):</span></span><br><span class="line">	counts = <span class="built_in">set</span>()</span><br><span class="line">	<span class="keyword">for</span> weight <span class="keyword">in</span> weights:</span><br><span class="line">		to_add = []</span><br><span class="line">		to_add.append(weight)</span><br><span class="line">		<span class="keyword">for</span> count <span class="keyword">in</span> counts:</span><br><span class="line">			same = weight  + count</span><br><span class="line">			different = <span class="built_in">abs</span>(weight - count)</span><br><span class="line">			<span class="keyword">if</span> same <span class="keyword">not</span> <span class="keyword">in</span> counts:</span><br><span class="line">				to_add.append(same)</span><br><span class="line">			<span class="keyword">if</span> different <span class="keyword">not</span> <span class="keyword">in</span> counts:</span><br><span class="line">				to_add.append(different)</span><br><span class="line">		<span class="keyword">for</span> new_count <span class="keyword">in</span> to_add:</span><br><span class="line">			counts.add(new_count)</span><br><span class="line">	result = <span class="built_in">len</span>(counts)</span><br><span class="line">	<span class="keyword">if</span> <span class="number">0</span> <span class="keyword">in</span> counts:</span><br><span class="line">		<span class="keyword">return</span> result -<span class="number">1</span> </span><br><span class="line">	<span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(solution(weights))</span><br></pre></td></tr></table></figure>
<pre><code>3
1 4 6
10
</code></pre><h1 id="PREV-226-回文日期【第十一届】【省赛】【B组】"><a href="#PREV-226-回文日期【第十一届】【省赛】【B组】" class="headerlink" title="PREV-226    回文日期【第十一届】【省赛】【B组】"></a>PREV-226    回文日期【第十一届】【省赛】【B组】</h1><h2 id="题目-5"><a href="#题目-5" class="headerlink" title="题目"></a>题目</h2><p><img src="https://img-blog.csdnimg.cn/7f245f1724d54e209c895623e928ed96.png" alt="在这里插入图片描述"></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p>需要给出输入日期的 下一个回文日期 和 下一个 ABABBABA 型的日期 。<br>所以从输入的数开始，每次循环+1。</p>
<p>用 date 表示输入的数。<br>输出的第一个数，需要判断 date 是否为合法日期和回文数。<br>输出的第二个数，除了需要上面的判断外，还需要判断是否为 ABABBABA 型的数。</p>
<p>我们可以使用3个函数判断以上三个条件</p>
<p>一、判断是否为合法日期<br>判断一个数是否为合法日期，只需要看月份和天数是否能够合法，比如：<br>1、3、5、7、8、10、12月，有31天；<br>4、6、9、11月，有30天；<br>2月 需要单独进行判断，如果年份为 闰年 ，2月有29天，否则2月只有28天。</p>
<p>二、判断是否为回文数</p>
<p>法1：将一个数直接逆序后判断是否相等</p>
<p>法2：<br>将数字转化为字符串，定义两个指针，分别在左端和右端。<br>判断左右两端的字符是否一样，如果一样则左右指针都向内移动一位，依次进行判断。<br>只要有一位不相同，就可以直接返回 false 。<br>两个指针相遇的时候，代表字符串内的全部字符已经比较完毕，没有需要不相同的，返回 true 。</p>
<p>三、判断 ABABBABA 型数</p>
<p>法1：</p>
<p>直接将这个数分解“强行”判断</p>
<p>法2：<br>只需判断字符串的第 0 , 2 , 5 , 7 位是否相同，和字符串的第 1 , 3 , 4 , 6  位是否相同</p>
<h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/ZZZWWWFFF_/article/details/122867786">https://blog.csdn.net/ZZZWWWFFF_/article/details/122867786</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="string">&#x27;01&#x27;</span>,<span class="string">&#x27;02&#x27;</span>,<span class="string">&#x27;03&#x27;</span>,<span class="string">&#x27;04&#x27;</span>,<span class="string">&#x27;05&#x27;</span>,<span class="string">&#x27;06&#x27;</span>,<span class="string">&#x27;07&#x27;</span>,<span class="string">&#x27;08&#x27;</span>,<span class="string">&#x27;09&#x27;</span>,<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;11&#x27;</span>,<span class="string">&#x27;12&#x27;</span>]<span class="comment">#月份</span></span><br><span class="line">b=[<span class="string">&#x27;01&#x27;</span>, <span class="string">&#x27;02&#x27;</span>, <span class="string">&#x27;03&#x27;</span>, <span class="string">&#x27;04&#x27;</span>, <span class="string">&#x27;05&#x27;</span>, <span class="string">&#x27;06&#x27;</span>, <span class="string">&#x27;07&#x27;</span>, <span class="string">&#x27;08&#x27;</span>, <span class="string">&#x27;09&#x27;</span>, <span class="string">&#x27;10&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;13&#x27;</span>, <span class="string">&#x27;14&#x27;</span>, <span class="string">&#x27;15&#x27;</span>, <span class="string">&#x27;16&#x27;</span>, <span class="string">&#x27;17&#x27;</span>, <span class="string">&#x27;18&#x27;</span>, <span class="string">&#x27;19&#x27;</span>, <span class="string">&#x27;20&#x27;</span>, <span class="string">&#x27;21&#x27;</span>, <span class="string">&#x27;22&#x27;</span>, <span class="string">&#x27;23&#x27;</span>, <span class="string">&#x27;24&#x27;</span>, <span class="string">&#x27;25&#x27;</span>, <span class="string">&#x27;26&#x27;</span>, <span class="string">&#x27;27&#x27;</span>, <span class="string">&#x27;28&#x27;</span>, <span class="string">&#x27;29&#x27;</span>, <span class="string">&#x27;30&#x27;</span>, <span class="string">&#x27;31&#x27;</span>]<span class="comment">#日期</span></span><br><span class="line">s=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>,<span class="number">9000</span>): <span class="comment"># 月份+日期</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">str</span>(i)[::-<span class="number">1</span>][:<span class="number">2</span>] <span class="keyword">in</span> a <span class="keyword">and</span> <span class="built_in">str</span>(i)[::-<span class="number">1</span>][<span class="number">2</span>:] <span class="keyword">in</span> b: <span class="comment"># a是月份，b是日期</span></span><br><span class="line">        <span class="comment"># print(str(i),str(i)[::-1])</span></span><br><span class="line">        s.append(<span class="built_in">str</span>(i)+<span class="built_in">str</span>(i)[::-<span class="number">1</span>]) <span class="comment"># str(i)[::-1]为回文年份</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:<span class="comment">#去除不合法二月日期</span></span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">4</span>:<span class="number">6</span>]==<span class="string">&#x27;02&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(i)%<span class="number">400</span>!=<span class="number">0</span> <span class="keyword">and</span> <span class="built_in">int</span>(i[<span class="number">6</span>:])&gt;<span class="number">28</span>:</span><br><span class="line">            s.remove(i)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(i)%<span class="number">400</span>==<span class="number">0</span> <span class="keyword">and</span> <span class="built_in">int</span>(i[<span class="number">6</span>:])&gt;<span class="number">29</span>:</span><br><span class="line">            s.remove(i)</span><br><span class="line">big=[<span class="string">&#x27;01&#x27;</span>,<span class="string">&#x27;03&#x27;</span>,<span class="string">&#x27;05&#x27;</span>,<span class="string">&#x27;07&#x27;</span>,<span class="string">&#x27;08&#x27;</span>,<span class="string">&#x27;10&#x27;</span>,<span class="string">&#x27;12&#x27;</span>]</span><br><span class="line">small=[<span class="string">&#x27;02&#x27;</span>,<span class="string">&#x27;04&#x27;</span>,<span class="string">&#x27;06&#x27;</span>,<span class="string">&#x27;09&#x27;</span>,<span class="string">&#x27;11&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:<span class="comment">#去除不合法大小月</span></span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">4</span>:<span class="number">6</span>] <span class="keyword">in</span> small <span class="keyword">and</span> <span class="built_in">int</span>(i[<span class="number">6</span>:])&gt;<span class="number">30</span>:</span><br><span class="line">        s.remove(i)</span><br><span class="line">    <span class="keyword">if</span> i[<span class="number">4</span>:<span class="number">6</span>] <span class="keyword">in</span> big <span class="keyword">and</span> <span class="built_in">int</span>(i[<span class="number">6</span>:])&gt;<span class="number">31</span>:</span><br><span class="line">        s.remove(i)</span><br><span class="line">        </span><br><span class="line">N=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s: <span class="comment"># 判断回文日期</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(i)&gt;N:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> s: <span class="comment"># 判断 ABABBABA 型数</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">int</span>(j)&gt;N <span class="keyword">and</span> j[:<span class="number">2</span>]==j[<span class="number">2</span>:<span class="number">4</span>] <span class="keyword">and</span> j[<span class="number">0</span>]!=j[<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">print</span>(j)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure>
<pre><code>20200202
20211202
21211212
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>(i)[::-<span class="number">1</span>][:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<h1 id="对称迷宫"><a href="#对称迷宫" class="headerlink" title="对称迷宫"></a>对称迷宫</h1><h2 id="题目-6"><a href="#题目-6" class="headerlink" title="题目"></a>题目</h2><p>描述</p>
<p>wlxsq有一个N*NN∗N的网格迷宫，每一个网格都有一个字母编号。</p>
<p>他要从左上角(1,1)(1,1)出发，走到右下角(n,n)(n,n)，由于wlxsq很懒，所以他每次只会往右或者往下走一格。<br>由于最后到终点的路径方案太多太多了，所以wlxsq想让你计算出所有不同的对称的路径个数。<br>例如:N = 3N=3<br>ABA<br>BBB<br>ABA<br>对称路径6条：有ABABA(2条)、ABBBA(4条)<br>不同的对称路径有: 有ABABA、ABBBA</p>
<p>输入<br>第一行输入一个数NN，表示迷宫的大小。<br>接下来输入N*NN∗N的字母迷宫</p>
<p>输出<br>输出对称路径的数量</p>
<p>样例<br>3<br>ABA<br>BBB<br>ABA</p>
<p>输出<br>2</p>
<p>提示<br>【评测用例规模与约定】<br>对于40%40%的数据，2&lt;=N&lt;=112&lt;=N&lt;=11</p>
<p>对于100%100%的数据，2&lt;=N&lt;=182&lt;=N&lt;=18</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在这一种题一般先整体深搜一便保存所有路径，然后再判断是不是对称路径，然后再进行判重，但是这是一种完全暴力的方法，这样不仅会超时，还会爆内存，逼近最大的图是18路劲大概有2^18次方条。<br>尽可能的优化它，于是有了第二种思路。<br>搜索两遍，第一遍从1,1位置搜索，第二遍从n,n位置搜索，分别保存路径和末尾点，然后再比对末尾点是否相同，路径是否相同，这里的路劲也是一个非常庞大的数据，而且加上判重，优化不好也会超时。<br>对于数字的判重可以用一个visit数组判断，对于路径呢，用map来判断。</p>
<h2 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/weixin_45483201/article/details/104255693">https://blog.csdn.net/weixin_45483201/article/details/104255693</a></p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> defaultdict</span><br><span class="line"></span><br><span class="line">dx=[<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">dy=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">dic=defaultdict(<span class="built_in">int</span>)</span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs1</span>(<span class="params">x,y,step,path</span>):</span>   </span><br><span class="line">    <span class="keyword">if</span> x+y==n-<span class="number">1</span>:</span><br><span class="line">        dic[path]=<span class="number">1</span></span><br><span class="line">        vis[x][path]=<span class="number">1</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">2</span>):</span><br><span class="line">        <span class="keyword">if</span> x+dx[i]&lt;n <span class="keyword">and</span> x+dx[i]&gt;=<span class="number">0</span> <span class="keyword">and</span> y+dy[i]&lt;n <span class="keyword">and</span> y+dy[i]&gt;=<span class="number">0</span> :</span><br><span class="line">            dfs1(x+dx[i],y+dy[i],step+<span class="number">1</span>,path+mp[x+dx[i]][y+dy[i]])</span><br><span class="line">        </span><br><span class="line">ans=<span class="built_in">int</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dfs2</span>(<span class="params">x,y,step,path</span>):</span></span><br><span class="line">    <span class="keyword">global</span> ans</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> x+y==n-<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> dic[path]==<span class="number">1</span> <span class="keyword">and</span> vis[x][path]==<span class="number">1</span> :</span><br><span class="line">            ans+=<span class="number">1</span></span><br><span class="line">            dic[path]=<span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> x+dx[i]&lt;n <span class="keyword">and</span> x+dx[i]&gt;=<span class="number">0</span> <span class="keyword">and</span> y+dy[i]&lt;n <span class="keyword">and</span> y+dy[i]&gt;=<span class="number">0</span> :</span><br><span class="line">            dfs2(x+dx[i],y+dy[i],step+<span class="number">1</span>,path+mp[x+dx[i]][y+dy[i]])      </span><br><span class="line"></span><br><span class="line">mp=[<span class="built_in">str</span>(<span class="string">&quot;&quot;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line">vis=[defaultdict(<span class="built_in">int</span>) <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,n):</span><br><span class="line">    mp[i]=<span class="built_in">input</span>()</span><br><span class="line"></span><br><span class="line">dfs1(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="string">&quot;&quot;</span>+mp[<span class="number">0</span>][<span class="number">0</span>])</span><br><span class="line">dfs2(n-<span class="number">1</span>,n-<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;&quot;</span>+mp[n-<span class="number">1</span>][n-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>
<pre><code>3
ABA
BBB
ABA
2
</code></pre>]]></content>
      <categories>
        <category>蓝桥杯python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯系列2——python基本语法</title>
    <url>/2022/05/03/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%B3%BB%E5%88%972%E2%80%94%E2%80%94python%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<p>对照菜鸟教程把python基本语法对着敲了一下。这部分看起来很多，但实际只花了一个下午。写给自己以后复习看。</p>
 <span id="more"></span>
<h1 id="零"><a href="#零" class="headerlink" title="零"></a>零</h1><p>看课本收货良多，因此对照菜鸟教程把python基本语法对着敲了一下。<br>这部分看起来很多，但实际只花了一个下午。写给自己以后复习看。</p>
<h1 id="你好，世界"><a href="#你好，世界" class="headerlink" title="你好，世界"></a>你好，世界</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> (<span class="string">&quot;你好，世界&quot;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>你好，世界
</code></pre><h1 id="Python-变量类型"><a href="#Python-变量类型" class="headerlink" title="Python 变量类型"></a>Python 变量类型</h1><p>变量存储在内存中的值，这就意味着在创建变量时会在内存中开辟一个空间。</p>
<p>基于变量的数据类型，解释器会分配指定内存，并决定什么数据可以被存储在内存中。</p>
<p>因此，变量可以指定不同的数据类型，这些变量可以存储整数，小数或字符。</p>
<h2 id="变量赋值"><a href="#变量赋值" class="headerlink" title="变量赋值"></a>变量赋值</h2><p>Python 中的变量赋值不需要类型声明。</p>
<p>每个变量在内存中创建，都包括变量的标识，名称和数据这些信息。</p>
<p>每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">counter = <span class="number">100</span> <span class="comment"># 赋值整型变量</span></span><br><span class="line">miles = <span class="number">1000.0</span> <span class="comment"># 浮点型</span></span><br><span class="line">name = <span class="string">&quot;John&quot;</span> <span class="comment"># 字符串</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(counter,miles,name)</span><br></pre></td></tr></table></figure>
<pre><code>100 1000.0 John
</code></pre><h2 id="多变量赋值"><a href="#多变量赋值" class="headerlink" title="多变量赋值"></a>多变量赋值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b, c = <span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;john&quot;</span></span><br><span class="line"><span class="built_in">print</span>(a,b,c)</span><br></pre></td></tr></table></figure>
<pre><code>1 2 john
</code></pre><h2 id="标准数据类型"><a href="#标准数据类型" class="headerlink" title="标准数据类型"></a>标准数据类型</h2><p>在内存中存储的数据可以有多种类型。</p>
<p>例如，一个人的年龄可以用数字来存储，他的名字可以用字符来存储。</p>
<p>Python 定义了一些标准类型，用于存储各种类型的数据。</p>
<p>Python有五个标准的数据类型：</p>
<p>不可变：Numbers（数字）<br>String（字符串）<br>List（列表）<br>Tuple（元组）<br>Dictionary（字典）</p>
<h2 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h2><p>数字数据类型用于存储数值。</p>
<p>他们是不可改变的数据类型，这意味着改变数字数据类型会分配一个新的对象。</p>
<p>当你指定一个值时，Number 对象就会被创建：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var1 = <span class="number">1</span></span><br><span class="line">var2 = <span class="number">10</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> var1 <span class="comment"># 删除单个或多个对象的引用</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">var1</span><br></pre></td></tr></table></figure>
<pre><code>---------------------------------------------------------------------------

NameError                                 Traceback (most recent call last)

~\AppData\Local\Temp/ipykernel_21312/2376987541.py in &lt;module&gt;
----&gt; 1 var1


NameError: name &#39;var1&#39; is not defined
</code></pre><p>Python支持四种不同的数字类型：</p>
<p>int（有符号整型）</p>
<p>long（长整型，也可以代表八进制和十六进制）  0122L</p>
<p>float（浮点型）</p>
<p>complex（复数） 4.53e-7j</p>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>[头下标:尾下标] 来截取相应的字符串，从 0 开始。</p>
<p>[头下标:尾下标] 获取的子字符串[头，尾)。</p>
<h3 id="访问字符串的值"><a href="#访问字符串的值" class="headerlink" title="访问字符串的值"></a>访问字符串的值</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;abcdef&#x27;</span></span><br><span class="line">s[<span class="number">1</span>:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>
<pre><code>&#39;bcde&#39;
</code></pre><h3 id="字符串连接"><a href="#字符串连接" class="headerlink" title="字符串连接"></a>字符串连接</h3><p>加号（+）是字符串连接运算符，星号（*）是重复操作。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;Hello World!&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span> )          <span class="comment"># 输出完整字符串</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>[<span class="number">0</span>])        <span class="comment"># 输出字符串中的第一个字符</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>] )     <span class="comment"># 输出字符串中第三个至第六个之间的字符串</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span>[<span class="number">2</span>:]  )     <span class="comment"># 输出从第三个字符开始的字符串</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span> * <span class="number">2</span> )      <span class="comment"># 输出字符串两次</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">str</span> + <span class="string">&quot;TEST&quot;</span>)  <span class="comment"># 输出连接的字符串</span></span><br></pre></td></tr></table></figure>
<pre><code>Hello World!
H
llo
llo World!
Hello World!Hello World!
Hello World!TEST
</code></pre><p>列表截取第三个参数:截取的步长</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">letters=<span class="string">&#x27;abcdefg&#x27;</span></span><br><span class="line">letters[<span class="number">1</span>:<span class="number">4</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure>
<pre><code>&#39;bd&#39;
</code></pre><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>List（列表）用 [ ] 标识，支持字符，数字，字符串甚至可以包含列表（即嵌套）。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span> = [ <span class="string">&#x27;runoob&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;john&#x27;</span>, <span class="number">70.2</span> ]</span><br><span class="line">tinylist = [<span class="number">123</span>, <span class="string">&#x27;john&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>  )             <span class="comment"># 输出完整列表</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">0</span>]  )          <span class="comment"># 输出列表的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">1</span>:<span class="number">3</span>]  )        <span class="comment"># 输出第二个至第三个元素 </span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span>[<span class="number">2</span>:]  )         <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinylist * <span class="number">2</span> )      <span class="comment"># 输出列表两次</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">list</span> + tinylist)    <span class="comment"># 打印组合的列表</span></span><br></pre></td></tr></table></figure>
<pre><code>[&#39;runoob&#39;, 786, 2.23, &#39;john&#39;, 70.2]
runoob
[786, 2.23]
[2.23, &#39;john&#39;, 70.2]
[123, &#39;john&#39;, 123, &#39;john&#39;]
[&#39;runoob&#39;, 786, 2.23, &#39;john&#39;, 70.2, 123, &#39;john&#39;]
</code></pre><h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p>用 () 标识。内部元素用逗号隔开。</p>
<p>不能二次赋值，相当于只读列表。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">tuple</span> = ( <span class="string">&#x27;runoob&#x27;</span>, <span class="number">786</span> , <span class="number">2.23</span>, <span class="string">&#x27;john&#x27;</span>, <span class="number">70.2</span> )</span><br><span class="line">tinytuple = (<span class="number">123</span>, <span class="string">&#x27;john&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>   )            <span class="comment"># 输出完整元组</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">0</span>]   )         <span class="comment"># 输出元组的第一个元素</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">1</span>:<span class="number">3</span>]  )        <span class="comment"># 输出第二个至第四个（不包含）的元素 </span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span>[<span class="number">2</span>:]   )        <span class="comment"># 输出从第三个开始至列表末尾的所有元素</span></span><br><span class="line"><span class="built_in">print</span> (tinytuple * <span class="number">2</span>   )    <span class="comment"># 输出元组两次</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">tuple</span> + tinytuple)   <span class="comment"># 打印组合的元组</span></span><br></pre></td></tr></table></figure>
<pre><code>(&#39;runoob&#39;, 786, 2.23, &#39;john&#39;, 70.2)
runoob
(786, 2.23)
(2.23, &#39;john&#39;, 70.2)
(123, &#39;john&#39;, 123, &#39;john&#39;)
(&#39;runoob&#39;, 786, 2.23, &#39;john&#39;, 70.2, 123, &#39;john&#39;)
</code></pre><h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>字典(dictionary)。列表是有序的对象集合，字典是无序的对象集合。</p>
<p>两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p>
<p>字典用”{ }”标识。字典由索引(key)和它对应的值value组成。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;&#125;</span><br><span class="line"><span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>] = <span class="string">&quot;This is one&quot;</span></span><br><span class="line"><span class="built_in">dict</span>[<span class="number">2</span>] = <span class="string">&quot;This is two&quot;</span></span><br><span class="line"> </span><br><span class="line">tinydict = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;runoob&#x27;</span>,<span class="string">&#x27;code&#x27;</span>:<span class="number">6734</span>, <span class="string">&#x27;dept&#x27;</span>: <span class="string">&#x27;sales&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="string">&#x27;one&#x27;</span>]  )        <span class="comment"># 输出键为&#x27;one&#x27; 的值</span></span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">dict</span>[<span class="number">2</span>])              <span class="comment"># 输出键为 2 的值</span></span><br><span class="line"><span class="built_in">print</span> (tinydict )            <span class="comment"># 输出完整的字典</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.keys())      <span class="comment"># 输出所有键</span></span><br><span class="line"><span class="built_in">print</span> (tinydict.values()   ) <span class="comment"># 输出所有值</span></span><br></pre></td></tr></table></figure>
<pre><code>This is one
This is two
&#123;&#39;name&#39;: &#39;runoob&#39;, &#39;code&#39;: 6734, &#39;dept&#39;: &#39;sales&#39;&#125;
dict_keys([&#39;name&#39;, &#39;code&#39;, &#39;dept&#39;])
dict_values([&#39;runoob&#39;, 6734, &#39;sales&#39;])
</code></pre><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><p>需要对数据内置的类型进行转换,数据类型作为函数名。</p>
<p>返回一个新的对象，表示转换的值。</p>
<p>函数    描述<br>int(x [,base])     将x转换为一个整数</p>
<p>long(x [,base] )   将x转换为一个长整数</p>
<p>float(x)           将x转换到一个浮点数</p>
<p>complex(real [,imag])   创建一个复数</p>
<p>str(x)             将对象 x 转换为字符串</p>
<p>repr(x)            将对象 x 转换为表达式字符串</p>
<p>eval(str)          用来计算在字符串中的有效Python表达式,并返回一个对象</p>
<p>tuple(s)           将序列 s 转换为一个元组</p>
<p>list(s)            将序列 s 转换为一个列表</p>
<p>set(s)             转换为可变集合</p>
<p>dict(d)            创建一个字典。d 必须是一个序列 (key,value)元组。</p>
<p>frozenset(s)       转换为不可变集合</p>
<p>chr(x)             将一个整数转换为一个字符</p>
<p>unichr(x)          将一个整数转换为Unicode字符</p>
<p>ord(x)             将一个字符转换为它的整数值</p>
<p>hex(x)             将一个整数转换为一个十六进制字符串</p>
<p>oct(x)             将一个整数转换为一个八进制字符串</p>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><p>算术运算符<br>比较（关系）运算符<br>赋值运算符<br>逻辑运算符<br>位运算符<br>成员运算符<br>身份运算符<br>运算符优先级</p>
<ul>
<li><ul>
<li><ul>
<li>/ % ** //<br>除数为浮点数，结果才为浮点数</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">21</span></span><br><span class="line">b = <span class="number">10</span></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"> </span><br><span class="line">c = a + b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;1 - c 的值为：&quot;</span>, c)</span><br><span class="line"> </span><br><span class="line">c = a - b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;2 - c 的值为：&quot;</span>, c )</span><br><span class="line"> </span><br><span class="line">c = a * b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;3 - c 的值为：&quot;</span>, c )</span><br><span class="line"> </span><br><span class="line">c = a / b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;4 - c 的值为：&quot;</span>, c )</span><br><span class="line"> </span><br><span class="line">c = a % b</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;5 - c 的值为：&quot;</span>, c)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 修改变量 a 、b 、c</span></span><br><span class="line">a = <span class="number">2</span></span><br><span class="line">b = <span class="number">3</span></span><br><span class="line">c = a**b </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;6 - c 的值为：&quot;</span>, c)</span><br><span class="line"> </span><br><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">5</span></span><br><span class="line">c = a//b </span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;7 - c 的值为：&quot;</span>, c)</span><br></pre></td></tr></table></figure>
<pre><code>1 - c 的值为： 31
2 - c 的值为： 11
3 - c 的值为： 210
4 - c 的值为： 2.1
5 - c 的值为： 1
6 - c 的值为： 8
7 - c 的值为： 2
</code></pre><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><p>按位运算符是把数字看作二进制来进行计算的。</p>
<p>&amp; 与 | 或 ^ 异或 ~ 取反 &lt;&lt; 左移（高位丢弃，低位补零） &gt;&gt; 右移</p>
<h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><p>and or not 返回布尔值</p>
<h2 id="成员运算符"><a href="#成员运算符" class="headerlink" title="成员运算符"></a>成员运算符</h2><p>in<br>返回布尔值<br>not in<br>判断：是否同一内存空间</p>
<h1 id="条件语句"><a href="#条件语句" class="headerlink" title="条件语句"></a>条件语句</h1><p>通过一条或多条语句的执行结果（True或者False）来决定执行的代码块。</p>
<p>条件之间，and或者or连接</p>
<p>if elif else</p>
<h1 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h1><p>while for 嵌套</p>
<p>while 1： #循环必然成立，靠break跳出循环</p>
<h2 id="循环控制语句"><a href="#循环控制语句" class="headerlink" title="循环控制语句"></a>循环控制语句</h2><p>break跳出当个循环 continue跳出当次循环 pass占位语句</p>
<p><strong>continue 语句是一个删除的效果，他的存在是为了删除满足循环条件下的某些不需要的成分</strong></p>
<p><strong>pass定义空函数</strong></p>
<p>def sample(n_samples):<br>    pass</p>
<h2 id="循环使用else语句"><a href="#循环使用else语句" class="headerlink" title="循环使用else语句"></a>循环使用else语句</h2><p>while … else 在循环条件为 false 时执行 else 语句块</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> count &lt; <span class="number">5</span>:</span><br><span class="line">    <span class="built_in">print</span>( count, <span class="string">&quot; is  less than 5&quot;</span>)</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>( count, <span class="string">&quot; is not less than 5&quot;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>0  is  less than 5
1  is  less than 5
2  is  less than 5
3  is  less than 5
4  is  less than 5
5  is not less than 5
</code></pre><h1 id="Number-数字"><a href="#Number-数字" class="headerlink" title="Number(数字)"></a>Number(数字)</h1><p>不允许改变，改变数值将重新分配内存空间</p>
<h2 id="math-模块、cmath-模块"><a href="#math-模块、cmath-模块" class="headerlink" title="math 模块、cmath 模块"></a>math 模块、cmath 模块</h2><p>math 模块提供了许多对浮点数的数学运算函数。</p>
<p>cmath 模块包含了一些用于复数运算的函数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看 math 查看包中的内容:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="built_in">dir</span>(math)</span><br></pre></td></tr></table></figure>
<pre><code>[&#39;__doc__&#39;,
 &#39;__loader__&#39;,
 &#39;__name__&#39;,
 &#39;__package__&#39;,
 &#39;__spec__&#39;,
 &#39;acos&#39;,
 &#39;acosh&#39;,
 &#39;asin&#39;,
 &#39;asinh&#39;,
 &#39;atan&#39;,
 &#39;atan2&#39;,
 &#39;atanh&#39;,
 &#39;ceil&#39;,
 &#39;comb&#39;,
 &#39;copysign&#39;,
 &#39;cos&#39;,
 &#39;cosh&#39;,
 &#39;degrees&#39;,
 &#39;dist&#39;,
 &#39;e&#39;,
 &#39;erf&#39;,
 &#39;erfc&#39;,
 &#39;exp&#39;,
 &#39;expm1&#39;,
 &#39;fabs&#39;,
 &#39;factorial&#39;,
 &#39;floor&#39;,
 &#39;fmod&#39;,
 &#39;frexp&#39;,
 &#39;fsum&#39;,
 &#39;gamma&#39;,
 &#39;gcd&#39;,
 &#39;hypot&#39;,
 &#39;inf&#39;,
 &#39;isclose&#39;,
 &#39;isfinite&#39;,
 &#39;isinf&#39;,
 &#39;isnan&#39;,
 &#39;isqrt&#39;,
 &#39;lcm&#39;,
 &#39;ldexp&#39;,
 &#39;lgamma&#39;,
 &#39;log&#39;,
 &#39;log10&#39;,
 &#39;log1p&#39;,
 &#39;log2&#39;,
 &#39;modf&#39;,
 &#39;nan&#39;,
 &#39;nextafter&#39;,
 &#39;perm&#39;,
 &#39;pi&#39;,
 &#39;pow&#39;,
 &#39;prod&#39;,
 &#39;radians&#39;,
 &#39;remainder&#39;,
 &#39;sin&#39;,
 &#39;sinh&#39;,
 &#39;sqrt&#39;,
 &#39;tan&#39;,
 &#39;tanh&#39;,
 &#39;tau&#39;,
 &#39;trunc&#39;,
 &#39;ulp&#39;]
</code></pre><h2 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h2><p>函数      返回值 ( 描述 )<br>abs(x)    绝对值，如abs(-10) 返回 10<br>cmp(x, y)    如果 x &lt; y 返回 -1, 如果 x == y 返回 0, 如果 x &gt; y 返回 1<br>exp(x)    e的x次幂(ex),如math.exp(1) 返回2.718281828459045<br>fabs(x)    浮点数绝对值，如math.fabs(-10) 返回10.0<br>ceil(x)     上入整数，如math.ceil(4.1) 返回 5<br>floor(x) 下舍整数，如math.floor(4.9)返回 4<br>log(x)     如math.log(math.e)返回1.0,math.log(100,10)返回2.0<br>log10(x) 以10为基数的x的对数，如math.log10(100)返回 2.0<br>max(x1, x2,…)    最大值，参数可以为序列。<br>min(x1, x2,…)    最小值，参数可以为序列。<br>modf(x)     x的整数部分与小数部分，两部分的数值符号与x相同，整数部分以浮点型表示。<br>pow(x, y)    x ** y 运算后的值<br>round(x [,n])    浮点数x的四舍五入值，如给出n值，则代表舍入到小数点后的位数。<br>sqrt(x)    数字x的平方根## 随机函数<br>choice(seq)  从序列元素中随机挑选一个元素，如random.choice(range(10)),从0到9中随机取一个整数<br>randrange([start,] stop [,step])从指定基数递增集合获取一个随机数<br>random() 随机生成一个实数，[0,1)范围内<br>seed([x])改变随机数生成的种子seed<br>shuffle(lst) 将序列的所有元素随机排序<br>uniform(x,y) 随机生成下一个实数，在[x,y]范围内</p>
<h2 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h2><p>asin(x) 反余弦弧度值</p>
<h2 id="数学常量"><a href="#数学常量" class="headerlink" title="数学常量"></a>数学常量</h2><p>pi<br>e</p>
<h1 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h1><p>var[2:5] [2,5)</p>
<p>var1[:6] + ‘Runoob!</p>
<h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><p>\’</p>
<p>\b 退格</p>
<p>\000 空</p>
<p>\v 纵向制表符</p>
<p>\t 横向制表符</p>
<p>\r 回车</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\000&#x27;</span>+<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;1&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>1
1
</code></pre><ul>
<li>连接 * 重复输出 in 包含返回True r 原始字符串</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">r&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>\n
</code></pre><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;My name is %s and weight is %d kg!&quot;</span> % (<span class="string">&#x27;Zara&#x27;</span>,<span class="number">21</span>))</span><br></pre></td></tr></table></figure>
<pre><code>My name is Zara and weight is 21 kg!
</code></pre><h3 id="格式化符号"><a href="#格式化符号" class="headerlink" title="格式化符号"></a>格式化符号</h3><p>%c ASCII码</p>
<p>%s 字符串</p>
<p>%d 整数</p>
<p>%u 无符号整数</p>
<p>%o 八进制 %x 十六进制 %X 大写十六进制</p>
<p>%f 浮点数字，可指定精度</p>
<p>%e 科学计数法表示浮点数</p>
<p>% 十六进制输出变量地址</p>
<h3 id="格式化操作符辅助指令"><a href="#格式化操作符辅助指令" class="headerlink" title="格式化操作符辅助指令"></a>格式化操作符辅助指令</h3><ul>
<li>宽度获小数点精度</li>
</ul>
<ul>
<li>左对齐</li>
</ul>
<ul>
<li>正数前面显示+<br><sp> 正数前面显示空格<h1 id="八进制数前面显示-‘0’"><a href="#八进制数前面显示-‘0’" class="headerlink" title="八进制数前面显示(‘0’)"></a>八进制数前面显示(‘0’)</h1>0 显示数字前面填充’0’而不是默认空格<br>%% 输出%<br>(var) 映射变量<br>m.n. m显示最小总宽度,n是小数点位数<br>str.format 格式化函数string.capitalize() 字符串第一个字符大写<br>string.count() 返回出现次数<br>string.find() 检测是否包含<br>string.replace(str1,str2)<br>string.rfind() 返回最后一次出现的次数<br>string.upper() 转换为大写<br>string.lower() 转化为小写</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> tmp_fun()==fun_tmp().decode(<span class="string">&quot;gbk&quot;</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;eq&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  decode(&quot;gbk&quot;)作用为将gbk编码转为unicode编码</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h1 id="列表-1"><a href="#列表-1" class="headerlink" title="列表"></a>列表</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list1 = [<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;list1[1:5]: &quot;</span>, list1[<span class="number">1</span>:<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">list1.append(<span class="string">&#x27;Runoob&#x27;</span>) <span class="comment"># 增加</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> list1[<span class="number">2</span>] <span class="comment"># 删除</span></span><br><span class="line"><span class="built_in">print</span>(list1)</span><br></pre></td></tr></table></figure>
<pre><code>list1[1:5]:  [&#39;chemistry&#39;, 1997, 2000]
[&#39;physics&#39;, &#39;chemistry&#39;, 1997, 2000, &#39;Runoob&#39;]
[&#39;physics&#39;, &#39;chemistry&#39;, 2000, &#39;Runoob&#39;]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(list1[<span class="number">1</span>:])</span><br><span class="line"><span class="built_in">print</span>(list1[-<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(list1[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<pre><code>[&#39;chemistry&#39;, 2000, &#39;Runoob&#39;]
Runoob
2000
</code></pre><h2 id="列表函数"><a href="#列表函数" class="headerlink" title="列表函数"></a>列表函数</h2><p>cmp(list1, list2) 比较两个列表的元素</p>
<p>len(list) 列表元素个数</p>
<p>max(list) 返回列表元素最大值</p>
<p>min(list) 返回列表元素最小值</p>
<p>list(seq) 将元组转换为列表</p>
<h2 id="列表方法"><a href="#列表方法" class="headerlink" title="列表方法"></a>列表方法</h2><p>list.append() 添加对象</p>
<p>list.count() 统计出现次数</p>
<p>list.extend() 新列表扩充原列表</p>
<p>list.index() 列表找出某个值第一个匹配项的索引位置</p>
<p>list.insert() 将对象插入列表</p>
<p>list.pop([index=-1]) 移除列表中的一个元素（默认最后一个元素），返回该元素的值</p>
<p>list.remove() 移除列表中某一个值的第一个匹配项</p>
<p>list.reverse() 反向列表元素</p>
<p>list.sort(reverse=False) 对原列表进行排序</p>
<h1 id="元组-1"><a href="#元组-1" class="headerlink" title="元组"></a>元组</h1><p>元组元素不能修改 （），隔开</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="string">&#x27;physics&#x27;</span>, <span class="string">&#x27;chemistry&#x27;</span>, <span class="number">1997</span>, <span class="number">2000</span>)</span><br><span class="line"><span class="comment">#元组中只包含一个元素时，需要在元素后面添加逗号</span></span><br><span class="line">tup2 = (<span class="number">50</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;tup1[0]: &quot;</span>, tup1[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>
<pre><code>tup1[0]:  physics
</code></pre><h2 id="修改元组：可以连接组合"><a href="#修改元组：可以连接组合" class="headerlink" title="修改元组：可以连接组合"></a>修改元组：可以连接组合</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tup1 = (<span class="number">12</span>, <span class="number">34.56</span>)</span><br><span class="line">tup2 = (<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 以下修改元组元素操作是非法的。</span></span><br><span class="line"><span class="comment"># tup1[0] = 100</span></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 创建一个新的元组</span></span><br><span class="line">tup3 = tup1 + tup2</span><br><span class="line"><span class="built_in">print</span> (tup3)</span><br></pre></td></tr></table></figure>
<pre><code>(12, 34.56, &#39;abc&#39;, &#39;xyz&#39;)
</code></pre><h2 id="删除元组-使用del语句来删除整个元组"><a href="#删除元组-使用del语句来删除整个元组" class="headerlink" title="删除元组:使用del语句来删除整个元组"></a>删除元组:使用del语句来删除整个元组</h2><h2 id="无关闭分隔符"><a href="#无关闭分隔符" class="headerlink" title="无关闭分隔符"></a>无关闭分隔符</h2><p>任意无符号的对象，以逗号隔开，默认为元组</p>
<h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><p>tuple(seq)  将列表转换为元组</p>
<h1 id="字典-1"><a href="#字典-1" class="headerlink" title="字典"></a>字典</h1><p>可变容器，可存储任意类型对象</p>
<p>字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中 ,格式如下所示：</p>
<p>d = {key1 : value1, key2 : value2 }</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>蓝桥杯python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯系列3——基础算法</title>
    <url>/2022/05/04/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%B3%BB%E5%88%973%E2%80%94%E2%80%94%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>蓝桥杯系列3——基础算法</p>
 <span id="more"></span>
<h1 id="prim算法：最小生成树"><a href="#prim算法：最小生成树" class="headerlink" title="prim算法：最小生成树"></a>prim算法：最小生成树</h1><p><a href="https://www.bilibili.com/video/BV1Eb41177d1?spm_id_from=333.337.search-card.all.click">https://www.bilibili.com/video/BV1Eb41177d1?spm_id_from=333.337.search-card.all.click</a></p>
<p>强推，一下看懂了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">_ = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>) <span class="comment"># 正无穷</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">prim</span>(<span class="params">graph,n</span>):</span></span><br><span class="line">    dist=[_]*n <span class="comment"># 记录最短权值</span></span><br><span class="line">    visit=[<span class="literal">False</span>]*n <span class="comment"># 记录是否连通(去过)</span></span><br><span class="line">    preIndex=[<span class="number">0</span>]*n <span class="comment"># 记录每次寻找的起点</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#     # 第一个顶点</span></span><br><span class="line"><span class="comment">#     visit[0] = True</span></span><br><span class="line"><span class="comment">#     for i in range(n): # 相邻的边权值</span></span><br><span class="line"><span class="comment">#         dist[i] = graph[0][i] </span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 找到当前无向图的最小生成树</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        mindist=_+<span class="number">1</span></span><br><span class="line">        nextIndex = <span class="number">0</span></span><br><span class="line">        <span class="comment"># 扫描Scan：找到基于当前i，i行中哪一列距离最小作为下一个节点，前提是那个节点没有去过</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> dist[j]&lt; mindist <span class="keyword">and</span> <span class="keyword">not</span> visit[j]: <span class="comment"># visit[j] == False</span></span><br><span class="line">                mindist = dist[j]</span><br><span class="line">                nextIndex =j </span><br><span class="line">        visit[nextIndex]= <span class="literal">True</span> <span class="comment"># 添加Add</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 更新Update：由于前面找到下一个节点了，下面构建下一个节点的dist矩阵，要看nextIndex这一行</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> dist[j]&gt;graph[nextIndex][j] <span class="keyword">and</span> <span class="keyword">not</span> visit[j]: <span class="comment"># visit[j] == False</span></span><br><span class="line">                dist[j]=graph[nextIndex][j]</span><br><span class="line">                preIndex[j]=nextIndex</span><br><span class="line">                </span><br><span class="line">    <span class="keyword">return</span> dist,preIndex</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n=<span class="number">6</span></span><br><span class="line">    <span class="comment"># A到B的权重是6</span></span><br><span class="line">    graph=[[<span class="number">0</span>,<span class="number">6</span>,<span class="number">3</span>,_,_,_],</span><br><span class="line">           [<span class="number">6</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,_,_],</span><br><span class="line">           [<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,_],</span><br><span class="line">           [_,<span class="number">5</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">           [_,_,<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">5</span>],</span><br><span class="line">           [_,_,_,<span class="number">3</span>,<span class="number">5</span>,<span class="number">0</span>]]</span><br><span class="line">    </span><br><span class="line">    dist,preIndex=prim(graph,n)</span><br><span class="line">    <span class="built_in">print</span>(dist)</span><br><span class="line">    <span class="built_in">print</span>(preIndex)</span><br></pre></td></tr></table></figure>
<pre><code>[inf, 2, 3, 3, 2, 3]
[0, 2, 0, 2, 3, 3]
</code></pre><h1 id="算法提高-最小生成树"><a href="#算法提高-最小生成树" class="headerlink" title="算法提高 最小生成树"></a>算法提高 最小生成树</h1><p>给定带权无向图，求出一颗最小的生成树。</p>
<p>输入格式：<br>输入多组测试数据。第一行为N,M，依次是点数和边数。接下来M行，每行三个整数U,V,W，代表连接U,V的边，和权值W。保证图连通。n=m=0标志着测试文件的结束。</p>
<p>输出格式：<br>对于每组数据，输出方差，四舍五入到0.01。输出格式按照样例。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 图初始化</span></span><br><span class="line">N,M = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">_ = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line">graph =[[_ <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N)]<span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读图</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(M):</span><br><span class="line">    U,V,W = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">    graph[U-<span class="number">1</span>][V-<span class="number">1</span>] = W</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    graph[i][i] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(graph)</span><br></pre></td></tr></table></figure>
<pre><code>4 5
1 2 1
2 3 2
3 4 2
4 1 1
2 4 3
[[0, 1, inf, inf], [inf, 0, 2, 3], [inf, inf, 0, 2], [1, inf, inf, 0]]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 读图 </span></span><br><span class="line">_ = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Prim</span>(<span class="params">graph,n</span>):</span></span><br><span class="line">    dist=[_]*n <span class="comment">#记录最短权值</span></span><br><span class="line">    preIndex=[<span class="number">0</span>]*n <span class="comment">#记录出发点</span></span><br><span class="line">    visit=[<span class="literal">False</span>]*n <span class="comment">#记录是否访问过</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">        <span class="comment"># 扫描Scan</span></span><br><span class="line">        mindist = _</span><br><span class="line">        nextIndex = -<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> dist[j] &lt; mindist <span class="keyword">and</span> <span class="keyword">not</span> visit[j]:</span><br><span class="line">                mindist = dist[j]</span><br><span class="line">                nextIndex = j</span><br><span class="line">                </span><br><span class="line">        <span class="comment"># 添加Add</span></span><br><span class="line"><span class="comment">#         preIndex[i] = nextIndex</span></span><br><span class="line">        visit[nextIndex] = <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 更新Update</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> dist[j] &gt; graph[nextIndex][j] <span class="keyword">and</span> <span class="keyword">not</span> visit[j]:</span><br><span class="line">                dist[j] = graph[nextIndex][j]</span><br><span class="line">                preIndex[i] = nextIndex</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> dist,preIndex</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n=<span class="number">6</span></span><br><span class="line">    <span class="comment"># A到B的权重是6</span></span><br><span class="line">    graph=[[<span class="number">0</span>,<span class="number">6</span>,<span class="number">3</span>,_,_,_],</span><br><span class="line">           [<span class="number">6</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">5</span>,_,_],</span><br><span class="line">           [<span class="number">3</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">4</span>,_],</span><br><span class="line">           [_,<span class="number">5</span>,<span class="number">3</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">           [_,_,<span class="number">4</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">5</span>],</span><br><span class="line">           [_,_,_,<span class="number">3</span>,<span class="number">5</span>,<span class="number">0</span>]]</span><br><span class="line">    </span><br><span class="line">    dist,preIndex=prim(graph,n)</span><br><span class="line">    <span class="built_in">print</span>(dist)</span><br><span class="line">    <span class="built_in">print</span>(preIndex)            </span><br></pre></td></tr></table></figure>
<pre><code>[inf, 2, 3, 3, 2, 3]
[0, 2, 0, 2, 3, 3]
</code></pre><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>① 二维数组初始化 graph =[[_ for i in range(N)]for i in range(N)]</p>
<p>② 初始化。一个访问与否bool visit，一个起始节点，一个最短路径。</p>
<p>③ 扫描Scan，添加Add，更新Update</p>
<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="手写笔记"><a href="#手写笔记" class="headerlink" title="手写笔记"></a>手写笔记</h2><p><img src="https://img-blog.csdnimg.cn/45378a7abdbc485ab681c6cb73187782.png" alt="请添加图片描述"></p>
<p><img src="https://img-blog.csdnimg.cn/6861e13e2a864b028473009d2371fe65.png" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/dc85620dd0614a4eaf192b3ee5516d8f.png" alt="请添加图片描述"><br><img src="https://img-blog.csdnimg.cn/b5d1571857f740f6aa4e8d9516d76f3e.png" alt="请添加图片描述"></p>
]]></content>
      <categories>
        <category>蓝桥杯python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯系列4——python基础练习</title>
    <url>/2022/05/05/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%B3%BB%E5%88%974%E2%80%94%E2%80%94python%E5%9F%BA%E7%A1%80%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<p>最基本的输入输出、杨辉三角（循环，if判断，递归）。</p>
 <span id="more"></span>
<h2 id="零"><a href="#零" class="headerlink" title="零"></a>零</h2><p>如果时间比较紧，就功利一点，题目是为了手感服务的。<br>最基本的输入输出、杨辉三角（循环，if判断，递归）等等捡起来了，就可以直接刷真题了，这部分不需要浪费太多时间。</p>
<h2 id="一-基础练习"><a href="#一-基础练习" class="headerlink" title="一 基础练习"></a>一 基础练习</h2><h3 id="BASIC-01-A-B问题"><a href="#BASIC-01-A-B问题" class="headerlink" title="BASIC-01    A+B问题"></a>BASIC-01    A+B问题</h3><p>1.输入A、B，输出A+B。</p>
<p>输入格式:输入的第一行包括两个整数，由空格分隔，分别表示A、B。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="built_in">print</span>(a + b)</span><br></pre></td></tr></table></figure>
<pre><code>12 34
46
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">input</span>().split()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(a[<span class="number">0</span>])+<span class="built_in">int</span>(a[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>
<pre><code>12 34
46
</code></pre><h3 id="BASIC-02-序列求和-入门-求和公式"><a href="#BASIC-02-序列求和-入门-求和公式" class="headerlink" title="BASIC-02    序列求和    入门 求和公式"></a>BASIC-02    序列求和    入门 求和公式</h3><p>问题描述<br>求1+2+3+…+n的值。</p>
<p>输入格式<br>输入包括一个整数n。</p>
<p>输出格式<br>输出一行，包括一个整数，表示1+2+3+…+n的值。</p>
<p>样例输入<br>4</p>
<p>样例输出<br>10</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">sum1=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    sum1=sum1+i</span><br><span class="line"><span class="built_in">print</span>(sum1)</span><br></pre></td></tr></table></figure>
<pre><code>4
10
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 直接循环 然后超时了</span></span><br><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">sum2=n*(n+<span class="number">1</span>)/<span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(sum2))</span><br></pre></td></tr></table></figure>
<pre><code>4
10
</code></pre><h3 id="BASIC-03-圆的面积-入门-实数输出"><a href="#BASIC-03-圆的面积-入门-实数输出" class="headerlink" title="BASIC-03    圆的面积    入门 实数输出"></a>BASIC-03    圆的面积    入门 实数输出</h3><p>问题描述<br>给定圆的半径r，求圆的面积。</p>
<p>输入格式<br>输入包含一个整数r，表示圆的半径。</p>
<p>输出格式<br>输出一行，包含一个实数，四舍五入保留小数点后7位，表示圆的面积。<br>说明：在本题中，输入是一个整数，但是输出是一个实数。</p>
<p>对于实数输出的问题，请一定看清楚实数输出的要求，比如本题中要求保留小数点后7位，则你的程序必须严格的输出7位小数，输出过多或者过少的小数位数都是不行的，都会被认为错误。</p>
<p>实数输出的问题如果没有特别说明，舍入都是按四舍五入进行。</p>
<p>样例输入<br>4</p>
<p>样例输出<br>50.2654825</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line">r=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">s=math.pi*r*r</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%.7f&#x27;</span>%s)</span><br></pre></td></tr></table></figure>
<pre><code>44
6082.1233773
</code></pre><h3 id="BASIC-04-Fibonacci数列-入门-数列-取模"><a href="#BASIC-04-Fibonacci数列-入门-数列-取模" class="headerlink" title="BASIC-04    Fibonacci数列    入门 数列 取模"></a>BASIC-04    Fibonacci数列    入门 数列 取模</h3><p>问题描述<br>Fibonacci数列的递推公式为：Fn=Fn-1+Fn-2，其中F1=F2=1。</p>
<p>当n比较大时，Fn也非常大，现在我们想知道，Fn除以10007的余数是多少。</p>
<p>输入格式<br>输入包含一个整数n。</p>
<p>输出格式<br>输出一行，包含一个整数，表示Fn除以10007的余数。<br>说明：在本题中，答案是要求Fn除以10007的余数，因此我们只要能算出这个余数即可，而不需要先计算出Fn的准确值，再将计算的结果除以10007取余数，直接计算余数往往比先算出原数再取余简单。</p>
<p>样例输入<br>10</p>
<p>样例输出<br>55</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">f=[<span class="number">1</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)]</span><br><span class="line"><span class="comment"># print(f)</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">2</span>:</span><br><span class="line">        f[i]=(f[i-<span class="number">1</span>]+f[i-<span class="number">2</span>])%<span class="number">10007</span></span><br><span class="line"><span class="built_in">print</span>(f[n-<span class="number">1</span>])</span><br></pre></td></tr></table></figure>
<pre><code>55
2091
</code></pre><h3 id="BASIC-1-闰年判断-条件判断"><a href="#BASIC-1-闰年判断-条件判断" class="headerlink" title="BASIC-1    闰年判断    条件判断"></a>BASIC-1    闰年判断    条件判断</h3><p>问题描述<br>给定一个年份，判断这一年是不是闰年。</p>
<p>当以下情况之一满足时，这一年是闰年：</p>
<ol>
<li><p>年份是4的倍数而不是100的倍数；</p>
</li>
<li><p>年份是400的倍数。</p>
</li>
</ol>
<p>其他的年份都不是闰年。</p>
<p>输入格式<br>输入包含一个整数y，表示当前的年份。</p>
<p>输出格式<br>输出一行，如果给定的年份是闰年，则输出yes，否则输出no。<br>说明：当试题指定你输出一个字符串作为结果（比如本题的yes或者no，你需要严格按照试题中给定的大小写，写错大小写将不得分。</p>
<p>样例输入<br>2013</p>
<p>样例输出<br>no</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">y=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> (y%<span class="number">4</span> == <span class="number">0</span> <span class="keyword">and</span> y%<span class="number">100</span> !=<span class="number">0</span>) <span class="keyword">or</span> y%<span class="number">400</span> == <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;yes&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;no&quot;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>2000
yes
</code></pre><h3 id="BASIC-2-01字串"><a href="#BASIC-2-01字串" class="headerlink" title="BASIC-2    01字串"></a>BASIC-2    01字串</h3><p>2.对于长度为5位的一个01串，每一位都可能是0或1，一共有32种可能。它们的前几个是：</p>
<p>00000</p>
<p>00001</p>
<p>00010</p>
<p>请按从小到大的顺序输出这32种01串。<br>{0 : 0 &gt; 3}<br>│  ││ │<br>│  ││ └─ Width of 3<br>│  │└─ Align Right<br>│  └─ Fill with ‘0’<br>└─ Element index</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="comment"># print(f&quot;&#123;bin(i)[2:].zfill(5)&#125;&quot;)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0:0&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">format</span>(i, <span class="string">&#x27;b&#x27;</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># zfill填充，不管结果多少位，都把他填充到5位数</span></span><br></pre></td></tr></table></figure>
<pre><code>00000
00001
00010
00011
00100
00101
00110
00111
01000
01001
01010
01011
01100
01101
01110
01111
10000
10001
10010
10011
10100
10101
10110
10111
11000
11001
11010
11011
11100
11101
11110
11111
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">    <span class="comment"># print(f&quot;&#123;bin(i)[2:].zfill(5)&#125;&quot;)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;0:0&gt;5&#125;&quot;</span>.<span class="built_in">format</span>(<span class="built_in">format</span>(i, <span class="string">&#x27;b&#x27;</span>))) <span class="comment"># &#x27;b&#x27;按位输出</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># zfill填充，不管结果多少位，都把他填充到5位数</span></span><br></pre></td></tr></table></figure>
<pre><code>00000
00001
00010
00011
00100
00101
00110
00111
01000
01001
01010
01011
01100
01101
01110
01111
10000
10001
10010
10011
10100
10101
10110
10111
11000
11001
11010
11011
11100
11101
11110
11111
</code></pre><h3 id="BASIC-3-字母图形-循环-字符串"><a href="#BASIC-3-字母图形-循环-字符串" class="headerlink" title="BASIC-3    字母图形    循环 字符串"></a>BASIC-3    字母图形    循环 字符串</h3><p>问题描述<br>利用字母可以组成一些美丽的图形，下面给出了一个例子：</p>
<p>ABCDEFG</p>
<p>BABCDEF</p>
<p>CBABCDE</p>
<p>DCBABCD</p>
<p>EDCBABC</p>
<p>这是一个5行7列的图形，请找出这个图形的规律，并输出一个n行m列的图形。</p>
<p>输入格式<br>输入一行，包含两个整数n和m，分别表示你要输出的图形的行数的列数。</p>
<p>输出格式<br>输出n行，每个m个字符，为你的图形。</p>
<p>样例输入<br>5 7</p>
<p>样例输出<br>ABCDEFG<br>BABCDEF<br>CBABCDE<br>DCBABCD<br>EDCBABC</p>
<p>数据规模与约定<br>1 &lt;= n, m &lt;= 26。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n, m = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"></span><br><span class="line">graph = [[<span class="number">0</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="comment"># 空二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="keyword">if</span> j &gt;= i: <span class="comment"># 数组中字母规律</span></span><br><span class="line">            graph[i][j] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + j - i)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            graph[i][j] = <span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) + i - j)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n): <span class="comment"># 输出二维数组</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        <span class="built_in">print</span>(graph[i][j], end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>
<pre><code>5 7
ABCDEFG
BABCDEF
CBABCDE
DCBABCD
EDCBABC
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) +<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) -<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<pre><code>B
@
</code></pre><p>字符转ASCII码函数：ord(‘A’)-&gt;64<br>ASCII码转字符函数：chr(64)-&gt;A</p>
<h3 id="BASIC-4-数列特征"><a href="#BASIC-4-数列特征" class="headerlink" title="BASIC-4    数列特征"></a>BASIC-4    数列特征</h3><p>给出n个数，找出这n个数的最大值，最小值，和。</p>
<p>输入格式<br>第一行为整数n，表示数的个数。</p>
<p>第二行有n个数，为给定的n个数，每个数的绝对值都小于10000。</p>
<p>输出格式<br>输出三行，每行一个整数。第一行表示这些数中的最大值，第二行表示这些数中的最小值，第三行表示这些数的和。</p>
<p>样例输入</p>
<p>5</p>
<p>1 3 -2 4 5</p>
<p>样例输出</p>
<p>5</p>
<p>-2</p>
<p>11</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">arr=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"><span class="comment"># print(arr)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(arr))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(arr))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(arr))</span><br></pre></td></tr></table></figure>
<pre><code>2
1 2
2
1
3
</code></pre><h3 id="BASIC-5-查找整数-循环-判断"><a href="#BASIC-5-查找整数-循环-判断" class="headerlink" title="BASIC-5    查找整数 循环 判断"></a>BASIC-5    查找整数 循环 判断</h3><p>给出一个包含n个整数的数列，问整数a在数列中的第一次出现是第几个。</p>
<p>输入格式</p>
<p>第一行包含一个整数n。</p>
<p>第二行包含n个非负整数，为给定的数列，数列中的每个数都不大于10000。</p>
<p>第三行包含一个整数a，为待查找的数。</p>
<p>输出格式</p>
<p>如果a在数列中出现了，输出它第一次出现的位置(位置从1开始编号)，否则输出-1。</p>
<p>样例输入</p>
<p>6</p>
<p>1 9 4 8 3 9</p>
<p>9</p>
<p>样例输出</p>
<p>2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">arr=<span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(arr)):</span><br><span class="line">    <span class="keyword">if</span> arr[i] == a:</span><br><span class="line">        <span class="built_in">print</span>(i+<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">elif</span> i == <span class="built_in">len</span>(arr)-<span class="number">1</span>: <span class="comment">#注意：n=len(arr)-1</span></span><br><span class="line">        <span class="built_in">print</span>(-<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<pre><code>1
34
0
-1
</code></pre><h3 id="BASIC-6-杨辉三角形-基础练习-二维数组"><a href="#BASIC-6-杨辉三角形-基础练习-二维数组" class="headerlink" title="BASIC-6    杨辉三角形    基础练习 二维数组"></a>BASIC-6    杨辉三角形    基础练习 二维数组</h3><p>问题描述</p>
<p>杨辉三角形又称Pascal三角形，它的第i+1行是(a+b)i的展开式的系数。</p>
<p>性质：三角形中的每个数字等于它两肩上的数字相加。</p>
<p>输入格式</p>
<p>输入包含一个数n。</p>
<p>输出格式</p>
<p>输出杨辉三角形的前n行。每一行从这一行的第一个数开始依次输出，中间使用一个空格分隔。请不要在前面输出多余的空格。</p>
<p>样例输入</p>
<p>4</p>
<p>样例输出<br>　　<br>1</p>
<p>1 1<br>　　<br>1 2 1<br>　　<br>1 3 3 1</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">sanjiao=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n): <span class="comment">#定义空杨辉三角</span></span><br><span class="line">    sanjiao.append([<span class="number">1</span> <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>)])</span><br><span class="line"><span class="comment">#print(sanjiao)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> i &gt;=<span class="number">2</span> <span class="keyword">and</span> j &gt;= <span class="number">1</span> <span class="keyword">and</span> j &lt; i:</span><br><span class="line">            <span class="comment"># print(&quot;i,j&quot;,i,j)</span></span><br><span class="line">            sanjiao[i][j] = sanjiao[i-<span class="number">1</span>][j-<span class="number">1</span>] + sanjiao[i-<span class="number">1</span>][j]</span><br><span class="line">        <span class="built_in">print</span>(sanjiao[i][j],end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>( )</span><br></pre></td></tr></table></figure>
<pre><code>3
1 
1 1 
1 2 1 
</code></pre><h3 id="BASIC-7-特殊的数字-循环-判断-数位"><a href="#BASIC-7-特殊的数字-循环-判断-数位" class="headerlink" title="BASIC-7    特殊的数字    循环 判断 数位"></a>BASIC-7    特殊的数字    循环 判断 数位</h3><p>问题描述</p>
<p>153是一个非常特殊的数，它等于它的每位数字的立方和，即153=1 <em> 1 </em> 1+5 <em> 5 </em> 5+3 <em> 3 </em> 3。编程求所有满足这种条件的三位十进制数。</p>
<p>输出格式</p>
<p>按从小到大的顺序输出满足条件的三位十进制数，每个数占一行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> (i*<span class="number">100</span>+j*<span class="number">10</span>+k) == (i**<span class="number">3</span>+j**<span class="number">3</span>+k**<span class="number">3</span>):</span><br><span class="line">                <span class="built_in">print</span>(i*<span class="number">100</span>+j*<span class="number">10</span>+k)</span><br></pre></td></tr></table></figure>
<pre><code>153
370
371
407
</code></pre><h3 id="BASIC-8-回文数-循环-判断-回文数"><a href="#BASIC-8-回文数-循环-判断-回文数" class="headerlink" title="BASIC-8    回文数    循环 判断 回文数"></a>BASIC-8    回文数    循环 判断 回文数</h3><p>问题描述</p>
<p>1221是一个非常特殊的数，它从左边读和从右边读是一样的，编程求所有这样的四位十进制数。</p>
<p>输出格式</p>
<p>按从小到大的顺序输出满足条件的四位十进制数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        <span class="built_in">print</span>(i*<span class="number">1001</span>+j*<span class="number">110</span>)</span><br></pre></td></tr></table></figure>
<pre><code>1001
1111
1221
1331
1441
1551
1661
1771
1881
1991
2002
2112
2222
2332
2442
2552
2662
2772
2882
2992
3003
3113
3223
3333
3443
3553
3663
3773
3883
3993
4004
4114
4224
4334
4444
4554
4664
4774
4884
4994
5005
5115
5225
5335
5445
5555
5665
5775
5885
5995
6006
6116
6226
6336
6446
6556
6666
6776
6886
6996
7007
7117
7227
7337
7447
7557
7667
7777
7887
7997
8008
8118
8228
8338
8448
8558
8668
8778
8888
8998
9009
9119
9229
9339
9449
9559
9669
9779
9889
9999
</code></pre><h3 id="BASIC-9-特殊回文数-回文数-循环-条件语句"><a href="#BASIC-9-特殊回文数-回文数-循环-条件语句" class="headerlink" title="BASIC-9    特殊回文数    回文数 循环 条件语句"></a>BASIC-9    特殊回文数    回文数 循环 条件语句</h3><p>问题描述</p>
<p>123321是一个非常特殊的数，它从左边读和从右边读是一样的。<br>输入一个正整数n， 编程求所有这样的五位和六位十进制数，满足各位数字之和等于n。</p>
<p>输入格式<br>输入一行，包含一个正整数n。</p>
<p>输出格式<br>按从小到大的顺序输出满足条件的整数，每个整数占一行。</p>
<p>样例输入<br>52</p>
<p>样例输出<br>899998<br>989989<br>998899</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> ((i+j)*<span class="number">2</span>+k) == n:</span><br><span class="line">                <span class="built_in">print</span>(i*<span class="number">10001</span>+j*<span class="number">1010</span>+k*<span class="number">100</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">10</span>):</span><br><span class="line">            <span class="keyword">if</span> (i+j+k)*<span class="number">2</span> == n:</span><br><span class="line">                <span class="built_in">print</span>(i*<span class="number">100001</span>+j*<span class="number">10010</span>+k*<span class="number">1100</span>)</span><br></pre></td></tr></table></figure>
<pre><code>52
899998
989989
998899
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n=<span class="built_in">int</span>(<span class="built_in">input</span>())	</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>,<span class="number">1000000</span>):</span><br><span class="line">	a=<span class="built_in">str</span>(i)</span><br><span class="line">	<span class="keyword">if</span> a[<span class="number">0</span>]==a[-<span class="number">1</span>] <span class="keyword">and</span> a[<span class="number">1</span>]==a[-<span class="number">2</span>] <span class="keyword">and</span> a[<span class="number">2</span>] ==a[-<span class="number">3</span>] <span class="keyword">and</span> <span class="built_in">eval</span>(<span class="string">&#x27;+&#x27;</span>.join(a))==n:</span><br><span class="line">		<span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>
<pre><code>52
899998
989989
998899
</code></pre><h3 id="BASIC-10-十进制转十六进制-循环-整除-求余-判断"><a href="#BASIC-10-十进制转十六进制-循环-整除-求余-判断" class="headerlink" title="BASIC-10    十进制转十六进制    循环 整除 求余 判断"></a>BASIC-10    十进制转十六进制    循环 整除 求余 判断</h3><p>问题描述</p>
<p>　　十六进制数是在程序设计时经常要使用到的一种整数的表示方式。它有0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F共16个符号，分别表示十进制数的0至15。十六进制的计数方法是满16进1，所以十进制数16在十六进制中是10，而十进制的17在十六进制中是11，以此类推，十进制的30在十六进制中是1E。<br>　　给出一个非负整数，将它表示成十六进制的形式。</p>
<p>输入格式<br>　　输入包含一个非负整数a，表示要转换的数。0&lt;=a&lt;=2147483647</p>
<p>输出格式<br>　　输出这个整数的16进制表示</p>
<p>样例输入<br>30</p>
<p>样例输出<br>1E</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="comment"># print(hex(a)) # 0x1e</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">format</span>(a, <span class="string">&#x27;X&#x27;</span>)) <span class="comment"># x 输出字母为小写 X 输出字母为大写</span></span><br></pre></td></tr></table></figure>
<pre><code>30
1E
</code></pre><h3 id="BASIC-11-十六进制转十进制-进制转换-字符处理-判断"><a href="#BASIC-11-十六进制转十进制-进制转换-字符处理-判断" class="headerlink" title="BASIC-11    十六进制转十进制    进制转换 字符处理 判断"></a>BASIC-11    十六进制转十进制    进制转换 字符处理 判断</h3><p>问题描述</p>
<p>　　从键盘输入一个不超过8位的正的十六进制数字符串，将它转换为正的十进制数后输出。</p>
<p>　　注：十六进制数中的10~15分别用大写的英文字母A、B、C、D、E、F表示。</p>
<p>样例输入<br>FFFF</p>
<p>样例输出<br>65535</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">input</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">int</span>(a,<span class="number">16</span>))</span><br></pre></td></tr></table></figure>
<pre><code>FFFF
65535
</code></pre><h3 id="BASIC-12-十六进制转八进制-进制转换-字符-循环"><a href="#BASIC-12-十六进制转八进制-进制转换-字符-循环" class="headerlink" title="BASIC-12    十六进制转八进制    进制转换 字符 循环"></a>BASIC-12    十六进制转八进制    进制转换 字符 循环</h3><p>问题描述<br>　　给定n个十六进制正整数，输出它们对应的八进制数。</p>
<p>输入格式<br>　　输入的第一行为一个正整数n （1&lt;=n&lt;=10）。</p>
<p>　　接下来n行，每行一个由0 ~ 9、大写字母A ~ F组成的字符串，表示要转换的十六进制正整数，每个十六进制数长度不超过100000。</p>
<p>输出格式</p>
<p>　　输出n行，每行为输入对应的八进制正整数。</p>
<p>　　【注意】<br>　　输入的十六进制数不会有前导0，比如012A。</p>
<p>　　输出的八进制数也不能有前导0。</p>
<p>样例输入<br>　　2<br>　　39<br>　　123ABC</p>
<p>样例输出<br>　　71<br>　　4435274</p>
<p>n = int(input())<br>for i in range(n):<br>    a = input()<br>    ans = format(int(a,16),’o’) #必须为小写o<br>    print(ans)</p>
<h3 id="BASIC-13-数列排序"><a href="#BASIC-13-数列排序" class="headerlink" title="BASIC-13    数列排序"></a>BASIC-13    数列排序</h3><p>给定一个长度为n的数列，将这个数列按从小到大的顺序排列。1&lt;=n&lt;=200</p>
<p>输入格式<br>　　第一行为一个整数n。<br>　　第二行包含n个整数，为待排序的数，每个整数的绝对值小于10000。</p>
<p>输出格式<br>　　输出一行，按从小到大的顺序输出排序后的数列。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">arr = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">arr.sort()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">    <span class="built_in">print</span>(arr[i],end=<span class="string">&#x27; &#x27;</span>) <span class="comment"># end=&#x27; &#x27;输出&#x27; &#x27;后不换行</span></span><br></pre></td></tr></table></figure>
<p>蓝桥杯对空格换行要求不高</p>
<h3 id="BASIC-14-VIP试题-时间转换-取余-数字字符混合输出"><a href="#BASIC-14-VIP试题-时间转换-取余-数字字符混合输出" class="headerlink" title="BASIC-14    VIP试题 时间转换    取余 数字字符混合输出"></a>BASIC-14    VIP试题 时间转换    取余 数字字符混合输出</h3><p>问题描述<br>　　给定一个以秒为单位的时间t，要求用“&lt; H &gt; :&lt; M&gt;:&lt; S&gt;”的格式来表示这个时间。<H>表示时间，&lt; M &gt; 表示分钟，而 &lt; S &gt; 表示秒，它们都是整数且没有前导的“0”。例如，若t=0，则应输出是“0:0:0”；若t=3661，则输出“1:1:1”。</p>
<p>输入格式<br>　　输入只有一行，是一个整数t（0&lt;=t&lt;=86399）。</p>
<p>输出格式<br>　　输出只有一行，是以“&lt; H &gt;:&lt; M &gt;:&lt; S &gt;”的格式所表示的时间，不包括引号。</p>
<p>样例输入<br>0</p>
<p>样例输出<br>0:0:0</p>
<p>样例输入<br>5436</p>
<p>样例输出<br>1:30:36</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">t=<span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">H=t//<span class="number">3600</span></span><br><span class="line">M=(t-H*<span class="number">3600</span>)//<span class="number">60</span></span><br><span class="line">S=t%<span class="number">60</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%d:%d:%d&#x27;</span>% (H, M, S))</span><br></pre></td></tr></table></figure>
<pre><code>5436
1:30:36
</code></pre><p>注意格式化print的写法：print(‘%d:%d:%d’% (H, M, S))</p>
<h3 id="BASIC-15-VIP试题-字符串对比-字符串-大小写"><a href="#BASIC-15-VIP试题-字符串对比-字符串-大小写" class="headerlink" title="BASIC-15    VIP试题 字符串对比    字符串 大小写"></a>BASIC-15    VIP试题 字符串对比    字符串 大小写</h3><p>问题描述<br>给定两个仅由大写字母或小写字母组成的字符串(长度介于1到10之间)，它们之间的关系是以下4中情况之一：</p>
<p>1：两个字符串长度不等。比如 Beijing 和 Hebei</p>
<p>2：两个字符串不仅长度相等，而且相应位置上的字符完全一致(区分大小写)，比如 Beijing 和 Beijing</p>
<p>3：两个字符串长度相等，相应位置上的字符仅在不区分大小写的前提下才能达到完全一致（也就是说，它并不满足情况2）。比如 beijing 和 BEIjing</p>
<p>4：两个字符串长度相等，但是即使是不区分大小写也不能使这两个字符串一致。比如 Beijing 和 Nanjing</p>
<p>编程判断输入的两个字符串之间的关系属于这四类中的哪一类，给出所属的类的编号。</p>
<p>输入格式<br>　　包括两行，每行都是一个字符串</p>
<p>输出格式<br>　　仅有一个数字，表明这两个字符串的关系编号</p>
<p>样例输入<br>BEIjing<br>beiJing </p>
<p>样例输出<br>3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="built_in">str</span>(<span class="built_in">input</span>())</span><br><span class="line">b=<span class="built_in">str</span>(<span class="built_in">input</span>())</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(a) != <span class="built_in">len</span>(b):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a == b:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;2&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> a.upper() == b.upper():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;3&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;4&quot;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>BEIjing
beiJing
3
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&#x27;a&#x27;</span></span><br><span class="line">a1=a.upper()</span><br><span class="line"><span class="built_in">print</span>(a1)</span><br><span class="line">b=<span class="string">&#x27;B&#x27;</span></span><br><span class="line">b1=b.lower()</span><br><span class="line"><span class="built_in">print</span>(b1)</span><br></pre></td></tr></table></figure>
<pre><code>A
b
</code></pre><h3 id="BASIC-16-VIP试题-分解质因数-质数分解-循环"><a href="#BASIC-16-VIP试题-分解质因数-质数分解-循环" class="headerlink" title="BASIC-16    VIP试题 分解质因数    质数分解 循环"></a>BASIC-16    VIP试题 分解质因数    质数分解 循环</h3><p>问题描述<br>　　求出区间[a,b]中所有整数的质因数分解。</p>
<p>输入格式<br>　　输入两个整数a，b。</p>
<p>输出格式<br>　　每行输出一个数的分解，形如k=a1 <em> a2 </em> a3…(a1&lt;=a2&lt;=a3…，k也是从小到大的)(具体可看样例)</p>
<p>样例输入<br>3 10</p>
<p>样例输出<br>3=3<br>4=2<em>2<br>5=5<br>6=2</em>3<br>7=7<br>8=2<em>2</em>2<br>9=3<em>3<br>10=2</em>5</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#import time</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_prime</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, n):</span><br><span class="line">        <span class="keyword">if</span> n % i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">a, b = <span class="built_in">map</span>(<span class="built_in">int</span>, <span class="built_in">input</span>().split())</span><br><span class="line"><span class="comment">#start = time.time()</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(a,b+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">if</span> is_prime(i):  <span class="comment"># 如果是素数，则等于它本身</span></span><br><span class="line">        <span class="built_in">print</span>(i, <span class="string">&#x27;=&#x27;</span>, i, sep=<span class="string">&#x27;&#x27;</span>) <span class="comment"># sep -- 用来间隔多个对象，默认值是一个空格。</span></span><br><span class="line"><span class="comment"># end -- 用来设定以什么结尾。默认值是换行符\n，我们可以换成其他字符串。</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(i, <span class="string">&#x27;=&#x27;</span>, sep=<span class="string">&#x27;&#x27;</span>, end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        temp = i</span><br><span class="line">        j = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> j &lt; i:</span><br><span class="line">            <span class="keyword">if</span> temp % j == <span class="number">0</span>: <span class="comment"># 分解质因数，从j=2开始除,直到对i取余不为0时，才j += 1，保证每个j出现最多</span></span><br><span class="line">                <span class="built_in">print</span>(j,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">                temp=<span class="built_in">int</span>(temp/j)</span><br><span class="line">                <span class="keyword">if</span> temp !=<span class="number">1</span>:</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">&#x27;*&#x27;</span>,end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                j=j+<span class="number">1</span></span><br><span class="line">        <span class="built_in">print</span>()</span><br><span class="line">        </span><br><span class="line"><span class="comment">#print(time.time()-start)</span></span><br></pre></td></tr></table></figure>
<pre><code>3 10
3=3
4=2*2
5=5
6=2*3
7=7
8=2*2*2
9=3*3
10=2*5
</code></pre><p>temp=int(temp/j)比temp=temp/j所用时间更短，因为前者是整数运算，后者是浮点数运算。</p>
<h3 id="BASIC-17-VIP试题-矩阵乘法-二维数组-循环-矩阵"><a href="#BASIC-17-VIP试题-矩阵乘法-二维数组-循环-矩阵" class="headerlink" title="BASIC-17    VIP试题 矩阵乘法    二维数组 循环 矩阵"></a>BASIC-17    VIP试题 矩阵乘法    二维数组 循环 矩阵</h3><p>问题描述<br>给定一个N阶矩阵A，输出A的M次幂（M是非负整数）</p>
<p>输入格式<br>    第一行是一个正整数N、M（1&lt;=N&lt;=30, 0&lt;=M&lt;=5），表示矩阵A的阶数和要求的幂数<br>    接下来N行，每行N个绝对值不超过10的非负整数，描述矩阵A的值</p>
<p>输出格式<br>　　输出共N行，每行N个整数，表示A的M次幂所对应的矩阵。相邻的数之间用一个空格隔开</p>
<p>样例输入（N阶矩阵A）</p>
<p>2 2</p>
<p>1 2</p>
<p>3 4</p>
<p>样例输出（A的2次幂）</p>
<p>7 10</p>
<p>15 22</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multi</span>(<span class="params">r_1,s_1,r_2,s_2</span>):</span> <span class="comment"># 矩阵乘法函数</span></span><br><span class="line">    <span class="keyword">if</span> s_1[<span class="number">1</span>] != s_2[<span class="number">0</span>] : <span class="comment"># 前提</span></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        r=[[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(s_1[<span class="number">0</span>])] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(s_2[<span class="number">1</span>])] <span class="comment"># 初始化</span></span><br><span class="line">        s=(s_1[<span class="number">0</span>],s_2[<span class="number">1</span>])</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(s_1[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(s_2[<span class="number">1</span>]):</span><br><span class="line">                <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(s_1[<span class="number">1</span>]):</span><br><span class="line">                    r[i][k] += r_1[i][j] * r_2[j][k]</span><br><span class="line">        <span class="keyword">return</span> r,s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读入数据，初始化</span></span><br><span class="line">N,M = <span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split())</span><br><span class="line">r = [[] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N) ]</span><br><span class="line"><span class="comment"># print(r) [[], []]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">    arr = <span class="built_in">input</span>().split()</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">        r[i].append(<span class="built_in">int</span>(arr[j]))</span><br><span class="line">s=(N,N)</span><br><span class="line">result,shape = r,s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算矩阵</span></span><br><span class="line"><span class="keyword">if</span> M == <span class="number">0</span> : <span class="comment"># 单位矩阵,斜着的是1</span></span><br><span class="line">    result = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(N)]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(N):</span><br><span class="line">        result[i][i] = <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(M-<span class="number">1</span>):</span><br><span class="line">        result,shape=multi(r,s,result,shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出矩阵</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(shape[<span class="number">0</span>]):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(shape[<span class="number">1</span>]):</span><br><span class="line">        <span class="built_in">print</span>(result[i][j],end=<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br></pre></td></tr></table></figure>
<pre><code>2 2
1 2 
3 4
7 10 
15 22 
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rect_ = [[<span class="number">0</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>)] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>)] <span class="comment">#【【第一层循环】第二层循环】</span></span><br><span class="line"><span class="built_in">print</span>(rect_)</span><br></pre></td></tr></table></figure>
<pre><code>[[0], [0]]
</code></pre><p>幂==》递归算法   result,shape=multi(r,s,result,shape)</p>
<p>读入数据：先初始化一行，然后通过append函数添加这一行的数据</p>
<p>矩阵乘法：r[i][k] += r_1[i][j] * r_2[j][k]</p>
<h3 id="BASIC-18-VIP试题-矩形面积交-判断-线段交"><a href="#BASIC-18-VIP试题-矩形面积交-判断-线段交" class="headerlink" title="BASIC-18    VIP试题 矩形面积交    判断 线段交"></a>BASIC-18    VIP试题 矩形面积交    判断 线段交</h3><p>问题描述<br>　　平面上有两个矩形，它们的边平行于直角坐标系的X轴或Y轴。对于每个矩形，我们给出它的一对相对顶点的坐标，请你编程算出两个矩形的交的面积。</p>
<p>输入格式<br>　　输入仅包含两行，每行描述一个矩形。<br>　　在每行中，给出矩形的一对相对顶点的坐标，每个点的坐标都用两个绝对值不超过10^7的实数表示。</p>
<p>输出格式<br>　　输出仅包含一个实数，为交的面积，保留到小数后两位。</p>
<p>样例输入</p>
<p>1 1 3 3</p>
<p>2 2 4 4</p>
<p>样例输出</p>
<p>1.00</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rect_1 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line">rect_2 = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">float</span>, <span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">area = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">x1 = <span class="built_in">max</span>(<span class="built_in">min</span>(rect_1[<span class="number">0</span>], rect_1[<span class="number">2</span>]), <span class="built_in">min</span>(rect_2[<span class="number">0</span>], rect_2[<span class="number">2</span>]))</span><br><span class="line">y1 = <span class="built_in">max</span>(<span class="built_in">min</span>(rect_1[<span class="number">1</span>], rect_1[<span class="number">3</span>]), <span class="built_in">min</span>(rect_2[<span class="number">1</span>], rect_2[<span class="number">3</span>]))</span><br><span class="line">x2 = <span class="built_in">min</span>(<span class="built_in">max</span>(rect_1[<span class="number">0</span>], rect_1[<span class="number">2</span>]), <span class="built_in">max</span>(rect_2[<span class="number">0</span>], rect_2[<span class="number">2</span>]))</span><br><span class="line">y2 = <span class="built_in">min</span>(<span class="built_in">max</span>(rect_1[<span class="number">1</span>], rect_1[<span class="number">3</span>]), <span class="built_in">max</span>(rect_2[<span class="number">1</span>], rect_2[<span class="number">3</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x1 &lt; x2 <span class="keyword">and</span> y1 &lt; y2:</span><br><span class="line">    area = (x2 - x1) * (y2 - y1)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%.2f&#x27;</span> % area)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;%.2f&#x27;</span> % area)</span><br></pre></td></tr></table></figure>
<pre><code>1 1 3 3
2 2 4 4 
1.00
</code></pre><p>矩阵交集条件：</p>
<p>max(矩阵A、B的最小横坐标) = x1 &gt; min(最大横坐标) = x2</p>
<p>纵坐标同理</p>
<p>矩阵面积交：area=(x2 - x1) * (y2 - y1)</p>
<h3 id="BASIC-19-VIP试题-完美的代价-贪心算法"><a href="#BASIC-19-VIP试题-完美的代价-贪心算法" class="headerlink" title="BASIC-19    VIP试题 完美的代价    贪心算法"></a>BASIC-19    VIP试题 完美的代价    贪心算法</h3><p>问题描述</p>
<p>　　回文串，是一种特殊的字符串，它从左往右读和从右往左读是一样的。小龙龙认为回文串才是完美的。现在给你一个串，它不一定是回文的，请你计算最少的交换次数使得该串变成一个完美的回文串。<br>　　<br>   交换的定义是：交换两个相邻的字符<br>　　<br>   例如mamad<br>　　第一次交换 ad : mamda<br>　　第二次交换 md : madma<br>　　第三次交换 ma : madam (回文！完美！)</p>
<p>输入格式</p>
<p>　　第一行是一个整数N，表示接下来的字符串的长度(N &lt;= 8000)</p>
<p>　　第二行是一个字符串，长度为N.只包含小写字母</p>
<p>输出格式</p>
<p>　　如果可能，输出最少的交换次数。</p>
<p>　　否则输出Impossible</p>
<p>样例输入</p>
<p>5</p>
<p>mamad</p>
<p>样例输出</p>
<p>3</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pal = <span class="built_in">list</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">count = flag = <span class="number">0</span>  <span class="comment"># count统计交换的次数，flag判断是否已经有一个单独的奇个数的字符了</span></span><br><span class="line">m = n - <span class="number">1</span> <span class="comment"># 倒数第二个字符</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):  <span class="comment"># 从头遍历到倒数第二个字符</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(m, i - <span class="number">1</span>, -<span class="number">1</span>):  <span class="comment"># 从后面往前一直到i寻找和pal[i]相同的pal[k]</span></span><br><span class="line">        <span class="keyword">if</span> k == i:  <span class="comment"># 如果找不到相同的</span></span><br><span class="line">            <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span> <span class="keyword">or</span> flag == <span class="number">1</span>:  <span class="comment"># impossible的两种情况:</span></span><br><span class="line">                <span class="comment"># n为偶数，有一个字符出现次数为奇数；</span></span><br><span class="line">                <span class="comment"># n为奇数，if已存在字符是奇数，又有一个字符是奇数</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;Impossible&#x27;</span>)</span><br><span class="line">                exit()</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">            count += <span class="built_in">int</span>(n / <span class="number">2</span>) - i</span><br><span class="line">        <span class="keyword">elif</span> pal[k] == pal[i]:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(k, m):  <span class="comment"># 找到相同的，进行交换</span></span><br><span class="line">                pal[j], pal[j + <span class="number">1</span>] = pal[j + <span class="number">1</span>], pal[j]</span><br><span class="line">                count += <span class="number">1</span>  <span class="comment"># 计数器加1</span></span><br><span class="line">            m -= <span class="number">1</span>  <span class="comment"># 最后排好序的不在进行比较</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(count)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">pal = <span class="built_in">list</span>(<span class="built_in">input</span>())</span><br><span class="line"></span><br><span class="line">count=<span class="number">0</span> <span class="comment">#交换次数</span></span><br><span class="line">flag =<span class="number">0</span> <span class="comment">#存在单独奇数字符</span></span><br><span class="line">m=n-<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):<span class="comment">#从头到尾遍历</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(m,i-<span class="number">1</span>,-<span class="number">1</span>): <span class="comment">#从尾到头遍历</span></span><br><span class="line">        <span class="keyword">if</span> k == i: <span class="comment">#全部遍历了，但没找到相同的</span></span><br><span class="line">            <span class="keyword">if</span> n%<span class="number">2</span>==<span class="number">0</span> <span class="keyword">or</span> flag ==<span class="number">1</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;Impossible&quot;</span>)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># BASIC-20	VIP试题 数的读法	判断 函数</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="二手写笔记"><a href="#二手写笔记" class="headerlink" title="二手写笔记"></a>二手写笔记</h2><p><img src="https://img-blog.csdnimg.cn/2d26a400e4984f85b402147a33eb6771.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/bc7ed62eed3c4d16959b80e1db827daa.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/9ddedc8a996d40c082942fbfa80ee7c8.png" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/76d240410d0c45b8ab5fba4ec71014fb.png" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>蓝桥杯python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯系列5——填空题练习</title>
    <url>/2022/05/06/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%B3%BB%E5%88%975%E2%80%94%E2%80%94%E5%A1%AB%E7%A9%BA%E9%A2%98%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<p>做小题的时候，主要目标是找如何做的又快又准。</p>
 <span id="more"></span>
<p>@<a href="蓝桥杯系列5——填空题练习">TOC</a></p>
<h1 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h1><p>做小题的时候，主要目标是找如何做的又快又准。<br>做完这些题，最大的感觉是，题目虽然不难，但是很多坑（很大可能是自己基础太差了(ಥ_ಥ) ）</p>
<h1 id="题目一"><a href="#题目一" class="headerlink" title="题目一"></a>题目一</h1><p>（1）一个字符串的非空子串是指字符串中长度至少为 1 的连续的一段字符组成 的串。例如，字符串aaab 有非空子串a, b, aa, ab, aaa, aab, aaab，一共 7 个。 注意在计算时，只算本质不同的串的个数。 请问，字符串0100110001010001 有多少个不同的非空子串？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&#x27;0100110001010001&#x27;</span></span><br><span class="line">subs = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(s)+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(s)+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span>(s[i:j] <span class="keyword">not</span> <span class="keyword">in</span> subs):</span><br><span class="line">            subs.append(s[i:j])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(subs))</span><br></pre></td></tr></table></figure>
<pre><code>100
</code></pre><h1 id="题目二"><a href="#题目二" class="headerlink" title="题目二"></a>题目二</h1><p>(2)给定数列 1, 1, 1, 3, 5, 9, 17, …，从第 4 项开始，每项都是前 3 项的和。求 第 20190324 项的最后 4 位数字。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">1</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>)]</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>,<span class="number">20190324</span>,<span class="number">1</span>):</span><br><span class="line"><span class="comment">#     print(a[i-1])</span></span><br><span class="line">    a.append((a[i-<span class="number">3</span>]+a[i-<span class="number">2</span>]+a[i-<span class="number">1</span>])%<span class="number">10000</span>)</span><br><span class="line"><span class="built_in">print</span>(a[<span class="number">20190323</span>])</span><br></pre></td></tr></table></figure>
<pre><code>1
4659
</code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>①一定要注意range从0开始</p>
<p>②列表初始化a=[1 for _ in range(3)]，列表添加元素a.append(1)</p>
<h1 id="题目三"><a href="#题目三" class="headerlink" title="题目三"></a>题目三</h1><p>（3）把 2019 分解成 3 个各不相同的正整数之和，并且要求每个正整数都不包 含数字 2 和 4，一共有多少种不同的分解方法？ 注意交换 3 个整数的顺序被视为同一种方法，例如 1000+1001+18 和 1001+1000+18 被视为同一种。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">tmp = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>(n):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;2&#x27;</span> <span class="keyword">or</span> i == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">2018</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>,<span class="number">2018</span>):</span><br><span class="line">        k = <span class="number">2019</span>-i-j</span><br><span class="line">        <span class="keyword">if</span> k &gt;j <span class="keyword">and</span> check(i) <span class="keyword">and</span> check(j) <span class="keyword">and</span> check(k):</span><br><span class="line">            tmp = tmp + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(tmp)</span><br></pre></td></tr></table></figure>
<pre><code>40785
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">str</span>(n):</span><br><span class="line">        <span class="keyword">if</span> i == <span class="string">&#x27;2&#x27;</span> <span class="keyword">or</span> i == <span class="string">&#x27;4&#x27;</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(check(<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<pre><code>1
False
</code></pre><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>①注意审题：各不相同的正整数<br>②小题尽可能准确，不要在意时间复杂度等<br>③注意==的比较对象，如果是字符串要交””</p>
<h1 id="题目四"><a href="#题目四" class="headerlink" title="题目四"></a>题目四</h1><p>(4)年号字串</p>
<p>小明用字母 A 对应数字1，B 对应2，以此类推，用 Z 对应26。对于27以上的数字，小明用两位或更长位的字符串来对应，例如AA 对应 27，AB 对应28，AZ 对应52，LQ 对 329。</p>
<p>请问2019 对应的字符串是什么？</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span></span><br><span class="line">yu = []</span><br><span class="line">num=<span class="number">2019</span></span><br><span class="line"><span class="keyword">while</span> num &gt;= <span class="number">26</span>:</span><br><span class="line">    yu.append(num%<span class="number">26</span>)</span><br><span class="line">    num = num//<span class="number">26</span></span><br><span class="line">yu.append(num)</span><br><span class="line"><span class="built_in">print</span>(yu)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> yu[::-<span class="number">1</span>]:</span><br><span class="line">    <span class="built_in">print</span>(str1[i-<span class="number">1</span>],end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<pre><code>[17, 25, 2]
BYQ
</code></pre><p>(5)卡片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">    <span class="keyword">if</span> count &gt; <span class="number">2019</span>:</span><br><span class="line">        <span class="built_in">print</span>(i-<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">str</span>(i):</span><br><span class="line">        <span class="keyword">if</span> j == <span class="string">&quot;1&quot;</span>:</span><br><span class="line">            count = count+<span class="number">1</span></span><br></pre></td></tr></table></figure>
<pre><code>3181
</code></pre><h2 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h2><p>①数字1用的最快<br>②注意判断和循环的先后关系</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#出现次数最多的数</span></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">num = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,<span class="built_in">input</span>().split()))</span><br><span class="line"></span><br><span class="line">b = <span class="built_in">list</span>(<span class="built_in">set</span>(num))<span class="comment">#化为集合，去掉相同数</span></span><br><span class="line">b.sort()<span class="comment">#从小到大排序</span></span><br><span class="line"></span><br><span class="line">s = <span class="built_in">dict</span>(<span class="built_in">zip</span>(b,<span class="built_in">map</span>(num.count,b)))<span class="comment">#将数与它的出现次数组合再转为字典</span></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(s,key=s.get))<span class="comment">#根据字典值选出count最大的数</span></span><br></pre></td></tr></table></figure>
<pre><code>6
10 1 10 20 30 20
&#123;1: 1, 10: 2, 20: 2, 30: 1&#125;
10
</code></pre><h1 id="题目五"><a href="#题目五" class="headerlink" title="题目五"></a>题目五</h1><p>（5）数字中包含2019<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, n + <span class="number">1</span>):</span><br><span class="line">    a = i</span><br><span class="line">    <span class="keyword">while</span> a != <span class="number">0</span>:</span><br><span class="line">        temp = a % <span class="number">10</span></span><br><span class="line">        a = <span class="built_in">int</span>(a / <span class="number">10</span>)</span><br><span class="line">        <span class="keyword">if</span> temp <span class="keyword">in</span> [<span class="number">2</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">9</span>]:</span><br><span class="line">            s += i</span><br><span class="line">            falg = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure></p>
<pre><code>40
574
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n = <span class="number">40</span></span><br><span class="line">sum1 = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,n+<span class="number">1</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">str</span>(i):</span><br><span class="line">        <span class="keyword">if</span> j == <span class="string">&quot;2&quot;</span> <span class="keyword">or</span> j == <span class="string">&quot;0&quot;</span> <span class="keyword">or</span> j == <span class="string">&quot;1&quot;</span> <span class="keyword">or</span> j ==<span class="string">&quot;9&quot;</span>:</span><br><span class="line">            sum1 = sum1 + i</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(sum1)</span><br></pre></td></tr></table></figure>
<pre><code>574
</code></pre><h1 id="题目六"><a href="#题目六" class="headerlink" title="题目六"></a>题目六</h1><p>（6）跑步</p>
<p>小明坚持每天跑步，正常情况下每天跑一公里，如果这一天是周一或者月初（每月的一号），那么小明就会跑两公里（如果这一天既是周一，又是月初，小明也是跑两公里），小明从2000年1月1日（周六）一直坚持到了2020年10月1日（周四），请你计算一下小明共跑了多少公里？<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> *</span><br><span class="line">start = date(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">end = date(<span class="number">2020</span>,<span class="number">10</span>,<span class="number">2</span>)</span><br><span class="line">tmp = timedelta(days = <span class="number">1</span>)</span><br><span class="line">ans = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> start != end:</span><br><span class="line">    <span class="keyword">if</span> start.weekday() == <span class="number">0</span> <span class="keyword">or</span> start.day == <span class="number">1</span>:</span><br><span class="line">        ans += <span class="number">2</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        ans += <span class="number">1</span></span><br><span class="line">    start = start + tmp</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure></p>
<pre><code>8879
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> *</span><br><span class="line">start = date(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">end = date(<span class="number">2000</span>,<span class="number">1</span>,<span class="number">7</span>)</span><br><span class="line">tmp = timedelta(days = <span class="number">1</span>)</span><br><span class="line"><span class="keyword">while</span> start != end:</span><br><span class="line">    <span class="keyword">if</span> start.weekday() == <span class="number">6</span>:</span><br><span class="line">        <span class="built_in">print</span>(start,<span class="string">&quot;start.weekday() == 6&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> start.day == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(start,<span class="string">&quot;start.day == 1&quot;</span>)</span><br><span class="line">    start = start + tmp</span><br><span class="line"><span class="built_in">print</span>(ans)</span><br></pre></td></tr></table></figure>
<pre><code>2000-01-01 start.day == 1
2000-01-02 start.weekday() == 6
6054
</code></pre><h2 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h2><p>①datetime库</p>
<p>②start.weekday() == 0判断是否为星期一</p>
<p>③start.day == 1判断是否为月初第一天</p>
<h1 id="题目七"><a href="#题目七" class="headerlink" title="题目七"></a>题目七</h1><p>（7）矩形切割</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="number">2019</span></span><br><span class="line">b = <span class="number">324</span></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="built_in">min</span>(a,b)&gt;<span class="number">0</span>:</span><br><span class="line">    <span class="keyword">if</span> a&gt;b:</span><br><span class="line">        a=a-b</span><br><span class="line">    <span class="keyword">elif</span> b&gt;a:</span><br><span class="line">        b=b-a</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i = i+<span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(i+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<pre><code>21
</code></pre>]]></content>
      <categories>
        <category>蓝桥杯python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝桥杯系列6——python技巧</title>
    <url>/2022/05/07/%E8%93%9D%E6%A1%A5%E6%9D%AF%E7%B3%BB%E5%88%976%E2%80%94%E2%80%94python%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>python内置函数</p>
 <span id="more"></span>
<h2 id="零"><a href="#零" class="headerlink" title="零"></a>零</h2><p>参考：<a href="https://blog.csdn.net/m0_48936146/article/details/124039887">https://blog.csdn.net/m0_48936146/article/details/124039887</a><br>为了减少时间复杂度，<del>同时减少写代码的难度</del> ，在考前两天时整理了这份技巧。感觉在蓝桥杯Python组，这些技巧还是很好用滴。</p>
<h2 id="一、内置函数"><a href="#一、内置函数" class="headerlink" title="一、内置函数"></a>一、内置函数</h2><h3 id="1-数学函数"><a href="#1-数学函数" class="headerlink" title="1.数学函数"></a>1.数学函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 绝对值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">abs</span>(-<span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<pre><code>10
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># divmod() 函数 ：同时取商和余数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">divmod</span>(<span class="number">7</span>,<span class="number">2</span>))</span><br></pre></td></tr></table></figure>
<pre><code>(3, 1)
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]))</span><br></pre></td></tr></table></figure>
<pre><code>6
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 四舍五入</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">5.1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(<span class="number">5.5</span>))</span><br></pre></td></tr></table></figure>
<pre><code>5
6
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">pow</span>(<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"><span class="comment">#也可以使用**</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>**<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<pre><code>8
8
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">min</span>(<span class="number">9</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>))</span><br></pre></td></tr></table></figure>
<pre><code>2
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">max</span>(<span class="number">9</span>,<span class="number">5</span>,<span class="number">2</span>,<span class="number">7</span>))</span><br></pre></td></tr></table></figure>
<pre><code>9
</code></pre><h3 id="2-数据转换函数"><a href="#2-数据转换函数" class="headerlink" title="2.数据转换函数"></a>2.数据转换函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hex() 函数： 十进制转换成十六进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="number">100</span>))</span><br></pre></td></tr></table></figure>
<pre><code>0x64
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># oct() 函数： 十进制转换成八进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">oct</span>(<span class="number">100</span>))</span><br></pre></td></tr></table></figure>
<pre><code>0o144
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bin() 函数 ：十进制转换成二进制</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bin</span>(<span class="number">100</span>))</span><br></pre></td></tr></table></figure>
<pre><code>0b1100100
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># bool() 函数 ：将指定的参数转换成布尔类型</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="number">0</span>))</span><br></pre></td></tr></table></figure>
<pre><code>True
False
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ord() 函数 ：获取单个字符的ASCII数值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>))</span><br></pre></td></tr></table></figure>
<pre><code>65
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># float() 函数 ：转换成浮点数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">float</span>(<span class="number">10</span>))</span><br></pre></td></tr></table></figure>
<pre><code>10.0
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># chr() 函数： 转换一个整数并返回所对应的字符</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">65</span>))</span><br></pre></td></tr></table></figure>
<pre><code>A
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># list() 函数： 将可迭代对象转换为列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">1</span>,<span class="number">10</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9]
</code></pre><h3 id="3-对象创建函数"><a href="#3-对象创建函数" class="headerlink" title="3.对象创建函数"></a>3.对象创建函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># open()函数：打开文件并返回文件对象</span></span><br><span class="line">f1 = <span class="built_in">open</span>(<span class="string">&#x27;Hello.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(f1.readline())</span><br></pre></td></tr></table></figure>
<pre><code>Hello Python
</code></pre><p>​    </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># set()函数：创建一个无序不重复元素集合</span></span><br><span class="line"><span class="built_in">set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>])</span><br></pre></td></tr></table></figure>
<pre><code>&#123;1, 2, 3, 4, 5, 6&#125;
</code></pre><h3 id="4-迭代器操作函数"><a href="#4-迭代器操作函数" class="headerlink" title="4.迭代器操作函数"></a>4.迭代器操作函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>]</span><br><span class="line"><span class="built_in">all</span>(a)</span><br></pre></td></tr></table></figure>
<pre><code>False
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">any</span>(a)</span><br></pre></td></tr></table></figure>
<pre><code>True
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sorted() 函数： 对可迭代对象进行排序</span></span><br><span class="line">a = [<span class="number">3</span>,<span class="number">1</span>,<span class="number">4</span>,<span class="number">2</span>]</span><br><span class="line"><span class="built_in">sorted</span>(a)</span><br></pre></td></tr></table></figure>
<pre><code>[1, 2, 3, 4]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># map()函数： 通过自定义函数实现对序列的元素映射操作并返回操作后的结果</span></span><br><span class="line"><span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>,[<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>]))</span><br></pre></td></tr></table></figure>
<pre><code>[1, 2, 3]
</code></pre><h3 id="5-基本常用函数"><a href="#5-基本常用函数" class="headerlink" title="5.基本常用函数"></a>5.基本常用函数</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&#123;:.2f&#125;&quot;</span>.<span class="built_in">format</span>(<span class="number">3.1415926</span>));</span><br></pre></td></tr></table></figure>
<pre><code>hello world
3.14
</code></pre><h2 id="二、字符串操作"><a href="#二、字符串操作" class="headerlink" title="二、字符串操作"></a>二、字符串操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">&quot;123455&quot;</span></span><br><span class="line">str0 = <span class="string">&quot;1&quot;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回 str 在 string 里面出现的次数</span></span><br><span class="line"><span class="comment"># 如果 beg 或者 end 指定,则返回指定范围内 str 出现的次数</span></span><br><span class="line"><span class="comment"># string.count(str0, beg=0, end=len(string))</span></span><br><span class="line">string.count(str0, <span class="number">0</span>, <span class="built_in">len</span>(string))</span><br></pre></td></tr></table></figure>
<pre><code>1
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># string.endswith(obj, beg=0, end=len(string))</span></span><br><span class="line"><span class="built_in">print</span>(string.endswith(str0, <span class="number">0</span>, <span class="built_in">len</span>(string)))</span><br><span class="line"><span class="built_in">print</span>(string.endswith(<span class="string">&quot;5&quot;</span>, <span class="number">0</span>, <span class="built_in">len</span>(string)))</span><br></pre></td></tr></table></figure>
<pre><code>False
True
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 检测 str 是否包含在 string 中，如果是返回开始的索引值，否则返回-1</span></span><br><span class="line"><span class="comment"># string.find(str, beg=0, end=len(string))</span></span><br><span class="line">string.find(str0, <span class="number">0</span>, <span class="built_in">len</span>(string))</span><br></pre></td></tr></table></figure>
<pre><code>0
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以 string 作为分隔符，将 seq 中所有的元素(的字符串表示)合并为一个新的字符串</span></span><br><span class="line"><span class="comment"># seq.join(string)</span></span><br><span class="line">seq = <span class="string">&quot; &quot;</span></span><br><span class="line"><span class="built_in">print</span>(seq.join(string))</span><br></pre></td></tr></table></figure>
<pre><code>1 2 3 4 5 5
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 截掉字符串左边的空格或指定字符</span></span><br><span class="line"><span class="built_in">print</span>(string.lstrip(<span class="string">&quot;13&quot;</span>))</span><br><span class="line"><span class="comment"># 删除 string 字符串末尾的指定字符</span></span><br><span class="line"><span class="built_in">print</span>(string.rstrip(<span class="string">&quot;554&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配时不是按照整个字符串匹配的，而是一个个匹配的</span></span><br></pre></td></tr></table></figure>
<pre><code>23455
123
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string1 = <span class="string">&quot;aAaa&quot;</span></span><br><span class="line"><span class="built_in">print</span>(string1.upper())</span><br><span class="line"><span class="built_in">print</span>(string1.lower())</span><br><span class="line"><span class="built_in">print</span>(string1.swapcase()) <span class="comment"># 大小写翻转</span></span><br></pre></td></tr></table></figure>
<pre><code>AAAA
aaaa
AaAA
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列表转化为整数</span></span><br><span class="line">a=[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>]</span><br><span class="line">b=[<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>]</span><br><span class="line">r1 = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, a))) </span><br><span class="line">r2 = <span class="built_in">int</span>(<span class="string">&quot;&quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">str</span>, b))) </span><br><span class="line"><span class="built_in">print</span>(r1,r2)</span><br></pre></td></tr></table></figure>
<pre><code>135 456
</code></pre><h2 id="三、math的使用"><a href="#三、math的使用" class="headerlink" title="三、math的使用"></a>三、math的使用</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> math  </span><br></pre></td></tr></table></figure>
<h3 id="1-向上取整"><a href="#1-向上取整" class="headerlink" title="1.向上取整"></a>1.向上取整</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(math.ceil(<span class="number">3.1</span>))</span><br></pre></td></tr></table></figure>
<pre><code>4
</code></pre><h3 id="2-向下取整"><a href="#2-向下取整" class="headerlink" title="2.向下取整"></a>2.向下取整</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(math.floor(<span class="number">3.1</span>))</span><br></pre></td></tr></table></figure>
<pre><code>3
</code></pre><h3 id="3-乘方-开方"><a href="#3-乘方-开方" class="headerlink" title="3.乘方 开方"></a>3.乘方 开方</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(math.<span class="built_in">pow</span>(<span class="number">10</span>,<span class="number">3</span>))</span><br><span class="line"><span class="built_in">print</span>(math.<span class="built_in">pow</span>(<span class="number">27</span>,<span class="number">1</span>/<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<pre><code>1000.0
3.0
</code></pre><h2 id="四、正则表达式"><a href="#四、正则表达式" class="headerlink" title="四、正则表达式"></a>四、正则表达式</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">s = <span class="string">&#x27;Regular 123 Expression 456&#x27;</span></span><br><span class="line">re.findall(<span class="string">r&#x27;\d+&#x27;</span>,s)</span><br></pre></td></tr></table></figure>
<pre><code>[&#39;123&#39;, &#39;456&#39;]
</code></pre><p>在目标字符串target 中查找符合规则rule 的字符串，后面还可以跟一个规则选项flag用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等。返回结果结果是一个列表，中间存放的是符合规则的字符串。如果没有符合规则的字符串被找到，就返回一个空列表。</p>
<p>^：匹配字符串开头</p>
<p>“ * “ 匹配前面的子表达式零次或多次</p>
<p>“ + “ 匹配前面的子表达式一次或多次</p>
<p>“ ？ “ 匹配前面的子表达式零次或一次</p>
<p>“ [abc]” ：方括号表示字符集合，例子表示一个字符串有一个 “a” 或 “b” 或 “c” 等价于 [z|b|c]</p>
<p>“ [a-z]”： 表示一个字符串中存在一个 a 和 z 之间的所有字母</p>
<p>“ <sup><a href="#fn_a-z" id="reffn_a-z">a-z</a></sup>“ ：表示一个字符串中不应该出现 a 到 z 之间的任意一个字母</p>
<p>“ [0-9]”： 表示一个字符串中存在一个 0 和 9 之间的所有数字</p>
<p>“ \d “ 匹配一个数字字符，等价[0-9]</p>
<p>“ \D “ 匹配一个非数字字符，等价<sup><a href="#fn_0-9" id="reffn_0-9">0-9</a></sup></p>
<p>“ \w” 匹配包括下划线的任何单词字符。等价于“[A-Za-z0-9_]”</p>
<p>“ \W” 匹配任何非单词字符。等价于“<sup><a href="#fn_A-Za-z0-9_" id="reffn_A-Za-z0-9_">A-Za-z0-9_</a></sup>”</p>
<h2 id="五、文件操作"><a href="#五、文件操作" class="headerlink" title="五、文件操作"></a>五、文件操作</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fp = <span class="built_in">open</span>(<span class="string">&#x27;hello.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">res = []</span><br><span class="line">s = fp.readlines()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    res.append(i.strip(<span class="string">&#x27;\n&#x27;</span>)) <span class="comment">#使用strip()去掉换行符，如果不去的话会把‘\n’也读进来</span></span><br><span class="line">fp.close() <span class="comment">#记得要关闭连接，养成良好习惯</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(res[:])</span><br></pre></td></tr></table></figure>
<pre><code>[&#39;Hello Python&#39;]
</code></pre><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"> </span><br><span class="line">s=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]<span class="comment">#序列</span></span><br><span class="line"><span class="comment">#l为排列组合的长度:从序列里面取几个出来</span></span><br><span class="line">l=<span class="number">2</span></span><br><span class="line">x=itertools.permutations(s,l)</span><br><span class="line"> </span><br><span class="line">y=itertools.combinations(s,l)</span><br><span class="line"> </span><br><span class="line"><span class="comment">#如果要查看x,y的内容,转化为列表</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(x),<span class="built_in">list</span>(y))</span><br></pre></td></tr></table></figure>
<pre><code>[(1, 2), (1, 3), (2, 1), (2, 3), (3, 1), (3, 2)] [(1, 2), (1, 3), (2, 3)]
</code></pre>]]></content>
      <categories>
        <category>蓝桥杯python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>蓝桥杯</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E8%BE%A9%E8%AE%BA%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<p>@<a href="辩论合集">TOC</a></p>
<h1 id="20210324-院决赛-被误解是-否表达者的宿命"><a href="#20210324-院决赛-被误解是-否表达者的宿命" class="headerlink" title="20210324 院决赛 被误解是/否表达者的宿命"></a>20210324 院决赛 被误解是/否表达者的宿命</h1><h2 id="材料"><a href="#材料" class="headerlink" title="材料"></a>材料</h2><p><img src="https://img-blog.csdnimg.cn/20210524165115118.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="一辩稿"><a href="#一辩稿" class="headerlink" title="一辩稿"></a>一辩稿</h2><p>被误解是表达者的宿命</p>
<p>谢谢主席，各位观众，各位评委大家晚上好！今天我方的观点是：被误解是表达者的宿命。</p>
<p>正本清源开宗明义，误解指言语交际中听话人没有准确、全面理解说话人意义的现象。误解属于言语交际中的理解现象，误解的行为主体是听话人，被误解的内容是说话人意义，误解与非误解的根本区别在于说话人意义与听话人理解的信息量大小不一样。误解指(信源与信宿)之差，包括，增、减解，失、转解。<br>其次，表达者。表达者是指所有可以发表内心自我想法的个体，不同于简单的情感流露，其观点是较真的表达，激活交际双方的认知思维活动。<br>什么是宿命？宿命是可预知的、受到既定限制的命运。我方强调，宿命是不可避免的。<br>表达者的宿命，是说你这个人在表达的路途上不可避免地被误解。所以我们说，被误解是表达者的宿命。像是受伤是拳击者的宿命，即使强如泰森，要一次次战胜擂台上的劲敌，也不可能每一次都全身而退。</p>
<p>今天我方判断这是不是表达者宿命，只要看表达者在事实层面上被误解是不是必然的。我方将围绕【为什么这种风险是必然的】展开叙述。</p>
<p>首先，表达有局限性。雷声在闪电之后，说的永远比想的慢。表达者很难完全表达其想法，心理活动往往比由话语表达出来的复杂得多。表达者本身，是带有情感需求，且受后天环境影响的。表达者说出的信息，通常不是1+1的纯理性信息。而是动机，有需求的信息。<br>其次，理解过程必然涉及主观判断。表达的过程是一个“明示-推理”的过程，而不仅仅是编码、解码过程。从话语接收者角度考虑，他无法推理到全部说话者的全部信息，必然引起交流的错位。</p>
<p>此外，表达者和倾听者存在认知鸿沟。由于语境因素，在信息传递与获取的过程中，会造成表达或理解上的误差。其中，语境因素，包括由交际双方在内的物质世界，社交世界和心理世界构成的交际语境和语言语境。其中，心理世界主要与说话者个体有关，如性格、情感、信仰、想法和动机。<br>而表达者本身表达的目的，就是扩充或挑战听众既有的观念体系。合格的表达，必须言之有物；而言之有物，要么是“不破不立”（否则就是废话），要么是“语不惊人死不休”（否则就是平庸）。表达者为什么一定会被误解？因为他们暂时不懂你的妙处或者说重要性。 </p>
<p>最后，人注定会死亡，但我们可以决定自己的生活有多精彩。我们不需要战胜宿命，正因为知道会被误解，我们才要尽己所能的作出最好的表达，力求减少这种误差，让倾听者可以更好地理解我们的想法。作为倾听者，我们知道表达者难免被误解，因此更能宽以待人。</p>
<p>综上，我方认为：在事实层面上，对一个表达者而言，总有被误解的情况存在。这种普遍 而且难以避免的情况，在我们看来是一种宿命的必然，而在价值层次上，这也可以启发我们去成为一个更好的表达者和倾听者。</p>
<h3 id="质询"><a href="#质询" class="headerlink" title="质询"></a>质询</h3><p>定义：<br>“误解”，我们通过“理解结果标准”来确认是否存在，指对比说话人意义与听话人理解的信息量大小以区分。“没有准确、全面理解”，“错误理解”都算误解。<br>误解属于言语交际中的理解现象，它作为一个行为过程，是客观存在的。被误解的后续话语可以作为证明，但不是误解存在的标准。<br>误解是普遍存在的。<br>失解:理解者或是不能够，或是不愿意，对表达者的话语没有得出任何理解，或者说是没有从中获得除语码本身外的其它信息，与信源对立的部分，即信宿为零。<br>减解:就是对表达者的话语所应包含的意义未作充分的理解，从而使部分意义失落，使信宿小于信源。<br>增解:与减解相反，增解是指本来表达者在话语中未曾赋予的含义，而理解者从自己的推测和理会出发添加于其中，使信宿大于信源。所谓“说者无意，听者有心”，如古之“郢书燕说”之类.<br>转解:即接受者所理解出来的意义与表达者想要表达的意思不符，说者谓此，听者谓彼，信宿较信源有所转移。</p>
<p>“宿命”，有时间限制。活着被误解，死后平反不能都算，不能唯结果论对一个人不公平。<br>一定会发生的。一定且至少一次。当然我方也愿意努力告诉各位，这种误解，有极大可能不止一次发生。<br>死是宿命，宣称长生不老不是打破宿命。<br>宿命指的是某件事情会人的一生高频发生。<br>“本质之必然”可以是“任何一个已知或未来的人都会被误解”，而不是“任何一次交流都必然被误解”</p>
<p>“表达者”，不是所有人都是表达者。有思考的表达，<br>人的范围内（不算客观规律和物体），人的时间内，一生中。<br>表达的越多，越深，质量数量，被误解的可能性越大。<br>判断：<br>表达者在事实层面上被误解是不是必然的。基于被误解从结构及现实意义上可不可以被消除。</p>
<h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><img src="https://img-blog.csdnimg.cn/20210524171729896.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="20210409校赛-初赛1-教育发展应该以经济发展为前提-经济发展应该以教育发展为前提"><a href="#20210409校赛-初赛1-教育发展应该以经济发展为前提-经济发展应该以教育发展为前提" class="headerlink" title="20210409校赛 初赛1 教育发展应该以经济发展为前提/经济发展应该以教育发展为前提"></a>20210409校赛 初赛1 教育发展应该以经济发展为前提/经济发展应该以教育发展为前提</h1><h2 id="材料-1"><a href="#材料-1" class="headerlink" title="材料"></a>材料</h2><p><img src="https://img-blog.csdnimg.cn/20210524170819848.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="一辩稿3-0"><a href="#一辩稿3-0" class="headerlink" title="一辩稿3.0"></a>一辩稿3.0</h2><p>教育发展应该以经济发展为前提</p>
<p>谢谢主席，问候在场各位！<br>开宗明义。发展是事物从产生开始，连续不断进步、向好的变更过程，这要求其中既有量的变化，又有质的变化。教育发展是指: 教育事业进步和拓展的程度。前提是指在此基础上的后续行为。基于如上定义，接下来我将以“何者作为前提能对当今中国的发展起到更有效的促进作用”为判准，从应然和实然两个层次 来论证我方观点：教育发展应该以经济发展为前提。<br>在应然层面。首先，文化的产生是生产力不断发展的结果。（对象：人的底层需求）马斯诺的需求层次是一级级满足的，先物质再精神，并非一蹴而就。经济发展后，有了消费能力，而后人们的需求端消费升级，消费结构改变，追求高质量高品质的生活，追求精神世界。“物质决定意识，主观愿望的实现必须依靠一定的物质条件。”当物质生产丰富到一定程度时，人们才有了获取知识、技能的需要，才有了教授的过程，开始出现“教育”。<br>其次，经济基础决定上层建筑。从经济基础衍生出的上层建筑，包括但不限于教育、国防、民生等。上层建筑对经济基础起到的是，综合的能动反作用。但后者不是前者的前提。教育是从经济中衍生出的上层建筑中的一种，它的产生和发展脱离不开相关的社会历史背景，主要反映现实的经济结构。教育要发展，就要有物质条件作为基础。（对象：物体）我方首先要表明的是，我们十分认同对方辩友刚刚对教育发展重要性的阐述。如今社会飞速发展，普及教育的基线不再是识汉字、算加减。在国家巨额教育经费的支持下，“数字课堂”的推广和应用高效推进了教育的改革。PPT投影设备，提高了抽象概念等知识的学习效率。正是以经济发展为中心的国家政策，有了经济的积累，国家才有底气去投入到更多 例如教育等方面的发展中，从而起到事半功倍的积极效果。“巧妇难为无米之炊”，诚然做饭这样的小事都无米难为，由此及彼，经济发展若不作为前提条件，没有物质条件，那么今天我们在这谈教育发展无疑坐而论道，事倍功半。<br>在实然层面，以经济建设为中心的基本路线，已在中国取得了阶段性成就。从改革开放到习近平新时代以来，我国发展一直以经济建设为中心，其他各项工作都服从和服务于这个中心，并取得了举世瞩目的成就。我国从改革开放的GDP全球第十，跨越到了第二。这正证明政策的优越性。<br>综上，我方认为：在事实层面上，没有经济增长带来的物质支持，教育发展的空中楼阁就不能落到实处。在实然层面上，实践检验真理，我们的选择是正确的。</p>
<h1 id="20210416校赛-初赛2-经济发展应该以教育发展为前提"><a href="#20210416校赛-初赛2-经济发展应该以教育发展为前提" class="headerlink" title="20210416校赛 初赛2 经济发展应该以教育发展为前提"></a>20210416校赛 初赛2 经济发展应该以教育发展为前提</h1><h2 id="材料-2"><a href="#材料-2" class="headerlink" title="材料"></a>材料</h2><p><img src="https://img-blog.csdnimg.cn/20210524170041671.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="一辩稿-1"><a href="#一辩稿-1" class="headerlink" title="一辩稿"></a>一辩稿</h2><p>经济发展应该以教育发展为前提</p>
<p>谢谢主席，问候在场各位！<br>开宗明义。发展是事物从产生开始，连续不断进步、向好的变更过程。教育发展分为两个维度，一是深度，培养高精尖人才的精英教育。二是广度，全民的素质普及教育。经济发展是指：生产力的提高。前提是指后续行为的基础。基于如上定义，接下来我将以“何者作为前提能对当今中国的发展起到更有效的促进作用”为判准，来论证我方观点：经济发展应该以教育发展为前提。<br>第一，GDP增长逐渐平缓，教育能作为引领经济发展的新奇点。<br>首先，教育能有效促进创新人才的培养和技术的发展。19 世纪 60 年代前，韩国经济远不如朝鲜，企业创新以产品模仿为主，相关技术主要依靠进口。但韩国大力发展教育，在基础产业深度创新。2018年，韩国半导体销售额居世界第 1 位，创新指数在全球排名第 4，人均 GDP 突破了3 万美元。同为亚洲地区的韩国，其科技创新 高效的支撑着高科技产业的发展。<br>目前我国GDP跃居世界第二，但大而不强、臃肿虚胖，主要体现在创新能力不强。通过发展教育促进提高创新力，而创新力 引领和驱动发展 是我国发展的迫切要求。<br>其次，人才培养，能更好地应对芯片等掐脖子问题。当中兴被停止供应芯片时，当即宣布停摆。像芯片这种问题，不是烧钱就能解决的。知识无国界，但科学家有祖国。我们要自己掌握技术命脉，掌握世界最新知识的基础上，创造出世界各个学科最重要的新成果，获得一批重要的知识产权，为中国经济打下自主的基础。</p>
<p>第二，教育能提高人们的道德水平和发现美的能力。<br>首先，经济发展水平提高，犯罪却逐渐低龄化。自2008年经济大幅度跨升以来，青年犯罪率逐步提高。2018年，青少年犯罪占全部犯罪的70%，且近几年呈现上升趋势。而教育发展，可以提高道德水平，降低犯罪率。Machin 研究发现，居民平均受教育年限每增加 1 年将使犯罪率降低 11%。<br>其次，当教育发展匹配不上经济发展的速度，人也感知不到幸福。政府对教育投入占GDP（即99万亿元）比重，达4.04%。在世界有可比数据的190个国家和地区中，居第110位，而人均GDP居65位。我方想说明，经济发展不断发展，但物欲也随之升高。如果没有自己判别幸福的能力，作为乌合之众的一员，不断内卷。哪怕经济发展的再好，大多数人也很难感知到幸福。古代经济发展没有现在好，但不是没有人民安居乐业，社会安定幸福的朝代。各方面平衡发展，社会才能发展的更好，人民才会更幸福。</p>
<p>“一个女孩受教育，可以改变三代人。”教育的作用，不仅仅是提高当代人的创新能力，还有三观的培养，并潜移默化影响着对下一代的培育观念。教育的能量，远远高于经济的即时作用。虽然他的回报周期长，前期投入大，但是作用效果的持续时间也长。综上，我方认为，经济发展应该以教育发展为前提。</p>
<h3 id="质询："><a href="#质询：" class="headerlink" title="质询："></a>质询：</h3><p>首先，是高科技带来的知识经济。教育培育技术创新型人才，能更好地应对芯片等掐脖子问题。知识无国界，但科学家有祖国。当今国家有能力为有志青年提供更好的学习条件，更好的科研条件。他们能在掌握世界最新知识的基础上，创造出世界各个学科最重要的新成果，获得一批重要的知识产权，为中国经济打下自主的基础。<br>（从小创新，不断学习不断创新。）<br>（以人为本。人民生活和国家更好。几十年前，经济不好，人还不是很快乐，人的发展）<br>（教育，高尚的品格，社会更美好。幸福很多。只发展经济，哪怕经济发展很好，物欲变高。经济升高，品质更好，犯罪下降，达到理想社会。）<br>其次，是受劳动力质量限制的生产力提高。中国制造时代的人口红利逐步消去，作为生产要素中最活跃的 劳动力因素，其质量限制生产力的提高。而教育匹配不上经济发展的速度。政府对教育投入占GDP（即99万亿元）比重，达4.04%。在世界有可比数据的190个国家和地区中，居第110位，而人均GDP居65位。各国都很重视教育的情况下，总书记在十九大提出，优先发展教育事业，弥补对教育投入的历史性欠账。现阶段更关键的是，提高劳动力质量。</p>
<p>“一个女孩受教育，可以改变三代人。”教育的能量，远远高于经济的即时作用。虽然他的回报周期长，前期投入大，但是作用效果的持续时间也长。综上，我方认为，经济发展应该以教育发展为前提。</p>
<p>教育提高了人们的道德标准</p>
<h3 id="其他："><a href="#其他：" class="headerlink" title="其他："></a>其他：</h3><p>为培养和造就一批世界水平的科技领军人才和科学家，韩国先后于 1997 年和 2004 年实施“创意性研究振兴事业促进计划”和“国家科学家研究支援事业”。大量高素质的人才支撑信息通讯成为韩国基础产业，韩国在该领域进行了深度创新。2018 年，韩国国家创新指数在全球排名第 4，半导体销售额居世界第 1 位。人均 GDP 突破了 3 万美元。<br>高等教育方面，韩国一直注重教育工作，2015年教育支出的 GDP占比超过了 5.00%，并持续增加， 平均受教育年限超过 12 年，特别是高等教育毛入 学率超过了 93.00%。对比美国、日本等 16 个主要创新国家高等教育毛入学率的平均值，中国在高等教育方面仍有很大的发展空间。<br>教育发展，可以降低犯罪率。居民平均受教育年限每增加 1 年将使犯罪率降低 11%；<br>Machin 等（2010）针对英国的研究也发现，居民平均受教育年限每增加 1 年甚至可以令男性犯罪率降低 30%。</p>
<p>要坚持社会主义先进文化前进方向，用社会主义核心价值观凝聚共识、汇聚力量，用优秀文化产品振奋人心、鼓舞士气，用中华优秀传统文化为人民提供丰润的道德滋养，提高精神文明建设水平。</p>
<h1 id="20210417-校初赛3-经济发展应该以教育发展为前提"><a href="#20210417-校初赛3-经济发展应该以教育发展为前提" class="headerlink" title="20210417 校初赛3 经济发展应该以教育发展为前提"></a>20210417 校初赛3 经济发展应该以教育发展为前提</h1><h2 id="材料-3"><a href="#材料-3" class="headerlink" title="材料"></a>材料</h2><p><img src="https://img-blog.csdnimg.cn/20210524170640632.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="一辩稿-2"><a href="#一辩稿-2" class="headerlink" title="一辩稿"></a>一辩稿</h2><p>经济发展应该以教育发展为前提</p>
<p>谢谢主席，问候在场各位！<br>开宗明义。发展是事物从产生开始，连续不断进步、向好的变更过程。教育发展分为两个维度，一是深度，培养高精尖人才的精英教育。二是广度，全民的素质普及教育。经济发展是指：生产力的提高。前提是指后续行为的基础。基于如上定义，接下来我将以“何者作为前提能对当今中国的发展起到更有效的促进作用”为判准，来论证我方观点：经济发展应该以教育发展为前提。<br>第一，GDP增长逐渐平缓，教育能作为引领经济发展的新奇点。<br>首先，教育能有效促进创新人才的培养和技术的发展。19 世纪 60 年代前，韩国经济远不如朝鲜，企业创新以产品模仿为主，相关技术主要依靠进口。但韩国大力发展教育，在基础产业深度创新。2018年，韩国半导体销售额居世界第 1 位，创新指数在全球排名第 4，人均 GDP 突破了3 万美元。同为亚洲地区的韩国，其科技创新 高效的支撑着高科技产业的发展。<br>目前我国GDP跃居世界第二，但大而不强、臃肿虚胖，主要体现在创新能力不强。通过发展教育促进提高创新力，而创新力 引领和驱动发展 是我国发展的迫切要求。<br>其次，人才培养，能更好地应对芯片等掐脖子问题。当中兴被停止供应芯片时，当即宣布停摆。像芯片这种问题，不是烧钱就能解决的。知识无国界，但科学家有祖国。我们要自己掌握技术命脉，掌握世界最新知识的基础上，创造出世界各个学科最重要的新成果，获得一批重要的知识产权，为中国经济打下自主的基础。</p>
<p>第二，教育能提高人们的道德水平和发现美的能力。<br>首先，经济发展水平提高，犯罪却逐渐低龄化。自2008年经济大幅度跨升以来，青年犯罪率逐步提高。2018年，青少年犯罪占全部犯罪的70%，且近几年呈现上升趋势。而教育发展，可以提高道德水平，降低犯罪率。Machin 研究发现，居民平均受教育年限每增加 1 年将使犯罪率降低 11%。<br>其次，当教育发展匹配不上经济发展的速度，人也感知不到幸福。政府对教育投入占GDP（即99万亿元）比重，达4.04%。在世界有可比数据的190个国家和地区中，居第110位，而人均GDP居65位。我方想说明，经济发展不断发展，但物欲也随之升高。如果没有自己判别幸福的能力，作为乌合之众的一员，不断内卷。哪怕经济发展的再好，大多数人也很难感知到幸福。古代经济发展没有现在好，但不是没有人民安居乐业，社会安定幸福的朝代。各方面平衡发展，社会才能发展的更好，人民才会更幸福。</p>
<p>“一个女孩受教育，可以改变三代人。”教育的作用，不仅仅是提高当代人的创新能力，还有三观的培养，并潜移默化影响着对下一代的培育观念。教育的能量，远远高于经济的即时作用。虽然他的回报周期长，前期投入大，但是作用效果的持续时间也长。综上，我方认为，经济发展应该以教育发展为前提。</p>
<h3 id="补充-1"><a href="#补充-1" class="headerlink" title="补充"></a>补充</h3><p><img src="https://img-blog.csdnimg.cn/20210524171820795.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210524171911356.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210524171943972.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="20210428-校踢馆赛-恶人遭难，我可以幸灾乐祸"><a href="#20210428-校踢馆赛-恶人遭难，我可以幸灾乐祸" class="headerlink" title="20210428 校踢馆赛 恶人遭难，我可以幸灾乐祸"></a>20210428 校踢馆赛 恶人遭难，我可以幸灾乐祸</h1><h2 id="材料-4"><a href="#材料-4" class="headerlink" title="材料"></a>材料</h2><p><img src="https://img-blog.csdnimg.cn/20210524172303345.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="一辩稿3-0-1"><a href="#一辩稿3-0-1" class="headerlink" title="一辩稿3.0"></a>一辩稿3.0</h2><p>恶人遭难，我可以幸灾乐祸</p>
<p>谢谢主席，问候在场各位！</p>
<p>首先提醒各位，什么是幸灾乐祸呢？幸灾乐祸一词出自《左传》，指的是在他人遇到灾祸时候产生快乐的情绪。其次恶人指的是做了恶，引起社会反感的人物。简而言之，今天我们要谈的就是在恶人遭难的时候，我们可不可以产生快乐的情绪。对于我方的观点，我们今天将会通过在事实层面上，恶人遭难的时候，我们必然会产生快乐的情绪，以及在价值层次上将会启发我们来论证。</p>
<p>首先，幸灾乐祸是一种正义感的外化，人对恶的痛恨（和对正义的追求）。人对恶的痛恨是种本能，而这种本能我们没必要去磨灭。我们先来探讨，为什么会产生快乐的情绪呢？澳洲墨尔本大学研究显示，幸灾乐祸来源有三个罪有应得，羡慕和组内竞争。面对恶人时我们的快乐来源，自然而然是罪有应得。在此基础上心理学家辛格，对于因罪有应得而幸灾乐祸这种现象进行了进一步的探讨。它们通过研究人在观察坏人受“电击”时，发现大脑的“同理中枢”和“快乐中枢”的都会产生电生理的冲动。让人意外的是，在预先的分组里不论是道德状况良好的人还是道德状况不好（与道德无关）的人。大家大脑中不仅“同理中枢”会产生较强的电生理冲动，且同时“快乐中枢”也会活跃起来。科学家对于此种现象的解释是在坏人遭电击时，人们的快乐中枢活跃与人本身的道德无关，它来自于人们本质上对于邪恶的厌恶，是人们的一种本能在看到恶消解的时候便会快乐。总结来说，恶人遭难时我们的快乐，不是说我们对于人有什么看法，而是单纯的我们对于恶的抵制，是我们本能的良知，朴素正义感的一种外化，因此我们在恶人遭难的时候可以幸灾乐祸。</p>
<p>其次在社会层面上， 2018年莫纳什大学心理学系做了一个很有趣的研究，探寻幸灾乐祸和见义勇为两件事的联系。结果发现在实验人员里，对于坏人幸灾乐祸的人往往见义勇为的意向更高。究其原因在于什么呢？因为我们心中有正义，恶人遭难时的幸灾乐祸在其中没有恶意的成分，也没有过分的残忍，只是一种正当的道德愉快，与其说我们的愉快以他人的痛苦为基础，不如说基于正义。同样见义勇为也是基于我们心中的正义，才能够在他人遭难时奋不顾身挺身而出，两者看似矛盾却殊途同归。在恶的消解时我们心中有了一颗种子，知道我们与恶不共戴天，随后长成参天大树守护着我们心里的正义源地。最终在他人遇险时支撑我们去践行正义，捍卫正义。而我们在社会的价值体系就是由正义与道德支撑的，对恶遭难的开心，实际上是链接人类正义观的纽带，我们都有了对恶的憎恶，才迫使我们都有了对正义的渴望，最终支撑起社会的价值体系。一个个对于正义的追寻才让我们的社会更加美好。</p>
<p>以上。</p>
<h3 id="质询-1"><a href="#质询-1" class="headerlink" title="质询"></a>质询</h3><p>幸灾乐祸（定义）：<br>在可以讨论的范围内，我方认为它是个中性词。幸灾乐祸是成语典故中对事件的描述，他人遇到灾祸时候产生快乐的情绪。情绪是开心和快乐，并没有说幸灾乐祸就不能同情。在我方刚刚提到的辛格的研究中，而在现实生活里，我们对恶人遭难幸灾乐祸和对他感到同情往往是同时存在的。<br>肯塔基大学的心理学家理查德·史密斯的新书《幸灾乐祸》（the joy of pain）主张：不要把幸灾乐祸妖魔化。我们要客观对待幸灾乐祸这种情绪。<br>您方今天在这里说它是一个贬义词，定义上就说它不包含同情，然后再拿您的定义来向我论证幸灾乐祸不包括同情这个观点，不就是循环论证吗。还是您方觉得，只有把它定性为一个贬义词的时候，您方论点才能完全成立，所以您方不敢认。<br>只是情绪，没有行为外化。如果对方能论证，幸灾乐祸一定会导致行为外化。那我们还能再讨论一下。<br>嘲讽是因为缺乏同情，不是因为幸灾乐祸。如果道德感高，最终同情会高于快乐。所以对方的这种结果太片面了。</p>
<p>一论点。幸灾乐祸：<br>只会加深正义观的维护，不会作出违背正义感的事情。<br>幸灾乐祸是人对恶 痛恨的一种表现形式。人对恶的痛恨是种本能，而这种本能我们没必要去克制。克制会导致正义感的磨灭。</p>
<p>我没有外加道德审判，我就是单纯的开心。恶人遭难，我开心。维护了我的正义观，对恶的痛恨。</p>
<p>不可以幸灾乐祸，有两条路可以走通：①我们不可以有快乐的情绪；②同情永远大于快乐。</p>
<p>幸灾乐祸和愤怒等情绪一样，我们可以幸灾乐祸，通过自我调控而无需无限制地积压。康德也说过：幸灾乐祸使得人类心中的恨变得可见了, 而那些不承认幸灾乐祸的文化，实际上是不愿或不敢看见自己心中的恨。强行压制，不是克制而是逃避，并且不敢外化自己的正义感，会造成正义感的磨灭。我方认为，压制的弊端大于利处。</p>
<p>若如对方观点，如果不可以幸灾乐祸，难道我们要对恶人抱有更大的悲悯和同情吗？我们承认恶人遭难这个事情让我们愉悦，因为我们的价值体系就是由这一力量支撑的。在其中没有恶意的成分，也没有过分的残忍，只是一种正当的道德愉快。</p>
<p>无论在何种条件下，“批评”的值都略小于“责任”，这大约体现了人类的仁慈</p>
<h3 id="补充-2"><a href="#补充-2" class="headerlink" title="补充"></a>补充</h3><p><img src="https://img-blog.csdnimg.cn/20210524173747283.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="202105112-校半决赛-在当下“女士优先”有-无助于性别平权"><a href="#202105112-校半决赛-在当下“女士优先”有-无助于性别平权" class="headerlink" title="202105112 校半决赛 在当下“女士优先”有/无助于性别平权"></a>202105112 校半决赛 在当下“女士优先”有/无助于性别平权</h1><h2 id="材料-5"><a href="#材料-5" class="headerlink" title="材料"></a>材料</h2><p><img src="https://img-blog.csdnimg.cn/20210524173903974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="一辩稿3-0-2"><a href="#一辩稿3-0-2" class="headerlink" title="一辩稿3.0"></a>一辩稿3.0</h2><p>在当下“女士优先”有/无助于性别平权</p>
<p>谢谢主席。我方的观点是，在当下“女士优先”无助于性别平权。<br>第一，“女士优先”是善意的“歧视”，随着推演变成展示男性绅士风度的工具。2019年谢菲尔德大学的研究显示，69%的人认为在当下“女士优先”是出于对女性的帮助。在“女士优先”的语境下，给女士贴上柔弱、需要时刻帮助的标签，认为女性弱而保护女性，这是善意的“歧视”。“女士优先”源于中世纪欧洲骑士阶级的价值观——骑士精神，将男性视为了天生的保护者，女性则是被照顾者。《堂吉诃德》中的骑士所信奉的公主是一个根本不存在的人，他为“公主”奔走于世，荒唐做事。反应的是骑士价值观中的唯心和唯我思想——骑士所臣服、向往的是自我自许的正义和幸福。“公主”的存在，只是衬托骑士精神的道具。社交场合为女性拉座椅，是为显示绅士风度，而与女性本身无关。1954年以前美国是当时男女平权做的最好的国家，连小混混都会帮女人开车门、拉椅子、按电梯，但1950年还没有一个女生得到法学院的录取资格。作为中世纪浪漫主义文学精神产物的“女士优先”，这样的“风度翩翩”的价值观使女性地位看起来更高，但并没有得到质的提高，无助于性别平权。<br>第二，在“女性优先”的氛围下，女性会不自主的认可女性很弱的刻板印象，从而变得更弱。女性专用停车场的事情在社会引起很大的反对，但具2016年山东大学研究表明，47%的女性认为女性停车场是好事，因为自己真的停不好车，而女性停车场能帮助到自己停车。我们扪心自问一下，女士真的停不好车吗？女士真的比男士弱嘛？答案当然是否定的，但这些带有善意的歧视却让女士对自己产生了怀疑。比利时心理学家杜蒙就在多个研究中证实，越采取保护照拂女性的态度和行为，女性就越会产生自我怀疑，降低自尊，从而强化女性弱者与附庸的地位，从女性自己的认知上就削弱了女性的社会竞争力。“女士优先”隐藏传播的是，将“女士”这个概念视为柔弱、一贯加以保护从而隔离女性，将其物化、捧杀的思想。信服于此的女性也只会把自己定义为花瓶一样的角色——认可了一个物化自己的环境，认同女性弱势这一观念，给自己上了枷锁，没有将自己放在与男性同等的位置上。自我束缚，对倡导男女平等不利。所以，想要不因为性别而被区别对待，先得放弃那些因为性别而获得的好处，男性和女性除了性征之外，没有任何区别。<br>“女士优先”造成了这些与初衷违背的不可控的差异，都不同程度上影响着人们被接受、被认可的机会、甚至是可能性。这些“difference that doesn’t make a difference”所导致的不平等，是我们所不希望看到的。男女平权，从来不是追求特权。我们希望：不会再因为你是女性，而轻视你或给你特别的保护，不会再因为你是男性，而器重你或把你的一切努力当作理所当然。综上，我方认为，在当下“女士优先”无助于性别平权。</p>
<h3 id="质询：（往刻板印象上靠）"><a href="#质询：（往刻板印象上靠）" class="headerlink" title="质询：（往刻板印象上靠）"></a>质询：（往刻板印象上靠）</h3><p>1.什么是刻板印象？<br>刻板印象是： “女人就不适合读计算机” 这种缺乏基本的逻辑支持，但是却是这个人的固有印象。<br>2.付出不被看见。<br>不被看见正是因为刻板印象。在义务与权利一致的情况下，刻板印象会被打破，而女士优先不会。<br>3.为什么女性可以放产假？<br>请对方认清男女有别和男女平等。承认女性和男性生理上的差异，就会认识到她们作为女性本身需要这种权利。性别平等的目的应该是共生互补，不是零和对立。而不是男女平权之后，女性应该和担任相同的工作、享受相同的假期，这本身才是对人权、对女性权利的歧视。我们只争取权利上的平等，而不是一切的平等，追求的是存在差异的各个不同的人之间平等的权利。<br>4.为什么还要区分各种人群追求的权利？<br>因为各个人群受到歧视的地方是不同的，所以要进行区分。但总体都是对人权的争取。举例来说，对于女性，她们的生育权、堕胎权、家庭暴力问题、享受产假的权利、性暴力问题等上面更为关注，而这些问题是其他群体不会或者不容易遇到的，所以需要分开来具体看，具体争取。<br>5.有需要怎么办？<br>是有可以自己修电器的女生的，是有可以一个人做好所有的事的女生的。你不行只是你不行，不是女性不行。反映到职场上就是，完成不了应该完成的工作，这是因为在这个领域的能力不行，跟性别无关。当然，并不是盲目推崇靠自己完成所有的事这种行为，懂得寻求适当的帮助也是一种能力，但是需要帮助是因为个人能力的原因，而不是因为是女性。</p>
<h3 id="补充-3"><a href="#补充-3" class="headerlink" title="补充"></a>补充</h3><p>中世纪的骑士精神，被认为是绅士风度的体现，然而在最讲绅士风度的英国，几个世纪对女士优先却没有带来妇女的投票权，直到1918年女性靠流血抗争换来基本的政治权利。可见女士优先从来不是在所有的方面对女性进行优待，也不是按照女性的意愿对其进行优待，这是一种我不要你觉得我要我觉得的优待。<br>另一方面，德国心理学家贝克尔等专家的诸多实证研究中指出，在这种自我怀疑和无能感之下，这种“善意的性别歧视”又进一步用其看似积极的糖衣，掩盖了其隐蔽的性别歧视的本质，增加了女性对性别现状的满意度，从而削弱了女性对性别不平等的感知；<br>更进一步而言，奥克兰大学心理学教授克里斯研究也证实女性认可善意的性别歧视之后，随着时间的推移，这些女性会更愿意认可恶意的性别歧视，从宏观上来看也的确如此。<br>普林斯顿大学心理学教授菲斯克等学者的研究指出，从不同国家之间进行比较，在“善意的性别歧视”更为普遍的国家，恶意的性别歧视也更为突出，女性的社会生活地位也更为低下，这种相关性甚至高达0.9，几乎是完美相关。因此善意的性别其实掩盖了父权制的压迫性，是对父权之下将女性边缘化与工具化价值观的延续和肯定，是助纣为虐的帮凶。</p>
<p>公交车上播放“请给有需要的乘客让座”，什么样的人需要帮助？</p>
<h1 id="20210528-校决赛"><a href="#20210528-校决赛" class="headerlink" title="20210528 校决赛"></a>20210528 校决赛</h1><h2 id="材料-6"><a href="#材料-6" class="headerlink" title="材料"></a>材料</h2><p><img src="https://img-blog.csdnimg.cn/20210712220212395.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20210712220236270.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="参考"></p>
<h2 id="一辩稿3-0-3"><a href="#一辩稿3-0-3" class="headerlink" title="一辩稿3.0"></a>一辩稿3.0</h2><p>过程更能体现年轻人奋斗的价值<br>质量互变规律揭示了事物从量变开始，质变是量变的结果。量变是过程，质变是结果。我将从三个方面论证，过程更能体现年轻人奋斗的价值。<br>第一，过程与奋斗价值的相关性更高，对奋斗的体现更加直接且丰富，更能体现奋斗的价值。选择题蒙对和做对结果一样，但两者的价值不一样。偶然因素等干扰项作用于结果，会对奋斗的结果造成巨大的影响。在结果一定的情况下，没办法体现人与人之间奋斗价值的区别：谁在这个过程中付出的更多。只有去考量过程，我们才能看到一个人真正努力拼搏的成分占比多少。《老人与海》中老渔人桑提亚哥天天出海，一连40天没有将一条鱼带上岸。诸葛亮鞠躬尽瘁死而后已，蜀王朝还是被魏国灭亡了。他们的奋斗难道没有价值吗？老人作为“打不败的失败者”，与海奋斗时英勇且毫不气馁。诸葛亮为“兴复汉室”呕心沥血，报先帝而忠陛下。奋斗带给个人的磨炼，带给社会的精神，就是奋斗价值的体现。过程比结果更值得铭记。<br>第二，过程导向是一种进取的奋斗观，更容易激励年轻人脚踏实地，肯定自己奋斗的价值。据2020年壹心理报道：过于追求结果导向，把目光聚焦到结果上，结果与现状的差距会不断带来焦虑等情绪。成王败寇的价值导向，正是过大的压力的来源。费雷德里克森的“积极情绪扩建理论”指出，恐惧、抑郁等负面情绪大多指向逃避退缩等行为。更看重结果导致压力过大，负面情绪降低效率，反而不利于学习与工作。2017年怀化学院对怀化学院、湖南大学等五所高校的研究表明：在乎结果的被测者，其情绪、情感易受成败左右，与抑郁量有非常显著的正相关。在大部分大学生有较大压力的情况下，鼓励大学生适当淡化在乎结果，培养平常心，同时保持和发扬拼搏精神。2014年陕西师范大学的研究表明，在父母和自身对自己都有较高的期待的情况下，面对严峻的就业趋势，一时难以接受便会产生落差。青年成才的天才毕竟是少数，而成王败寇的价值导向，在奋斗路上亦步亦趋不断施压，大部分年轻人在压力的不断增加下越陷越深，普遍抑郁。青年不如意十之八九，沉淀时失败时不否定自己奋斗的价值，面对挫折不放弃继续奋斗，脚踏实地的走好每一步的心态是我们所倡导的。<br>第三，以过程为奋斗导向，可以为自己为世界拓宽边界。2016年中国职教学会研究表明，学生报考计算机77.74%是因为有好的就业企业和工资高等原因，只有 22.26%是因为本人感兴趣报考。现在年轻人大都更看重结果，哪里赚钱就往哪奔，不论自己喜欢与否。在这种因为结果有价值而追逐结果的观念下，年轻人变得世俗化，到处找那个更容易达到结果的道路。我方倡导年轻人都做自己擅长喜欢的事情，每个人都扮演好自己的螺丝钉，不一股脑往热门行业跑，最后被卷在这个世界里。这个时代的年轻人不是追逐者，而是引领者，对于社会和国家的意义绝不是目前带来多么大的收益，而是为这个国家社会为这个世界增加多元。开普勒致力于投入到研究行星运行的规律之中，纵使究其一生仍没有真正破解其奥秘。但在他的手稿之上，伟大的牛顿站在巨人的肩膀上提出了万有引力定律。而这正是那个科学复兴的时代的缩影，无数的科学家不求结果以自己的过程为后人铺路，造就了那个辉煌的科学史诗，他们奋斗的价值在史上熠熠生辉。一个全新的邻域往往代表着未知和失败，注重结果的人往往不敢驻足其中。一个十年始终如一的研究，却还没有得到成果的科学家，他为我们探索了很多的未知。奋斗意味着前途未卜，踏上征程不一定会有结果。但过程为导向——只要开始踏上征程，价值就会被体现。在还没产生结果之前，一切皆有可能，我会为更多的可能性去努力。我们将不只看到成功的人，如果这个人他没成功，他的价值也绝不会减损。</p>
<h1 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h1><h2 id="0516一路走到决赛"><a href="#0516一路走到决赛" class="headerlink" title="0516一路走到决赛"></a>0516一路走到决赛</h2><p>1.一路走到决赛，有什么感想吗？<br>2.你觉得计信辩论队是一个怎样的集体？<br>3.对于自己的队友有没有想说的话？<br>4.你希望家人来看你比赛吗？</p>
<p>1.挺意外的，没想到会走这么远。但我们确实值得，因为每次都准备的很充分。这次辩论是成长的一次邀请，在路上明显感知到自身变化，很荣幸选择参与其中。<br>2.计信辩论队的人都很有主见有个人特色，同时很温柔能包容一切。看似完全不同甚至相反的元素，却能同时出现在这，是一件奇妙的事情。但互补相互关联使我们团结的更紧密，一切都恰如其分。在这里能看到多元的世界，和他们一起准备辩论的过程是有趣且快乐的。让心欢喜，<br>3.Nice to meet you!<br>4.期待但又没那么想。在家更多讲感情，所以很少理性地谈论非此即彼的观点。期待借助辩论赛，给家人看到我逻辑严密地论述自己认同的观点的那一面。而且可以很自豪地和他们说，在辩论中收获的种种。但想让他们看我的下一场辩论，而不是这一场。因为自己进步速度很快，感觉下次的辩论会更有魅力哈哈哈哈。</p>
<h2 id="0527感想"><a href="#0527感想" class="headerlink" title="0527感想"></a>0527感想</h2><p>计信yyds</p>
<p>这次辩论是成长的一次邀请，在路上明显感知到自身变化，很荣幸选择参与其中</p>
<p>学到了好多www每次一篇稿子改三大版，参考二十多篇文献。阅读倒是没事，理解消化转述表达实在绝了。方学长教会了查文献，梅队周队教抗压，邬莉学姐太帅了啊啊啊，玙是人间宝藏，还有晓露学姐和张学长，林均和敏儿<br><img src="https://img-blog.csdnimg.cn/20210712221730215.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>打完之后收到了妈咪送的玫瑰，好甜na<br>我妈说我没自信……确实花了一个星期才缓过来QAQ<br>我以为了解点中国历史就比较nice了，结果打踢馆赛那一场备赛的时候，世界历史都能信手拈来。（后来狂看书hhh<br>平时感觉自己挺能说的，结果模拟辩论的时候，不能很好的表达出自己的观点，而且思路很容易被带着跑<br>最后一点是，我的辩论没有长远的目的性，偏向于争一些阶段性的成果，但实质没有注入灵魂。辩论本质可能更偏于于博弈吧，而不是压倒说法。</p>
<p>学到了很多，也很开心的一段旅程~</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E9%85%8D%E7%BD%AEspark%EF%BC%8C%E5%B9%B6%E5%9C%A8idea%E4%B8%AD%E6%90%AD%E5%BB%BA%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>@<a href="配置spark，并在idea中搭建项目">TOC</a></p>
<p>网上的普遍太久远，不太适配，记录自己的完美搭建</p>
<h1 id="一、配置spark"><a href="#一、配置spark" class="headerlink" title="一、配置spark"></a>一、配置spark</h1><h2 id="1-配置maven（注意选择版本为3-6-3）"><a href="#1-配置maven（注意选择版本为3-6-3）" class="headerlink" title="1.配置maven（注意选择版本为3.6.3）"></a>1.配置maven（注意选择版本为3.6.3）</h2><p>参考：<a href="https://blog.csdn.net/huo920/article/details/82082403">https://blog.csdn.net/huo920/article/details/82082403</a><br>但这一步是多余的</p>
<h2 id="2-下载scala（注意版本对应为2-12）"><a href="#2-下载scala（注意版本对应为2-12）" class="headerlink" title="2.下载scala（注意版本对应为2.12）"></a>2.下载scala（注意版本对应为2.12）</h2><p>查看scala版本：scala -version<br>查看对应关系：<a href="https://mvnrepository.com/artifact/org.apache.spark/spark-core">https://mvnrepository.com/artifact/org.apache.spark/spark-core</a><br><img src="https://img-blog.csdnimg.cn/e907e3ba8d7849eea07e03d06d9a250b.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>安装scala参考：<a href="https://cloud.tencent.com/developer/article/1733776">https://cloud.tencent.com/developer/article/1733776</a><br>官网：<a href="https://www.scala-lang.org/download/">https://www.scala-lang.org/download/</a><br>然后选择特定的版本<br><img src="https://img-blog.csdnimg.cn/736328894ed445bbb614a6f140d778a5.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>3.下载spark（注意版本选择3.1.3）<br>不要太新了，否则spark-shell会报错，需要降低版本<br><a href="https://zhuanlan.zhihu.com/p/149469688">https://zhuanlan.zhihu.com/p/149469688</a><br>检验：cmd中spark-shell<br><img src="https://img-blog.csdnimg.cn/73f89004779e424d9a5fcf479a3590ee.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h1 id="二、搭建idea项目"><a href="#二、搭建idea项目" class="headerlink" title="二、搭建idea项目"></a>二、搭建idea项目</h1><h2 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1.创建项目"></a>1.创建项目</h2><p>由于版本较新，maven版本配置全靠自己琢磨，可惜自己没琢磨透<br>感谢好友@玥的热心帮助，通过直接创建项目解决问题<br>参考：<a href="https://blog.csdn.net/github_38924695/article/details/118510289?utm_source=app&amp;app_version=5.3.1&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen">https://blog.csdn.net/github_38924695/article/details/118510289?utm_source=app&amp;app_version=5.3.1&amp;code=app_1562916241&amp;uLinkId=usr1mkqgl919blen</a><br>注意：点击IDEA右上角放大镜左边的按钮（Project Structure），或者快捷键ctrl + shift + alt + S，点击Modules：<br>（要包括scala-sdk和spark的jars包：D:\Programs\pyspark\spark-3.1.3-bin-hadoop3.2\jars）<br><img src="https://img-blog.csdnimg.cn/e6ae2feb72074bbd9ce297bd4f101e35.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<h2 id="2-导包解决爆红"><a href="#2-导包解决爆红" class="headerlink" title="2.导包解决爆红"></a>2.导包解决爆红</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import org.apache.spark.&#123;SparkConf, SparkContext&#125;</span><br><span class="line">import org.apache.spark.sql.&#123;Dataset, SparkSession&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/126d15383d16440b968fedce4c037f7e.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/98daabcf7f184b629f7478377ab5b441.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>3.成果展示<br><img src="https://img-blog.csdnimg.cn/397ef78d6d7445c8b9d068f82c3909b8.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"><br>4.附上测试代码<br>注意！！package和object test1 为自己的哈</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">package main.scala</span><br><span class="line"></span><br><span class="line">object test1 &#123;</span><br><span class="line">  def main(args: Array[String]): Unit = &#123;</span><br><span class="line">    println(<span class="string">&quot;Hello Scala&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/88965290a2f64eda960e70816d57e579.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA5pivWXXmrLg=,size_20,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p>
<p>三、心得<br>完结撒花，仙女落泪QAQ</p>
<p>有问题可以发评论区，我看到会回复<br>折腾三天，理论把坑踩遍了hhh</p>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E9%AB%98%E5%BE%B7%E7%88%AC%E8%99%AB1.0/</url>
    <content><![CDATA[<p>@<a href="高德爬虫实战">TOC</a></p>
<h1 id="一、效果"><a href="#一、效果" class="headerlink" title="一、效果"></a>一、效果</h1><p>excel文件<img src="https://img-blog.csdnimg.cn/2021042316580616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p><img src="https://img-blog.csdnimg.cn/202104231659124.png" alt="在这里插入图片描述"></p>
<h2 id="1-py"><a href="#1-py" class="headerlink" title="1.py"></a>1.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"><span class="keyword">from</span> transCoordinateSystem <span class="keyword">import</span> gcj02_to_wgs84</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单页获取pois</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpoi_page</span>(<span class="params">cityname, keywords, page</span>):</span></span><br><span class="line">    req_url = poi_search_url + <span class="string">&quot;?key=&quot;</span> + amap_web_key + <span class="string">&#x27;&amp;extensions=all&amp;keywords=&#x27;</span> + quote(</span><br><span class="line">        keywords) + <span class="string">&#x27;&amp;city=&#x27;</span> + quote(cityname) + <span class="string">&#x27;&amp;citylimit=true&#x27;</span> + <span class="string">&#x27;&amp;offset=25&#x27;</span> + <span class="string">&#x27;&amp;page=&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">        page) + <span class="string">&#x27;&amp;output=json&#x27;</span></span><br><span class="line">    data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> request.urlopen(req_url) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        data = data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 将返回的poi数据装入集合返回</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hand</span>(<span class="params">poilist, result</span>):</span></span><br><span class="line">    <span class="comment"># result = json.loads(result)  # 将字符串转换为json</span></span><br><span class="line">    pois = result[<span class="string">&#x27;pois&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pois)):</span><br><span class="line">        poilist.append(pois[i])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据城市名称和分类关键字获取poi数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpois</span>(<span class="params">cityname, keywords</span>):</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    poilist = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment"># 使用while循环不断分页获取数据</span></span><br><span class="line">        result = getpoi_page(cityname, keywords, i)</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">        result = json.loads(result)  <span class="comment"># 将字符串转换为json</span></span><br><span class="line">        <span class="comment"># errors修改：如果没有找到数据，则跳出</span></span><br><span class="line">        <span class="keyword">if</span> result[<span class="string">&#x27;count&#x27;</span>] == <span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="comment"># 将结果装入集合返回</span></span><br><span class="line">        hand(poilist, result)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        <span class="comment"># print(&quot;______________________________&quot;)</span></span><br><span class="line">        <span class="comment"># print(poilist)</span></span><br><span class="line">    <span class="keyword">return</span> poilist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据写入excel</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_excel</span>(<span class="params"> poilist, classfield, sheet</span>):</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 第一行(列标题)</span></span><br><span class="line">    <span class="comment"># 品牌名称	门店名称	分类	省	市	区/县  地址	经度	维度</span></span><br><span class="line">    sheet.write(<span class="number">0</span>, <span class="number">0</span>, <span class="string">&#x27;品牌名称&#x27;</span>)</span><br><span class="line">    sheet.write(<span class="number">0</span>, <span class="number">1</span>, <span class="string">&#x27;门店名称&#x27;</span>)</span><br><span class="line">    sheet.write(<span class="number">0</span>, <span class="number">2</span>, <span class="string">&#x27;分类&#x27;</span>)</span><br><span class="line">    sheet.write(<span class="number">0</span>, <span class="number">3</span>, <span class="string">&#x27;省&#x27;</span>)</span><br><span class="line">    sheet.write(<span class="number">0</span>, <span class="number">4</span>, <span class="string">&#x27;市&#x27;</span>)</span><br><span class="line">    sheet.write(<span class="number">0</span>, <span class="number">5</span>, <span class="string">&#x27;区/县&#x27;</span>)</span><br><span class="line">    sheet.write(<span class="number">0</span>, <span class="number">6</span>, <span class="string">&#x27;地址&#x27;</span>)</span><br><span class="line">    sheet.write(<span class="number">0</span>, <span class="number">7</span>, <span class="string">&#x27;经度&#x27;</span>)</span><br><span class="line">    sheet.write(<span class="number">0</span>, <span class="number">8</span>, <span class="string">&#x27;维度&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(poilist)):</span><br><span class="line">        name = poilist[i][<span class="string">&#x27;name&#x27;</span>]</span><br><span class="line">        <span class="built_in">type</span> = poilist[i][<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">        pname = poilist[i][<span class="string">&#x27;pname&#x27;</span>]  <span class="comment">#省名称</span></span><br><span class="line">        cityname = poilist[i][<span class="string">&#x27;cityname&#x27;</span>]  <span class="comment"># 市名称</span></span><br><span class="line">        adname = poilist[i][<span class="string">&#x27;adname&#x27;</span>]  <span class="comment">#区/县</span></span><br><span class="line">        <span class="comment"># errors修改：KeyErrors</span></span><br><span class="line">        <span class="comment"># 使用dict内置的get(key[,default])方法。如果key存在，则返回其value，否则返回default。</span></span><br><span class="line">        address = poilist[i].get(<span class="string">&#x27;address&#x27;</span>,<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">        location = poilist[i][<span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">        lng = <span class="built_in">str</span>(location).split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        lat = <span class="built_in">str</span>(location).split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment"># adcode = poilist[i][&#x27;adcode&#x27;] #邮编</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">#坐标转换</span></span><br><span class="line">        result = gcj02_to_wgs84(<span class="built_in">float</span>(lng), <span class="built_in">float</span>(lat))</span><br><span class="line">        lng = result[<span class="number">0</span>]</span><br><span class="line">        lat = result[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 每一行写入</span></span><br><span class="line">        sheet.write(i + <span class="number">1</span>, <span class="number">0</span>, classfield)</span><br><span class="line">        sheet.write(i + <span class="number">1</span>, <span class="number">1</span>, name)</span><br><span class="line">        sheet.write(i + <span class="number">1</span>, <span class="number">2</span>, <span class="built_in">type</span>)</span><br><span class="line">        sheet.write(i + <span class="number">1</span>, <span class="number">3</span>, pname)</span><br><span class="line">        sheet.write(i + <span class="number">1</span>, <span class="number">4</span>, cityname)</span><br><span class="line">        sheet.write(i + <span class="number">1</span>, <span class="number">5</span>, adname)</span><br><span class="line">        sheet.write(i + <span class="number">1</span>, <span class="number">6</span>, address)</span><br><span class="line">        sheet.write(i + <span class="number">1</span>, <span class="number">7</span>, lng)</span><br><span class="line">        sheet.write(i + <span class="number">1</span>, <span class="number">8</span>, lat)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最后，将以上操作保存到指定的Excel文件中</span></span><br><span class="line">    <span class="comment"># TODO 需要设置写入的excel路径</span></span><br><span class="line">    book.save(<span class="string">r&#x27;D:/Desktop/data4.xls&#x27;</span>)</span><br><span class="line">    <span class="comment"># book.save(r&#x27;D:/Desktop/&#x27; + cityname + &quot;_&quot; + classfield + &#x27;.xls&#x27;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#按各行政区分别获取</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for clas in classes:</span></span><br><span class="line"><span class="string">    classes_all_pois = []</span></span><br><span class="line"><span class="string">    for area in nanning_areas:</span></span><br><span class="line"><span class="string">        pois_area = getpois(area, clas)</span></span><br><span class="line"><span class="string">        print(&#x27;当前城区：&#x27; + str(area) + &#x27;, 分类：&#x27; + str(clas) + &quot;, 总的有&quot; + str(len(pois_area)) + &quot;条数据&quot;)</span></span><br><span class="line"><span class="string">        classes_all_pois.extend(pois_area)</span></span><br><span class="line"><span class="string">    print(&quot;所有城区的数据汇总，总数为：&quot; + str(len(classes_all_pois)))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    write_to_excel(classes_all_pois, cityname, clas)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    print(&#x27;================分类：&#x27;  + str(clas) + &quot;写入成功&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 申请的密钥</span></span><br><span class="line"><span class="comment"># TODO 需要修改成为自己的密钥</span></span><br><span class="line">amap_web_key = <span class="string">&#x27;e4f4a2208ee6f1f6298f5cb2342d66fb&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要爬取的API根</span></span><br><span class="line">poi_search_url = <span class="string">&quot;http://restapi.amap.com/v3/place/text&quot;</span></span><br><span class="line">poi_boundary_url = <span class="string">&quot;https://ditu.amap.com/detail/get/detail&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># cityname为需要爬取的POI所属的城市名，city_areas为城市下面的行政区，classes为多个POI分类名的集合.</span></span><br><span class="line"><span class="comment"># (中文名或者代码都可以，代码详见高德地图的POI分类编码表)</span></span><br><span class="line">cityname = <span class="string">&#x27;武汉&#x27;</span></span><br><span class="line"><span class="comment"># classes = [ &#x27;1點點&#x27;, &#x27;24客便利店&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取品牌名称</span></span><br><span class="line"><span class="comment"># TODO 需要修改成自己的【需要处理的品牌】的文件的路径</span></span><br><span class="line">sheets = load_workbook(<span class="string">&quot;D:/Desktop/3.xlsx&quot;</span>).worksheets</span><br><span class="line">classes=[]</span><br><span class="line"><span class="keyword">for</span> col <span class="keyword">in</span> sheets[<span class="number">0</span>][<span class="string">&#x27;A&#x27;</span>]:</span><br><span class="line">    classes.append(col.value)</span><br><span class="line">classes.remove(<span class="string">&#x27;品牌名称&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(classes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个Workbook对象，这就相当于创建了一个Excel文件</span></span><br><span class="line">book = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>, style_compression=<span class="number">0</span>)</span><br><span class="line"><span class="comment"># 在打开的excel中添加一个sheet</span></span><br><span class="line"><span class="comment"># 其中的test是这张表的名字,cell_overwrite_ok,表示是否可以覆盖单元格)</span></span><br><span class="line">sheet = book.add_sheet(<span class="string">&#x27;test&#x27;</span>, cell_overwrite_ok=<span class="literal">True</span>)</span><br><span class="line"><span class="comment"># sheet = book.add_sheet(classfield, cell_overwrite_ok=True)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#直接获取整个城市的POI数据</span></span><br><span class="line"><span class="keyword">for</span> clas <span class="keyword">in</span> classes:</span><br><span class="line">    classes_all_pois = []</span><br><span class="line">    pois_area = getpois(cityname, clas)</span><br><span class="line">    classes_all_pois.extend(pois_area)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;数据总数为：&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(classes_all_pois)))</span><br><span class="line">    write_to_excel(classes_all_pois, clas, sheet)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;================分类：&#x27;</span>  + <span class="built_in">str</span>(clas) + <span class="string">&quot;写入成功&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="transCoordinateSystem-py"><a href="#transCoordinateSystem-py" class="headerlink" title="transCoordinateSystem.py"></a>transCoordinateSystem.py</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#经纬度坐标（WGS84）国测局火星坐标（GCJ02）百度坐标（BD09）相互转换</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">目前的的坐标体系分类：</span></span><br><span class="line"><span class="string">一是GPS坐标，也即WGS-84坐标是一个国际的标准，一般卫星导航，原始的GPS设备中的数据都是采用这一坐标系。国外的Google地图、OSM等采用的都是这一坐标。</span></span><br><span class="line"><span class="string">二是国测局坐标，国测局坐标GCJ-02坐标也叫火星坐标，是国家测绘局为了国家安全在原始坐标的基础上进行偏移得到的坐标，基本国内的电子地图、导航设备都是采用的这一坐标系，如：高德、搜搜、51地图MapABC地图，谷歌中国地图也是。</span></span><br><span class="line"><span class="string">三是百度坐标，百度坐标BD-09坐标是百度公司出于商业保护在国测局坐标基础上进行的二次加密。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x_pi = <span class="number">3.14159265358979324</span> * <span class="number">3000.0</span> / <span class="number">180.0</span></span><br><span class="line">pi = <span class="number">3.1415926535897932384626</span>  <span class="comment"># π</span></span><br><span class="line">a = <span class="number">6378245.0</span>  <span class="comment"># 长半轴</span></span><br><span class="line">ee = <span class="number">0.00669342162296594323</span>  <span class="comment"># 偏心率平方</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Geocoding</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, api_key</span>):</span></span><br><span class="line">        self.api_key = api_key</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">geocode</span>(<span class="params">self, address</span>):</span></span><br><span class="line">        <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">        利用高德geocoding服务解析地址获取位置坐标</span></span><br><span class="line"><span class="string">        :param address:需要解析的地址</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        geocoding = &#123;<span class="string">&#x27;s&#x27;</span>: <span class="string">&#x27;rsv3&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;key&#x27;</span>: self.api_key,</span><br><span class="line">                     <span class="string">&#x27;city&#x27;</span>: <span class="string">&#x27;全国&#x27;</span>,</span><br><span class="line">                     <span class="string">&#x27;address&#x27;</span>: address&#125;</span><br><span class="line">        <span class="comment"># geocoding = urllib.urlencode(geocoding)</span></span><br><span class="line">        <span class="comment"># ret = urllib.urlopen(&quot;http://restapi.amap.com/v3/geocode/geo&#123;&#125;&quot;.format(geocoding))</span></span><br><span class="line">        url = <span class="string">&quot;http://restapi.amap.com/v3/geocode/geo?&quot;</span></span><br><span class="line">        ret = requests.get(url, params=geocoding)</span><br><span class="line">        <span class="keyword">if</span> ret.status_code == <span class="number">200</span>:</span><br><span class="line">            <span class="comment"># res = ret.json()</span></span><br><span class="line">            <span class="comment"># json_obj = json.loads(res)</span></span><br><span class="line">            json_obj = ret.json()</span><br><span class="line">            <span class="keyword">if</span> json_obj[<span class="string">&#x27;status&#x27;</span>] == <span class="string">&#x27;1&#x27;</span> <span class="keyword">and</span> <span class="built_in">int</span>(json_obj[<span class="string">&#x27;count&#x27;</span>]) &gt;= <span class="number">1</span>:</span><br><span class="line">                geocodes = json_obj[<span class="string">&#x27;geocodes&#x27;</span>][<span class="number">0</span>]</span><br><span class="line">                lng = <span class="built_in">float</span>(geocodes.get(<span class="string">&#x27;location&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">0</span>])</span><br><span class="line">                lat = <span class="built_in">float</span>(geocodes.get(<span class="string">&#x27;location&#x27;</span>).split(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">                <span class="keyword">return</span> [lng, lat]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcj02_to_bd09</span>(<span class="params">lng, lat</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    火星坐标系(GCJ-02)转百度坐标系(BD-09)</span></span><br><span class="line"><span class="string">    谷歌、高德——&gt;百度</span></span><br><span class="line"><span class="string">    :param lng:火星坐标经度</span></span><br><span class="line"><span class="string">    :param lat:火星坐标纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    z = math.sqrt(lng * lng + lat * lat) + <span class="number">0.00002</span> * math.sin(lat * x_pi)</span><br><span class="line">    theta = math.atan2(lat, lng) + <span class="number">0.000003</span> * math.cos(lng * x_pi)</span><br><span class="line">    bd_lng = z * math.cos(theta) + <span class="number">0.0065</span></span><br><span class="line">    bd_lat = z * math.sin(theta) + <span class="number">0.006</span></span><br><span class="line">    <span class="keyword">return</span> [bd_lng, bd_lat]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bd09_to_gcj02</span>(<span class="params">bd_lon, bd_lat</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    百度坐标系(BD-09)转火星坐标系(GCJ-02)</span></span><br><span class="line"><span class="string">    百度——&gt;谷歌、高德</span></span><br><span class="line"><span class="string">    :param bd_lat:百度坐标纬度</span></span><br><span class="line"><span class="string">    :param bd_lon:百度坐标经度</span></span><br><span class="line"><span class="string">    :return:转换后的坐标列表形式</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    x = bd_lon - <span class="number">0.0065</span></span><br><span class="line">    y = bd_lat - <span class="number">0.006</span></span><br><span class="line">    z = math.sqrt(x * x + y * y) - <span class="number">0.00002</span> * math.sin(y * x_pi)</span><br><span class="line">    theta = math.atan2(y, x) - <span class="number">0.000003</span> * math.cos(x * x_pi)</span><br><span class="line">    gg_lng = z * math.cos(theta)</span><br><span class="line">    gg_lat = z * math.sin(theta)</span><br><span class="line">    <span class="keyword">return</span> [gg_lng, gg_lat]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_gcj02</span>(<span class="params">lng, lat</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    WGS84转GCJ02(火星坐标系)</span></span><br><span class="line"><span class="string">    :param lng:WGS84坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:WGS84坐标系的纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):  <span class="comment"># 判断是否在国内</span></span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [mglng, mglat]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcj02_to_wgs84</span>(<span class="params">lng, lat</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    GCJ02(火星坐标系)转GPS84</span></span><br><span class="line"><span class="string">    :param lng:火星坐标系的经度</span></span><br><span class="line"><span class="string">    :param lat:火星坐标系纬度</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> out_of_china(lng, lat):</span><br><span class="line">        <span class="keyword">return</span> [lng, lat]</span><br><span class="line">    dlat = _transformlat(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    dlng = _transformlng(lng - <span class="number">105.0</span>, lat - <span class="number">35.0</span>)</span><br><span class="line">    radlat = lat / <span class="number">180.0</span> * pi</span><br><span class="line">    magic = math.sin(radlat)</span><br><span class="line">    magic = <span class="number">1</span> - ee * magic * magic</span><br><span class="line">    sqrtmagic = math.sqrt(magic)</span><br><span class="line">    dlat = (dlat * <span class="number">180.0</span>) / ((a * (<span class="number">1</span> - ee)) / (magic * sqrtmagic) * pi)</span><br><span class="line">    dlng = (dlng * <span class="number">180.0</span>) / (a / sqrtmagic * math.cos(radlat) * pi)</span><br><span class="line">    mglat = lat + dlat</span><br><span class="line">    mglng = lng + dlng</span><br><span class="line">    <span class="keyword">return</span> [lng * <span class="number">2</span> - mglng, lat * <span class="number">2</span> - mglat]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bd09_to_wgs84</span>(<span class="params">bd_lon, bd_lat</span>):</span></span><br><span class="line">    lon, lat = bd09_to_gcj02(bd_lon, bd_lat)</span><br><span class="line">    <span class="keyword">return</span> gcj02_to_wgs84(lon, lat)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wgs84_to_bd09</span>(<span class="params">lon, lat</span>):</span></span><br><span class="line">    lon, lat = wgs84_to_gcj02(lon, lat)</span><br><span class="line">    <span class="keyword">return</span> gcj02_to_bd09(lon, lat)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlat</span>(<span class="params">lng, lat</span>):</span></span><br><span class="line">    ret = -<span class="number">100.0</span> + <span class="number">2.0</span> * lng + <span class="number">3.0</span> * lat + <span class="number">0.2</span> * lat * lat + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.2</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lat * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lat / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">160.0</span> * math.sin(lat / <span class="number">12.0</span> * pi) + <span class="number">320</span> *</span><br><span class="line">            math.sin(lat * pi / <span class="number">30.0</span>)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_transformlng</span>(<span class="params">lng, lat</span>):</span></span><br><span class="line">    ret = <span class="number">300.0</span> + lng + <span class="number">2.0</span> * lat + <span class="number">0.1</span> * lng * lng + \</span><br><span class="line">          <span class="number">0.1</span> * lng * lat + <span class="number">0.1</span> * math.sqrt(math.fabs(lng))</span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(<span class="number">6.0</span> * lng * pi) + <span class="number">20.0</span> *</span><br><span class="line">            math.sin(<span class="number">2.0</span> * lng * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">20.0</span> * math.sin(lng * pi) + <span class="number">40.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">3.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    ret += (<span class="number">150.0</span> * math.sin(lng / <span class="number">12.0</span> * pi) + <span class="number">300.0</span> *</span><br><span class="line">            math.sin(lng / <span class="number">30.0</span> * pi)) * <span class="number">2.0</span> / <span class="number">3.0</span></span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">out_of_china</span>(<span class="params">lng, lat</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    判断是否在国内，不在国内不做偏移</span></span><br><span class="line"><span class="string">    :param lng:</span></span><br><span class="line"><span class="string">    :param lat:</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">not</span> (lng &gt; <span class="number">73.66</span> <span class="keyword">and</span> lng &lt; <span class="number">135.05</span> <span class="keyword">and</span> lat &gt; <span class="number">3.86</span> <span class="keyword">and</span> lat &lt; <span class="number">53.55</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    lng = <span class="number">116.382997</span></span><br><span class="line">    lat = <span class="number">39.915156</span></span><br><span class="line">    result1 = gcj02_to_bd09(lng, lat)</span><br><span class="line">    result2 = bd09_to_gcj02(lng, lat)</span><br><span class="line">    result3 = wgs84_to_gcj02(lng, lat)</span><br><span class="line">    result4 = gcj02_to_wgs84(lng, lat)</span><br><span class="line">    result5 = bd09_to_wgs84(lng, lat)</span><br><span class="line">    result6 = wgs84_to_bd09(lng, lat)</span><br><span class="line"></span><br><span class="line">    g = Geocoding(<span class="string">&#x27;e4f4a2208ee6f1f6298f5cb2342d66fb&#x27;</span>)  <span class="comment"># 这里填写你的高德api的key</span></span><br><span class="line">    result7 = g.geocode(<span class="string">&#x27;武汉市武昌区&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(result1, result2, result3, result4, result5, result6, result7)</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title></title>
    <url>/2024/03/25/%E9%AB%98%E5%BE%B7%E7%88%AC%E8%99%AB2.0/</url>
    <content><![CDATA[<p>@<a href="高德爬虫2.0">TOC</a></p>
<h1 id="一、结果"><a href="#一、结果" class="headerlink" title="一、结果"></a>一、结果</h1><p><img src="https://img-blog.csdnimg.cn/20210605000743409.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1dUWXVvbmc=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h1 id="二、代码"><a href="#二、代码" class="headerlink" title="二、代码"></a>二、代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">gaode.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Created on Fri June 4 2021</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@author: Wyt</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"><span class="keyword">from</span> openpyxl <span class="keyword">import</span> load_workbook</span><br><span class="line"><span class="keyword">from</span> transCoordinateSystem <span class="keyword">import</span> gcj02_to_wgs84</span><br><span class="line"><span class="keyword">import</span> openpyxl</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getcity</span>(<span class="params">keywords</span>):</span></span><br><span class="line">    url1 = <span class="string">&quot;https://restapi.amap.com/v3/place/text&quot;</span></span><br><span class="line">    i = <span class="number">0</span>  <span class="comment"># 爬取的页面信息，i=2时即爬取第2页的数据。当 result[&#x27;count&#x27;]=0 时即此页面已经无信息，爬取所有数据时可以用此终止循环</span></span><br><span class="line">    req_url1 = poi_search_url + <span class="string">&quot;?key=&quot;</span> + amap_web_key + <span class="string">&#x27;&amp;extensions=all&amp;keywords=&#x27;</span> + quote(</span><br><span class="line">        keywords) + <span class="string">&#x27;&amp;offset=25&#x27;</span> + <span class="string">&#x27;&amp;page=&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;&amp;output=json&#x27;</span></span><br><span class="line">    data1 = &#123;&#125;</span><br><span class="line">    f = request.urlopen(req_url1)</span><br><span class="line">    data1 = f.read()</span><br><span class="line">    data1 = data1.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    result1 = json.loads(data1)</span><br><span class="line">    city_list = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> result1[<span class="string">&#x27;suggestion&#x27;</span>][<span class="string">&#x27;cities&#x27;</span>]:</span><br><span class="line">            <span class="comment"># print(i[&#x27;name&#x27;])</span></span><br><span class="line">            city_list.append(i[<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="built_in">print</span>(city_list)</span><br><span class="line">    <span class="keyword">return</span> city_list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单页获取pois,返回data</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpoi_page</span>(<span class="params">cityname, keywords, page</span>):</span></span><br><span class="line">    req_url = poi_search_url + <span class="string">&quot;?key=&quot;</span> + amap_web_key + <span class="string">&#x27;&amp;extensions=all&amp;keywords=&#x27;</span> + quote(</span><br><span class="line">        keywords) + <span class="string">&#x27;&amp;city=&#x27;</span> + quote(cityname) + <span class="string">&#x27;&amp;citylimit=true&#x27;</span> + <span class="string">&#x27;&amp;offset=25&#x27;</span> + <span class="string">&#x27;&amp;page=&#x27;</span> + <span class="built_in">str</span>(</span><br><span class="line">        page) + <span class="string">&#x27;&amp;output=json&#x27;</span></span><br><span class="line"></span><br><span class="line">    data = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> request.urlopen(req_url) <span class="keyword">as</span> f1:</span><br><span class="line">        data = f1.read()</span><br><span class="line">        data = data.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将返回的poi数据装入集合返回</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hand</span>(<span class="params">poilist, result</span>):</span></span><br><span class="line">    <span class="comment"># result = json.loads(result)  # 将字符串转换为json</span></span><br><span class="line">    pois = result[<span class="string">&#x27;pois&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(pois)):</span><br><span class="line">        poilist.append(pois[i])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据城市名称和分类关键字获取poi数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getpois</span>(<span class="params">cityname, keywords</span>):</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    poilist = []</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:  <span class="comment"># 使用while循环不断分页获取数据</span></span><br><span class="line">        result = getpoi_page(cityname, keywords, i)</span><br><span class="line">        <span class="built_in">print</span>(result)</span><br><span class="line">        result = json.loads(result)  <span class="comment"># 将字符串转换为json</span></span><br><span class="line">        <span class="comment"># errors修改：如果没有找到数据，则跳出</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> (result[<span class="string">&#x27;count&#x27;</span>] == <span class="string">&#x27;0&#x27;</span>) | (<span class="string">&#x27;count&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> result.keys()):</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">        <span class="comment"># 将结果装入集合返回</span></span><br><span class="line">        hand(poilist, result)</span><br><span class="line">        i = i + <span class="number">1</span></span><br><span class="line">        <span class="comment"># print(&quot;______________________________&quot;)</span></span><br><span class="line">        <span class="built_in">print</span>(poilist)</span><br><span class="line">    <span class="keyword">return</span> poilist</span><br><span class="line"></span><br><span class="line"><span class="comment"># def write_to_excel(classfield,allcol):</span></span><br><span class="line"><span class="comment">#     print(classfield)</span></span><br><span class="line"><span class="comment">#     # 一个Workbook对象，这就相当于创建了一个Excel文件</span></span><br><span class="line"><span class="comment">#     book = openpyxl.Workbook()</span></span><br><span class="line"><span class="comment">#     sheet = book.create_sheet(index=0)</span></span><br><span class="line"><span class="comment">#     # 第一行(列标题)</span></span><br><span class="line"><span class="comment">#     sheet.cell(1, 1,&#x27;品牌名称&#x27;)</span></span><br><span class="line"><span class="comment">#     sheet.cell(1, 2, &#x27;门店名称&#x27;)</span></span><br><span class="line"><span class="comment">#     sheet.cell(1, 3, &#x27;分类&#x27;)</span></span><br><span class="line"><span class="comment">#     sheet.cell(1, 4, &#x27;省&#x27;)</span></span><br><span class="line"><span class="comment">#     sheet.cell(1, 5, &#x27;市&#x27;)</span></span><br><span class="line"><span class="comment">#     sheet.cell(1, 6, &#x27;区/县&#x27;)</span></span><br><span class="line"><span class="comment">#     sheet.cell(1, 7, &#x27;地址&#x27;)</span></span><br><span class="line"><span class="comment">#     sheet.cell(1, 8, &#x27;经度&#x27;)</span></span><br><span class="line"><span class="comment">#     sheet.cell(1, 9, &#x27;维度&#x27;)</span></span><br><span class="line"><span class="comment">#     count=0</span></span><br><span class="line"><span class="comment">#     for i in allcol:</span></span><br><span class="line"><span class="comment">#         brand = i</span></span><br><span class="line"><span class="comment">#         poilist = getpois(cityname,brand)</span></span><br><span class="line"><span class="comment">#         print(brand)</span></span><br><span class="line"><span class="comment">#         for i in range(len(poilist)):</span></span><br><span class="line"><span class="comment">#             location = poilist[i][&#x27;location&#x27;]  # 经纬度</span></span><br><span class="line"><span class="comment">#             name = poilist[i][&#x27;name&#x27;]  # 店名</span></span><br><span class="line"><span class="comment">#             type = poilist[i][&#x27;type&#x27;]  # 分类</span></span><br><span class="line"><span class="comment">#             pname = poilist[i][&#x27;pname&#x27;]  # 省</span></span><br><span class="line"><span class="comment">#             cityname = poilist[i][&#x27;cityname&#x27;]  # 市</span></span><br><span class="line"><span class="comment">#             adname = poilist[i][&#x27;adname&#x27;]  # 区/县</span></span><br><span class="line"><span class="comment">#             address = poilist[i].get(&#x27;address&#x27;)  # 地址</span></span><br><span class="line"><span class="comment">#             lng = str(location).split(&quot;,&quot;)[0]  # 经度</span></span><br><span class="line"><span class="comment">#             lat = str(location).split(&quot;,&quot;)[1]  # 纬度</span></span><br><span class="line"><span class="comment">#             &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#             result = gcj02_to_wgs84(float(lng), float(lat))</span></span><br><span class="line"><span class="comment">#             lng = result[0]</span></span><br><span class="line"><span class="comment">#             lat = result[1]</span></span><br><span class="line"><span class="comment">#             &#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#             # 每一行写入</span></span><br><span class="line"><span class="comment">#             # print(count + i + 1)</span></span><br><span class="line"><span class="comment">#             sheet.cell(count + i + 2, 1, brand)</span></span><br><span class="line"><span class="comment">#             sheet.cell(count + i + 2, 2, name)</span></span><br><span class="line"><span class="comment">#             sheet.cell(count + i + 2, 3, type)</span></span><br><span class="line"><span class="comment">#             sheet.cell(count + i + 2, 4, pname)</span></span><br><span class="line"><span class="comment">#             sheet.cell(count + i + 2, 5, cityname)</span></span><br><span class="line"><span class="comment">#             sheet.cell(count + i + 2, 6, adname)</span></span><br><span class="line"><span class="comment">#             sheet.cell(count + i + 2, 7, address)</span></span><br><span class="line"><span class="comment">#             sheet.cell(count + i + 2, 8, lng)</span></span><br><span class="line"><span class="comment">#             sheet.cell(count + i + 2, 9, lat)</span></span><br><span class="line"><span class="comment">#             print(brand+&quot;写入成功！&quot;)</span></span><br><span class="line"><span class="comment">#             count=count+len(poilist)</span></span><br><span class="line"><span class="comment">#         book.save(r&#x27;total_data_test5555.xlsx&#x27;)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#         book.close()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据写入excel</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write_to_excel</span>(<span class="params"> poilist, classfield,count</span>):</span></span><br><span class="line">    sheet.cell(<span class="number">1</span>, <span class="number">1</span>,<span class="string">&#x27;品牌名称&#x27;</span>)</span><br><span class="line">    sheet.cell(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&#x27;门店名称&#x27;</span>)</span><br><span class="line">    sheet.cell(<span class="number">1</span>, <span class="number">3</span>, <span class="string">&#x27;分类&#x27;</span>)</span><br><span class="line">    sheet.cell(<span class="number">1</span>, <span class="number">4</span>, <span class="string">&#x27;省&#x27;</span>)</span><br><span class="line">    sheet.cell(<span class="number">1</span>, <span class="number">5</span>, <span class="string">&#x27;市&#x27;</span>)</span><br><span class="line">    sheet.cell(<span class="number">1</span>, <span class="number">6</span>, <span class="string">&#x27;区/县&#x27;</span>)</span><br><span class="line">    sheet.cell(<span class="number">1</span>, <span class="number">7</span>, <span class="string">&#x27;地址&#x27;</span>)</span><br><span class="line">    sheet.cell(<span class="number">1</span>, <span class="number">8</span>, <span class="string">&#x27;经度&#x27;</span>)</span><br><span class="line">    sheet.cell(<span class="number">1</span>, <span class="number">9</span>, <span class="string">&#x27;维度&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># poilist 代表的是爬取的所有的内容</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(poilist)):</span><br><span class="line">        name = (poilist[i][<span class="string">&#x27;name&#x27;</span>])</span><br><span class="line">        <span class="built_in">type</span> = poilist[i][<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">        pname = poilist[i][<span class="string">&#x27;pname&#x27;</span>]  <span class="comment">#省名称</span></span><br><span class="line">        cityname = poilist[i][<span class="string">&#x27;cityname&#x27;</span>]  <span class="comment"># 市名称</span></span><br><span class="line">        adname = poilist[i][<span class="string">&#x27;adname&#x27;</span>]  <span class="comment">#区/县</span></span><br><span class="line">        <span class="comment"># errors修改：KeyErrors</span></span><br><span class="line">        <span class="comment"># 使用dict内置的get(key[,default])方法。如果key存在，则返回其value，否则返回default。</span></span><br><span class="line">        address = poilist[i].get(<span class="string">&#x27;address&#x27;</span>,<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">        location = poilist[i][<span class="string">&#x27;location&#x27;</span>]</span><br><span class="line">        lng = <span class="built_in">str</span>(location).split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        lat = <span class="built_in">str</span>(location).split(<span class="string">&quot;,&quot;</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        <span class="comment">#坐标转换</span></span><br><span class="line">        result = gcj02_to_wgs84(<span class="built_in">float</span>(lng), <span class="built_in">float</span>(lat))</span><br><span class="line">        lng = result[<span class="number">0</span>]</span><br><span class="line">        lat = result[<span class="number">1</span>]</span><br><span class="line">        <span class="built_in">print</span>(count + i)</span><br><span class="line">        sheet.cell(count + i, <span class="number">1</span>, <span class="built_in">str</span>(classfield))</span><br><span class="line">        sheet.cell(count + i, <span class="number">2</span>, <span class="built_in">str</span>(name))</span><br><span class="line">        sheet.cell(count + i, <span class="number">3</span>, <span class="built_in">str</span>(<span class="built_in">type</span>))</span><br><span class="line">        sheet.cell(count + i , <span class="number">4</span>, <span class="built_in">str</span>(pname))</span><br><span class="line">        sheet.cell(count + i, <span class="number">5</span>, <span class="built_in">str</span>(cityname))</span><br><span class="line">        sheet.cell(count + i, <span class="number">6</span>, <span class="built_in">str</span>(adname))</span><br><span class="line">        sheet.cell(count + i, <span class="number">7</span>, <span class="built_in">str</span>(address))</span><br><span class="line">        sheet.cell(count + i, <span class="number">8</span>, <span class="built_in">str</span>(lng))</span><br><span class="line">        sheet.cell(count + i, <span class="number">9</span>, <span class="built_in">str</span>(lat))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最后，将以上操作保存到指定的Excel文件中</span></span><br><span class="line">    <span class="comment"># TODO 需要设置写入的excel路径</span></span><br><span class="line">    book.save(<span class="string">r&#x27;D:/Desktop/total_data.xlsx&#x27;</span>)</span><br><span class="line">    <span class="comment"># book.save(r&#x27;D:/Desktop/&#x27; + cityname + &quot;_&quot; + classfield + &#x27;.xls&#x27;)</span></span><br><span class="line">    book.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#按各行政区分别获取</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">for clas in classes:</span></span><br><span class="line"><span class="string">    classes_all_pois = []</span></span><br><span class="line"><span class="string">    for area in nanning_areas:</span></span><br><span class="line"><span class="string">        pois_area = getpois(area, clas)</span></span><br><span class="line"><span class="string">        print(&#x27;当前城区：&#x27; + str(area) + &#x27;, 分类：&#x27; + str(clas) + &quot;, 总的有&quot; + str(len(pois_area)) + &quot;条数据&quot;)</span></span><br><span class="line"><span class="string">        classes_all_pois.extend(pois_area)</span></span><br><span class="line"><span class="string">    print(&quot;所有城区的数据汇总，总数为：&quot; + str(len(classes_all_pois)))</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    write_to_excel(classes_all_pois, cityname, clas)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    print(&#x27;================分类：&#x27;  + str(clas) + &quot;写入成功&quot;)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># book = openpyxl.Workbook()</span></span><br><span class="line"><span class="comment"># sheet = book.create_sheet(index=0)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 申请的密钥</span></span><br><span class="line">    <span class="comment"># TODO 需要修改成为自己的密钥</span></span><br><span class="line">    amap_web_key = <span class="string">&#x27;3aae9df0e318a90227a9a5f5bc81847e&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 要爬取的API根</span></span><br><span class="line">    poi_search_url = <span class="string">&quot;http://restapi.amap.com/v3/place/text&quot;</span></span><br><span class="line">    poi_boundary_url = <span class="string">&quot;https://ditu.amap.com/detail/get/detail&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># cityname为需要爬取的POI所属的城市名，city_areas为城市下面的行政区，classes为多个POI分类名的集合.</span></span><br><span class="line">    <span class="comment"># (中文名或者代码都可以，代码详见高德地图的POI分类编码表)</span></span><br><span class="line">    <span class="comment"># classes = [ &#x27;1點點&#x27;, &#x27;24客便利店&#x27;]</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 读取品牌名称</span></span><br><span class="line">    <span class="comment"># TODO 需要修改成自己的【需要处理的品牌】的文件的路径</span></span><br><span class="line">    sheets = load_workbook(<span class="string">&quot;D:/Desktop/1.xlsx&quot;</span>).worksheets</span><br><span class="line">    classes = []</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> sheets[<span class="number">0</span>][<span class="string">&#x27;A&#x27;</span>]:</span><br><span class="line">        classes.append(col.value)</span><br><span class="line">    classes.remove(<span class="string">&#x27;品牌名称&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(classes)</span><br><span class="line">    book = openpyxl.Workbook()</span><br><span class="line">    sheet = book.create_sheet(index=<span class="number">0</span>)</span><br><span class="line">    <span class="comment"># 直接获取整个城市的POI数据</span></span><br><span class="line">    count = <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> clas <span class="keyword">in</span> classes:</span><br><span class="line">        classes_all_pois = []</span><br><span class="line">        city = getcity(clas)</span><br><span class="line">        <span class="keyword">for</span> cityname <span class="keyword">in</span> city:</span><br><span class="line">            pois_area = getpois(cityname, clas)</span><br><span class="line">            classes_all_pois.extend(pois_area)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;当前城区：&#x27;</span> + <span class="built_in">str</span>(cityname) + <span class="string">&#x27;, 分类：&#x27;</span> + <span class="built_in">str</span>(clas) + <span class="string">&quot;, 总的有&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(pois_area)) + <span class="string">&quot;条数据&quot;</span>)</span><br><span class="line">        write_to_excel(classes_all_pois, clas, count)</span><br><span class="line">        count = count + <span class="built_in">len</span>(classes_all_pois)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;所有城区的数据汇总，总数为：&quot;</span> + <span class="built_in">str</span>(<span class="built_in">len</span>(classes_all_pois)))</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;================分类：&#x27;</span> + <span class="built_in">str</span>(clas) + <span class="string">&quot;写入成功&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="三、感想"><a href="#三、感想" class="headerlink" title="三、感想"></a>三、感想</h1><p>www一个月断断续续的更改，函数循环加主体循环把自己无限绕进去了，终于改完了</p>
<p>感谢@Fzy，@Tj，@Xk的指导</p>
]]></content>
  </entry>
</search>
